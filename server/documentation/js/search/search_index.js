var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.831,1,2.946]],["body/controllers/AppController.html",[0,3.059,1,4.923,2,2.489,3,0.17,4,0.151,5,0.151,6,4.816,7,0.31,8,1.853,9,6.685,10,1.043,11,0.013,12,0.539,13,5.521,14,1.507,15,1.155,16,0.28,17,1.32,18,4.655,19,4.816,20,0.17,21,0.233,22,2.71,23,1.784,24,1.853,25,5.521,26,3.728,27,5.521,28,5.521,29,6.786,30,4.582,31,0.01,32,0.01]],["title/modules/AppModule.html",[33,1.567,34,2.946]],["body/modules/AppModule.html",[1,4.508,2,2.443,3,0.12,4,0.107,5,0.107,11,0.013,16,0.336,17,0.936,18,4.616,19,3.414,20,0.12,21,0.165,31,0.008,32,0.008,33,2.399,34,5.971,35,1.921,36,1.921,37,2.108,38,2.108,39,1.921,40,3.348,41,2.108,42,3.414,43,3.414,44,3.414,45,4.616,46,3.925,47,4.92,48,4.92,49,4.92,50,4.92,51,2.919,52,2.108,53,2.01,54,3.914,55,3.239,56,5.418,57,3.914,58,3.414,59,3.914,60,3.914,61,3.914,62,5.418,63,2.479,64,3.914,65,3.914,66,2.479,67,3.914,68,3.414,69,2.839,70,3.914,71,1.182,72,2.479,73,1.84,74,3.914,75,5.418,76,3.914,77,5.418,78,3.914,79,3.914,80,3.914,81,3.914,82,3.414,83,3.914,84,1.265,85,5.418,86,1.212,87,1.764,88,4.726,89,3.085,90,3.914,91,3.914,92,3.914,93,3.914,94,2.339,95,5.418,96,4.271]],["title/injectables/AppService.html",[18,2.573,97,0.971]],["body/injectables/AppService.html",[3,0.183,4,0.163,5,0.163,7,0.334,8,1.938,9,6.856,11,0.013,12,0.58,14,1.624,15,1.208,16,0.246,17,1.422,18,4.497,20,0.183,21,0.251,24,1.624,31,0.011,32,0.011,97,1.697,98,2.383,99,5.188,100,5.947,101,5.947,102,5.947]],["title/modules/AuthModule.html",[33,1.567,45,2.573]],["body/modules/AuthModule.html",[3,0.157,4,0.139,5,0.139,11,0.013,16,0.324,17,1.216,20,0.157,21,0.215,31,0.01,32,0.01,33,2.732,35,2.497,36,2.497,37,2.74,38,2.74,39,2.497,40,3.813,41,3.813,45,5.05,51,3.473,52,2.74,53,2.613,55,3.854,68,5.624,69,3.69,88,4.437,103,4.437,104,4.437,105,4.437,106,5.257,107,5.086,108,5.086,109,6.447,110,5.086,111,5.086,112,4.009,113,6.447,114,4.437,115,5.086,116,5.086,117,4.437,118,5.086]],["title/injectables/AuthService.html",[97,0.971,106,2.573]],["body/injectables/AuthService.html",[3,0.142,4,0.126,5,0.126,7,0.259,8,1.654,11,0.013,12,0.591,14,1.261,15,1.151,16,0.279,17,1.104,20,0.142,21,0.195,23,1.958,24,1.261,31,0.009,32,0.009,69,3.349,86,1.355,97,1.448,98,1.85,106,3.837,112,3.639,119,4.028,120,2.927,121,6.057,122,2.427,123,4.617,124,7.647,125,7.793,126,4.617,127,1.768,128,0.436,129,1.145,130,6.057,131,4.617,132,3.829,133,3.349,134,2.848,135,4.617,136,2.616,137,4.617,138,2.254,139,6.76,140,2.731,141,6.057,142,6.057,143,6.057,144,4.617,145,6.057,146,4.617,147,4.617,148,1.718,149,4.028,150,6.76,151,4.617,152,4.617]],["title/modules/BcryptModule.html",[33,1.567,46,2.187]],["body/modules/BcryptModule.html",[3,0.171,4,0.152,5,0.152,11,0.013,16,0.282,17,1.331,20,0.171,21,0.235,31,0.01,32,0.01,33,2.846,35,2.733,36,2.733,37,2.999,38,2.999,39,2.733,40,3.972,41,3.972,46,4.378,51,3.674,52,2.999,53,2.86,153,4.856,154,4.856,155,4.856,156,4.523,157,5.567,158,5.567]],["title/injectables/BcryptService.html",[97,0.971,156,2.187]],["body/injectables/BcryptService.html",[3,0.153,4,0.136,5,0.136,7,0.279,8,1.735,11,0.013,12,0.62,14,1.735,15,1.38,16,0.263,17,1.189,20,0.153,21,0.21,24,1.358,31,0.01,32,0.01,86,1.422,97,1.52,98,1.993,120,3.378,127,1.855,128,0.457,129,1.201,138,2.365,140,3.158,156,3.423,159,4.338,160,6.355,161,7.381,162,6.355,163,4.973,164,1.675,165,2.365,166,6.355,167,7.381,168,4.973,169,5.544,170,4.973,171,6.355,172,4.973,173,4.973,174,4.973,175,2.679,176,2.441,177,4.973,178,3.358]],["title/classes/BoardAddressDTO.html",[21,0.171,179,2.742]],["body/classes/BoardAddressDTO.html",[3,0.167,4,0.148,5,0.148,7,0.304,10,1.376,11,0.013,12,0.711,15,1.296,16,0.224,20,0.167,21,0.283,31,0.01,32,0.01,128,0.524,179,4.529,180,1.212,181,6.641,182,4.725,183,1.357,184,3.742,185,4.615,186,4.615,187,4.249,188,5.416,189,5.416,190,1.063,191,5.416,192,5.416,193,3.17,194,4.249,195,3.033,196,2.091]],["title/classes/BoardAddressInput.html",[21,0.171,197,1.909]],["body/classes/BoardAddressInput.html",[3,0.154,4,0.137,5,0.137,7,0.281,10,1.328,11,0.013,12,0.686,15,1.26,16,0.264,20,0.197,21,0.297,31,0.01,32,0.01,71,1.513,128,0.505,180,1.121,183,1.292,184,4.08,185,4.453,186,4.453,190,1.012,193,3.082,194,4.045,195,2.926,196,1.934,197,3.304,198,5.37,199,2.995,200,4.312,201,5.01,202,5.01,203,5.01,204,5.01,205,3.082,206,3.617,207,2.559,208,3.786,209,5.033,210,2.46,211,2.355]],["title/classes/BoardAddressOutput.html",[21,0.171,210,1.993]],["body/classes/BoardAddressOutput.html",[3,0.171,4,0.152,5,0.152,11,0.013,15,1.159,16,0.281,20,0.21,21,0.311,31,0.01,32,0.01,71,1.676,180,1.242,184,3.498,185,3.517,186,3.517,190,0.88,193,3.197,194,4.314,195,3.066,196,2.143,197,3.201,198,4.027,199,3.318,205,3.197,206,3.857,207,2.728,208,3.967,209,5.367,210,3.343,211,2.61]],["title/controllers/BoardCommentController.html",[0,1.831,212,2.946]],["body/controllers/BoardCommentController.html",[0,1.582,2,1.582,3,0.108,4,0.096,5,0.096,7,0.197,8,1.37,10,1.208,11,0.013,12,0.624,14,1.745,15,1.197,16,0.28,17,0.839,20,0.108,21,0.148,22,1.723,23,1.134,24,1.745,26,3.388,30,3.955,31,0.008,32,0.008,63,4.284,86,1.43,127,1.866,128,0.46,129,1.208,138,1.306,164,1.2,176,1.723,190,1.267,212,3.64,213,1.909,214,3.061,215,2.37,216,3.509,217,3.955,218,5.109,219,5.109,220,4.617,221,3.509,222,4.316,223,3.621,224,3.509,225,3.955,226,3.509,227,2.159,228,3.509,229,3.283,230,3.509,231,4.75,232,3.509,233,3.061,234,4.427,235,3.509,236,3.509,237,3.509,238,4.316,239,4.05,240,3.509,241,3.509,242,2.546,243,3.061,244,2.37,245,2.098,246,5.103,247,3.061,248,1.802,249,3.509,250,3.501,251,1.599,252,2.766,253,2.223,254,3.388,255,2.223,256,2.098,257,2.546,258,2.546,259,3.509,260,6.392,261,5.038,262,3.061,263,3.509,264,3.509,265,3.061,266,3.509,267,5.018,268,4.377,269,3.061,270,3.509,271,3.061]],["title/entities/BoardCommentEntity.html",[272,1.909,273,2.427]],["body/entities/BoardCommentEntity.html",[3,0.127,4,0.113,5,0.113,7,0.231,10,1.476,11,0.013,12,0.762,15,1.311,16,0.264,20,0.127,21,0.237,31,0.009,32,0.009,84,2.214,87,1.855,128,0.562,129,1.295,164,1.525,183,1.134,190,1.085,213,2.231,227,1.801,272,1.934,273,3.352,274,2.607,275,6.229,276,3.589,277,2.999,278,2.656,279,2.656,280,3.132,281,3.277,282,3.437,283,3.437,284,3.614,285,4.628,286,4.115,287,5.336,288,4.115,289,4.115,290,4.115,291,3.691,292,5.029,293,4.115,294,4.892,295,4.115,296,3.243,297,4.115,298,4.115,299,5.029,300,4.115,301,1.782,302,4.42,303,2.331,304,4.115,305,2.753]],["title/modules/BoardCommentModule.html",[33,1.567,47,2.742]],["body/modules/BoardCommentModule.html",[2,2.682,3,0.138,4,0.123,5,0.123,11,0.013,16,0.332,17,1.074,20,0.138,21,0.19,31,0.009,32,0.009,33,2.575,35,2.206,36,2.206,37,2.42,38,2.42,39,2.206,40,3.593,41,3.593,46,4.088,47,5.536,51,3.205,52,2.42,53,2.308,55,3.556,63,2.846,72,2.846,73,2.112,87,2.026,212,4.839,213,1.268,250,4.537,251,1.821,252,3.542,273,2.686,306,3.919,307,4.493,308,3.919,309,3.919,310,4.618,311,3.898,312,4.493,313,3.259,314,4.493,315,2.545,316,3.259,317,3.259,318,3.259,319,4.316,320,4.493,321,3.056,322,2.686,323,2.846,324,4.493]],["title/injectables/BoardCommentRepository.html",[97,0.971,310,2.3]],["body/injectables/BoardCommentRepository.html",[3,0.088,4,0.078,5,0.078,7,0.16,8,1.176,11,0.013,12,0.697,14,1.906,15,1.216,16,0.289,17,0.681,20,0.088,21,0.12,23,0.921,24,1.783,31,0.007,32,0.007,73,1.34,84,0.921,86,1.562,87,1.941,97,1.03,98,1.142,120,3.467,122,1.725,127,2.038,128,0.502,129,1.319,133,2.067,134,1.34,138,1.931,140,3.283,148,1.061,164,1.241,165,2.79,175,2.319,176,3.048,190,1.132,213,2.056,220,2.246,223,3.276,227,1.971,234,3.457,239,3.664,251,1.176,253,1.806,254,2.908,255,1.806,273,3.903,277,2.024,278,1.793,279,1.793,280,1.399,281,2.971,282,2.319,284,1.614,301,1.234,310,3.276,315,1.614,316,2.067,325,5.282,326,2.486,327,5.783,328,4.527,329,5.783,330,5.19,331,3.756,332,4.306,333,5.19,334,4.527,335,2.486,336,4.195,337,2.85,338,2.85,339,2.486,340,2.85,341,2.85,342,4.306,343,2.85,344,4.306,345,2.85,346,3.756,347,2.85,348,4.306,349,2.85,350,2.85,351,2.85,352,3.102,353,2.85,354,3.905,355,2.85,356,1.925,357,2.728,358,1.464,359,1.925,360,1.806,361,2.067,362,2.85,363,2.85,364,2.85,365,1.806,366,2.85,367,2.85,368,2.85,369,2.85,370,2.85,371,2.486,372,2.85,373,4.306,374,2.486,375,1.704,376,2.85,377,2.85,378,2.85,379,4.306,380,2.246,381,1.806,382,2.85]],["title/classes/BoardCommentResolver.html",[21,0.171,319,2.946]],["body/classes/BoardCommentResolver.html",[3,0.103,4,0.091,5,0.091,7,0.187,8,1.32,10,1.18,11,0.013,12,0.647,14,1.705,15,1.177,16,0.286,20,0.103,21,0.141,22,1.637,23,1.077,24,1.705,31,0.007,32,0.007,63,4.379,71,1.007,84,1.077,86,1.483,122,1.336,127,1.935,128,0.544,129,1.252,138,1.241,164,1.156,180,0.746,190,1.257,207,2.77,213,1.951,222,4.816,227,2.135,229,3.207,234,4.367,238,4.816,248,2.484,250,4.132,251,1.554,252,2.628,262,2.908,265,2.908,268,4.219,269,2.908,271,2.908,305,1.637,319,3.508,352,3.402,358,3.207,359,2.251,360,2.112,383,2.908,384,4.128,385,4.128,386,3.334,387,3.334,388,3.334,389,3.363,390,4.128,391,3.334,392,3.334,393,3.334,394,3.334,395,2.628,396,3.334,397,2.112,398,2.251,399,3.064,400,3.334,401,3.363,402,3.334,403,1.889,404,3.363,405,2.484,406,3.266,407,2.418,408,2.908,409,2.418,410,2.891,411,2.628,412,4.921,413,2.908,414,3.334,415,3.334,416,4.836,417,1.796]],["title/classes/BoardCommentResponseDTO.html",[21,0.171,358,2.086]],["body/classes/BoardCommentResponseDTO.html",[3,0.169,4,0.151,5,0.151,7,0.309,10,1.04,11,0.013,12,0.537,16,0.28,20,0.169,21,0.232,31,0.01,32,0.01,71,1.662,84,2.189,128,0.396,129,1.28,164,1.316,180,1.232,183,1.37,205,2.82,208,3.649,209,4.34,211,2.588,213,1.912,305,3.326,352,4.049,358,4.038,406,3.718,407,3.994,408,4.803,418,5.909,419,4.34,420,4.955,421,2.703,422,5.506,423,5.506]],["title/classes/BoardCommentSchema.html",[21,0.171,406,2.742]],["body/classes/BoardCommentSchema.html",[3,0.126,4,0.112,5,0.112,7,0.229,10,1.474,11,0.013,12,0.761,15,1.309,16,0.231,20,0.126,21,0.172,31,0.009,32,0.009,71,1.232,84,2.207,128,0.561,129,1.29,148,2.075,164,1.519,180,0.913,183,1.128,190,1.082,205,3.365,207,2.546,208,3.004,213,2.227,227,1.793,277,2.986,278,2.645,279,2.645,280,3.119,281,3.263,282,3.422,283,3.422,284,3.599,291,3.975,301,1.767,305,3.119,406,3.766,421,3.51,424,6.883,425,3.56,426,4.081,427,4.081,428,4.081,429,4.081,430,4.081,431,2.585,432,4.081,433,4.081,434,4.081,435,4.081]],["title/injectables/BoardCommentService.html",[97,0.971,250,2.427]],["body/injectables/BoardCommentService.html",[3,0.067,4,0.059,5,0.059,7,0.28,8,0.952,11,0.013,12,0.658,14,1.795,15,1.27,16,0.279,17,0.52,20,0.067,21,0.092,23,1.41,24,1.74,31,0.005,32,0.005,63,4.366,84,0.702,86,1.509,97,0.833,98,0.871,120,3.307,122,1.397,127,1.969,128,0.485,129,1.274,134,2.052,138,2.612,140,3.298,148,0.809,156,3.302,164,1.613,165,2.653,175,2.945,176,2.865,190,1.231,213,1.945,223,3.724,227,1.856,229,3.605,234,3.93,239,2.765,250,2.083,251,1.493,253,1.377,254,2.354,255,1.377,273,2.083,281,2.997,310,3.306,311,2.565,315,1.231,316,1.576,317,1.576,318,1.576,323,1.377,328,3.807,331,3.807,334,3.04,335,1.895,339,1.895,346,1.895,352,3.809,354,2.947,357,2.208,358,2.565,359,1.467,360,1.377,361,1.576,375,1.299,381,2.765,389,2.69,399,2.208,401,2.351,409,1.576,410,2.083,411,1.713,420,1.467,436,1.895,437,3.485,438,4.994,439,3.485,440,3.485,441,3.485,442,4.364,443,4.364,444,2.173,445,2.173,446,2.173,447,3.485,448,2.173,449,3.485,450,2.173,451,3.485,452,2.173,453,4.356,454,1.713,455,3.485,456,2.173,457,3.485,458,3.485,459,2.173,460,2.173,461,2.173,462,2.173,463,2.173,464,3.166,465,1.576,466,4.994,467,2.173,468,1.713,469,2.173,470,2.173,471,2.173,472,2.173,473,2.173,474,2.173,475,1.895,476,1.895,477,1.377,478,1.895,479,1.713,480,1.895,481,1.895,482,1.895,483,3.04,484,1.895,485,2.173,486,2.173,487,2.173,488,2.173,489,2.173,490,1.576,491,3.485,492,2.173,493,2.173,494,2.173,495,2.173,496,2.173,497,3.485,498,2.173,499,2.173,500,1.576,501,2.173,502,2.173,503,2.173,504,2.173,505,1.895,506,2.173,507,2.173,508,1.895,509,2.173,510,2.173,511,2.173,512,3.485,513,2.173,514,2.173,515,2.173,516,2.173,517,2.173,518,1.895]],["title/controllers/BoardController.html",[0,1.831,519,2.946]],["body/controllers/BoardController.html",[0,1.503,2,1.503,3,0.103,4,0.091,5,0.091,7,0.187,8,1.32,10,1.306,11,0.013,12,0.674,14,1.888,16,0.308,17,0.797,20,0.103,21,0.141,22,1.637,23,1.077,24,1.888,26,3.266,30,3.266,31,0.007,32,0.007,86,1.483,127,1.935,128,0.477,129,1.252,165,2.882,190,1.18,215,2.251,225,3.812,227,1.951,231,5.107,242,2.418,243,4.219,244,2.251,245,1.993,246,4.529,247,2.908,248,2.923,253,2.112,255,2.112,256,1.993,257,2.418,258,2.418,261,4.486,321,1.712,322,1.993,360,2.112,519,3.508,520,2.908,521,3.334,522,3.955,523,2.891,524,3.843,525,3.266,526,5.691,527,3.402,528,3.334,529,3.334,530,3.334,531,4.132,532,3.334,533,3.334,534,2.908,535,3.334,536,3.334,537,3.334,538,4.215,539,3.334,540,3.334,541,3.334,542,3.334,543,3.334,544,2.908,545,4.628,546,3.334,547,3.334,548,3.334,549,3.402,550,2.628,551,3.508,552,2.908,553,2.112,554,2.628,555,2.418,556,2.628,557,3.334,558,3.334,559,3.334,560,6.913,561,3.334,562,3.334,563,3.334,564,3.334,565,3.334,566,2.908,567,3.334,568,2.908,569,3.334,570,2.908,571,2.908]],["title/entities/BoardEntity.html",[272,1.909,321,2.086]],["body/entities/BoardEntity.html",[3,0.122,4,0.108,5,0.108,7,0.222,10,1.496,11,0.013,12,0.773,15,1.359,16,0.258,20,0.122,21,0.23,31,0.008,32,0.008,84,2.362,128,0.574,129,1.381,164,1.494,179,4.218,183,1.104,190,0.864,210,3.067,227,1.764,272,1.858,274,2.504,277,2.937,278,2.601,279,2.601,280,3.067,283,3.365,284,3.539,285,4.532,287,5.393,291,3.629,292,4.924,294,3.448,296,3.115,299,4.924,301,1.711,302,4.3,303,2.239,305,3.47,321,2.802,359,2.669,572,3.448,573,3.365,574,3.365,575,3.365,576,3.952,577,3.952,578,3.952,579,5.455,580,3.952,581,3.952,582,3.952,583,3.952,584,5.455,585,3.952,586,3.952,587,3.952,588,3.952,589,3.952,590,3.448,591,3.952]],["title/entities/BoardIdCounterEntity.html",[272,1.909,592,2.742]],["body/entities/BoardIdCounterEntity.html",[3,0.166,4,0.147,5,0.147,7,0.302,10,1.373,11,0.013,12,0.709,15,1.138,16,0.276,20,0.166,21,0.227,31,0.01,32,0.01,87,2.429,128,0.522,183,1.352,190,1.059,227,2.051,272,2.533,274,3.413,277,3.416,284,4.117,285,5.272,287,5.275,301,2.333,592,4.514,593,6.628,594,4.699,595,6.339,596,5.387,597,5.387,598,5.387,599,5.387]],["title/injectables/BoardIdCounterRepository.html",[97,0.971,600,2.573]],["body/injectables/BoardIdCounterRepository.html",[3,0.149,4,0.133,5,0.133,7,0.272,8,1.708,11,0.013,12,0.61,14,1.325,15,1.178,16,0.302,17,1.16,20,0.149,21,0.205,23,1.568,24,1.325,31,0.01,32,0.01,73,2.281,84,1.568,86,1.4,87,2.188,97,1.496,98,1.944,120,2.998,122,2.507,127,1.826,128,0.45,129,1.182,134,2.281,138,1.806,140,2.188,148,2.576,165,2.328,227,1.37,251,1.708,301,2.101,315,2.749,336,5.306,356,3.277,399,3.074,592,3.277,595,4.233,600,4.634,601,6.04,602,4.233,603,6.256,604,4.852,605,4.852,606,6.256,607,4.852,608,4.233,609,4.852,610,4.852,611,4.852,612,4.852,613,4.852,614,4.852,615,4.852]],["title/modules/BoardModule.html",[33,1.567,48,2.742]],["body/modules/BoardModule.html",[2,2.436,3,0.12,4,0.107,5,0.107,11,0.013,16,0.336,17,0.932,20,0.12,21,0.165,31,0.008,32,0.008,33,2.394,35,1.914,36,1.914,37,2.1,38,2.1,39,1.914,40,3.341,41,3.341,46,3.92,48,5.593,51,2.911,52,2.1,53,2.002,55,3.23,72,2.47,73,1.833,87,1.758,148,1.451,251,1.92,273,3.23,275,3.073,310,4.122,311,4.093,313,2.828,315,2.208,316,2.828,317,2.828,318,2.828,321,2.776,322,2.33,323,2.47,325,2.828,519,4.499,549,4.763,550,3.073,592,3.649,600,4.61,608,3.401,616,3.401,617,3.401,618,3.401,619,3.401,620,4.914,621,4.122,622,3.898,623,3.898,624,3.401,625,3.23,626,3.073,627,2.828,628,2.47,629,3.898,630,3.401,631,3.92,632,3.898,633,3.898]],["title/classes/BoardPaginationResponse.html",[21,0.171,634,2.3]],["body/classes/BoardPaginationResponse.html",[3,0.169,4,0.15,5,0.15,7,0.308,10,1.278,11,0.013,12,0.66,16,0.28,20,0.169,21,0.232,31,0.01,32,0.01,71,1.658,128,0.486,180,1.228,183,1.368,190,1.072,198,5.317,205,3.051,207,2.71,208,3.643,421,3.32,634,3.831,635,5.777,636,4.79,637,3.948,638,4.643,639,4.121,640,5.491,641,5.491,642,5.491]],["title/controllers/BoardPasswordController.html",[0,1.831,643,2.946]],["body/controllers/BoardPasswordController.html",[0,2.248,2,2.248,3,0.153,4,0.136,5,0.136,7,0.28,8,1.738,10,0.942,11,0.013,12,0.486,14,1.361,16,0.305,17,1.192,20,0.153,21,0.211,22,2.447,23,1.611,24,1.361,26,4.298,30,5.155,31,0.01,32,0.01,66,4.033,86,1.115,127,1.455,128,0.358,129,0.942,165,2.369,190,1.111,213,1.797,215,3.366,227,1.98,231,4.298,242,3.616,244,3.366,245,2.98,246,4.618,251,1.361,256,2.98,257,3.616,258,3.616,261,3.929,359,3.366,643,4.618,644,4.349,645,4.985,646,6.117,647,4.349,648,5.36,649,4.985,650,4.985,651,4.192,652,3.929,653,4.985,654,4.985,655,4.985,656,4.985,657,4.985]],["title/classes/BoardPasswordDTO.html",[21,0.171,648,2.946]],["body/classes/BoardPasswordDTO.html",[3,0.181,4,0.161,5,0.161,7,0.33,10,1.111,11,0.013,12,0.573,15,1.2,16,0.243,20,0.181,21,0.298,31,0.011,32,0.011,128,0.423,164,1.805,180,1.315,183,1.426,187,3.723,193,2.935,195,2.935,196,2.269,213,1.99,648,5.113,658,6.149,659,5.127,660,5.877]],["title/modules/BoardPasswordModule.html",[33,1.567,49,2.742]],["body/modules/BoardPasswordModule.html",[2,2.834,3,0.15,4,0.134,5,0.134,11,0.013,16,0.331,17,1.169,20,0.15,21,0.206,31,0.01,32,0.01,33,2.682,35,2.4,36,2.4,37,2.633,38,2.633,39,2.4,40,3.743,41,2.633,46,4.183,49,5.503,51,3.386,52,2.633,53,2.511,55,3.757,66,3.096,72,3.096,73,2.298,87,2.204,213,1.38,251,1.897,311,3.989,313,3.546,321,2.511,322,2.922,323,3.096,643,5.04,651,4.642,652,3.853,661,4.264,662,4.264,663,4.888,664,4.888,665,4.888,666,4.56,667,4.888,668,4.888]],["title/classes/BoardPasswordResolver.html",[21,0.171,666,2.946]],["body/classes/BoardPasswordResolver.html",[3,0.154,4,0.137,5,0.137,7,0.281,8,1.744,10,0.947,11,0.013,12,0.623,14,1.368,15,1.196,16,0.264,20,0.154,21,0.212,22,2.46,23,1.619,24,1.368,31,0.01,32,0.01,66,4.453,71,1.513,86,1.429,122,2.008,127,1.864,128,0.505,129,1.207,164,1.77,180,1.121,190,1.114,207,2.559,213,1.984,227,1.803,251,1.368,390,3.634,403,2.838,404,3.44,405,3.28,412,3.949,417,3.44,651,4.672,652,3.949,666,4.632,669,4.37,670,5.099,671,5.01,672,5.01,673,5.01,674,5.01,675,5.01,676,5.01]],["title/injectables/BoardPasswordService.html",[97,0.971,651,2.427]],["body/injectables/BoardPasswordService.html",[3,0.148,4,0.132,5,0.132,7,0.27,8,1.7,11,0.013,12,0.607,14,1.315,15,1.174,16,0.285,17,1.152,20,0.148,21,0.203,23,2.012,24,1.315,31,0.01,32,0.01,66,4.371,84,1.557,86,1.393,97,1.489,98,1.93,120,2.988,122,2.495,127,1.818,128,0.448,129,1.177,134,2.927,138,1.793,140,2.807,156,4.241,164,1.65,165,2.317,175,2.595,176,2.365,190,1.093,213,1.948,227,1.948,311,3.974,323,3.052,357,3.052,380,3.797,381,3.052,465,3.494,505,4.202,646,6.019,647,4.202,651,3.722,677,4.202,678,3.797,679,4.817,680,4.817,681,5.432,682,4.202,683,4.817]],["title/controllers/BoardReactionController.html",[0,1.831,684,2.946]],["body/controllers/BoardReactionController.html",[0,2.359,2,2.359,3,0.161,4,0.143,5,0.143,7,0.294,8,1.792,10,0.989,11,0.013,12,0.51,14,1.429,16,0.296,17,1.251,20,0.161,21,0.221,22,2.569,23,1.691,24,1.429,31,0.01,32,0.01,86,1.171,127,1.527,128,0.376,129,0.989,190,1.136,213,1.853,215,3.533,227,1.853,231,4.432,242,3.796,244,3.533,245,3.128,246,4.761,251,1.429,256,3.128,257,3.796,258,3.796,628,4.158,684,4.761,685,4.564,686,5.232,687,4.158,688,4.124,689,5.232,690,6.563,691,5.232,692,4.287,693,4.124,694,5.232,695,5.232,696,5.232,697,4.564]],["title/entities/BoardReactionEntity.html",[272,1.909,625,2.427]],["body/entities/BoardReactionEntity.html",[3,0.144,4,0.128,5,0.128,7,0.263,10,1.451,11,0.013,12,0.749,16,0.253,20,0.144,21,0.198,31,0.009,32,0.009,87,2.111,128,0.552,183,1.237,190,1.216,213,2.208,227,1.921,272,2.201,274,2.966,277,3.2,280,3.341,283,3.666,284,3.856,285,4.937,287,5.055,291,3.887,292,5.365,299,5.365,301,2.027,375,4.313,397,3.873,625,3.654,626,6.164,698,4.084,699,4.312,700,4.682,701,4.682,702,4.682,703,6.113,704,4.682,705,4.682,706,4.682,707,4.682]],["title/modules/BoardReactionModule.html",[33,1.567,620,2.742]],["body/modules/BoardReactionModule.html",[2,2.888,3,0.155,4,0.138,5,0.138,11,0.013,16,0.329,17,1.204,20,0.155,21,0.213,31,0.01,32,0.01,33,2.72,35,2.472,36,2.472,37,2.712,38,2.712,39,2.472,40,3.795,41,2.712,51,3.451,52,2.712,53,2.586,55,3.01,72,3.19,73,2.367,87,2.27,213,1.421,251,1.924,315,2.852,620,5.436,621,4.434,625,3.01,627,3.653,628,3.19,684,5.111,692,4.679,693,3.969,708,4.392,709,4.392,710,5.035,711,5.035,712,4.392,713,4.647,714,5.035,715,5.035]],["title/injectables/BoardReactionRepository.html",[97,0.971,621,2.3]],["body/injectables/BoardReactionRepository.html",[3,0.12,4,0.107,5,0.107,7,0.219,8,1.477,11,0.013,12,0.687,14,1.83,16,0.277,17,0.934,20,0.12,21,0.165,23,1.262,24,1.695,31,0.008,32,0.008,73,1.836,84,1.262,86,1.499,87,1.761,97,1.294,98,1.565,120,3.451,122,2.168,127,1.956,128,0.482,129,1.266,134,1.836,138,2.31,140,3.022,165,2.832,175,2.915,176,2.656,190,1.224,213,2.056,227,2.231,245,2.335,301,1.691,315,2.213,336,4.862,356,2.638,375,3.711,381,3.428,621,3.797,625,2.335,627,2.833,699,2.474,716,3.407,717,6.702,718,6.208,719,5.411,720,6.208,721,3.407,722,3.906,723,3.906,724,5.411,725,3.906,726,5.411,727,3.906,728,3.906,729,3.906,730,4.894,731,3.906,732,5.411,733,3.906,734,3.906,735,6.208,736,3.906,737,4.72,738,3.906,739,3.906,740,3.906]],["title/classes/BoardReactionResolver.html",[21,0.171,713,2.946]],["body/classes/BoardReactionResolver.html",[3,0.156,4,0.138,5,0.138,7,0.284,8,1.755,10,0.956,11,0.013,12,0.627,14,1.382,16,0.292,20,0.156,21,0.214,22,2.484,23,1.636,24,1.382,31,0.01,32,0.01,71,1.528,86,1.438,122,2.028,127,1.876,128,0.508,129,1.214,180,1.132,190,1.119,207,2.575,213,1.994,227,1.814,248,3.301,251,1.382,395,3.989,403,2.867,405,3.301,407,3.671,628,4.474,687,4.071,688,3.989,692,4.685,693,3.989,697,4.414,713,4.662,741,4.414,742,5.061,743,5.061,744,5.061,745,4.001,746,5.061,747,5.061]],["title/classes/BoardReactionSchema.html",[21,0.171,745,2.3]],["body/classes/BoardReactionSchema.html",[3,0.139,4,0.124,5,0.124,7,0.254,10,1.437,11,0.013,12,0.742,16,0.247,20,0.139,21,0.191,31,0.009,32,0.009,71,1.366,128,0.547,148,2.224,180,1.012,183,1.209,190,1.205,205,3.229,207,2.853,208,3.219,213,2.189,227,1.889,277,3.146,280,3.286,283,3.605,284,3.791,291,4.096,301,1.959,375,4.255,397,3.786,398,4.035,421,3.733,699,4.24,745,3.385,748,6.765,749,3.946,750,4.523,751,4.523,752,4.523,753,4.523,754,4.523,755,4.523]],["title/injectables/BoardReactionService.html",[97,0.971,692,2.427]],["body/injectables/BoardReactionService.html",[3,0.161,4,0.143,5,0.143,7,0.293,8,1.789,11,0.013,12,0.639,14,1.425,16,0.296,17,1.248,20,0.161,21,0.22,23,1.687,24,1.425,31,0.01,32,0.01,86,1.466,97,1.567,98,2.091,120,3.102,122,2.626,127,1.913,128,0.471,129,1.238,134,2.453,165,2.438,190,1.135,213,2.022,227,1.473,315,2.956,621,4.474,625,3.12,627,3.786,628,4.538,687,4.151,688,5.165,692,3.917,712,4.552,721,4.552,756,4.552,757,5.219,758,5.219,759,5.219]],["title/injectables/BoardRepository.html",[97,0.971,311,2.086]],["body/injectables/BoardRepository.html",[3,0.081,4,0.072,5,0.072,7,0.147,8,1.102,11,0.013,12,0.695,14,1.904,16,0.272,17,0.626,20,0.081,21,0.111,23,0.846,24,1.856,31,0.006,32,0.006,73,1.231,84,0.846,86,1.521,87,1.181,97,0.965,98,1.049,120,3.47,122,1.618,127,1.984,128,0.489,129,1.284,134,1.231,138,2.449,140,3.267,164,0.965,165,2.854,175,2.982,176,2.717,190,1.233,197,2.316,210,1.286,220,2.064,227,2.182,229,2.53,245,1.565,251,1.345,253,1.659,255,1.659,278,2.051,279,1.681,280,1.286,301,1.134,311,2.843,321,3.245,322,1.565,336,4.015,356,1.768,357,2.557,360,1.659,371,3.521,374,2.285,375,2.944,380,2.064,381,2.557,399,1.659,464,2.928,522,3.507,523,3.309,527,4.063,531,3.309,545,4.17,551,2.928,553,1.659,554,2.064,573,2.175,574,2.653,575,2.653,637,2.175,638,2.557,678,2.064,681,5.216,730,3.182,737,2.285,760,2.285,761,5.535,762,2.726,763,4.926,764,5.979,765,4.297,766,4.297,767,2.619,768,2.619,769,2.619,770,3.521,771,2.619,772,3.521,773,2.619,774,2.619,775,3.574,776,2.619,777,4.037,778,2.619,779,4.037,780,2.619,781,2.285,782,2.619,783,2.285,784,2.619,785,2.619,786,2.619,787,2.619,788,2.619,789,2.619,790,2.619,791,2.619,792,2.619,793,2.619,794,2.619,795,2.619,796,2.619,797,4.037,798,2.619,799,2.619,800,2.619,801,2.619,802,2.619,803,2.619,804,2.619,805,2.619]],["title/classes/BoardResolver.html",[21,0.171,631,2.946]],["body/classes/BoardResolver.html",[3,0.103,4,0.091,5,0.091,7,0.188,8,1.322,10,1.307,11,0.013,12,0.696,14,1.889,16,0.286,20,0.103,21,0.141,22,1.639,23,1.079,24,1.889,31,0.007,32,0.007,71,1.008,84,1.565,86,1.547,122,1.338,127,2.019,128,0.551,129,1.307,180,0.747,190,1.258,207,2.772,227,1.953,229,2.926,248,2.926,251,1.322,305,2.377,390,4.532,395,3.817,397,2.116,398,2.255,399,3.067,403,1.892,404,3.573,405,2.487,407,2.422,409,2.422,410,2.894,411,2.632,412,2.632,413,2.913,417,2.608,522,3.958,523,3.965,524,3.27,525,3.847,527,4.265,534,2.913,544,2.913,549,4.135,550,2.632,566,2.913,568,2.913,570,2.913,571,2.913,631,3.512,634,2.743,635,2.632,639,3.573,762,3.27,770,2.913,772,2.913,775,3.735,806,2.913,807,3.339,808,3.339,809,3.339,810,3.365,811,3.339,812,3.339,813,3.339,814,3.339,815,3.339,816,3.817,817,3.539,818,3.339,819,3.339,820,3.339,821,3.339,822,3.339,823,3.339,824,3.339,825,3.339,826,3.339,827,3.339]],["title/classes/BoardSchema.html",[21,0.171,639,2.187]],["body/classes/BoardSchema.html",[3,0.123,4,0.109,5,0.109,7,0.225,10,1.485,11,0.013,12,0.767,15,1.351,16,0.26,20,0.123,21,0.169,31,0.008,32,0.008,71,1.208,84,2.371,128,0.565,129,1.386,148,2.047,180,0.895,183,1.113,184,2.054,190,0.871,205,3.375,207,2.204,208,2.963,210,3.689,227,1.775,251,1.092,277,2.955,278,2.617,279,2.617,280,3.086,283,3.386,284,3.561,291,3.951,301,1.732,305,3.485,410,2.391,421,3.601,431,2.534,573,3.386,574,3.386,575,3.386,639,2.963,828,3.489,829,3.999,830,3.999,831,3.999,832,3.999,833,3.999,834,3.999,835,3.999,836,3.999,837,3.999,838,3.999]],["title/injectables/BoardService.html",[97,0.971,549,2.427]],["body/injectables/BoardService.html",[3,0.079,4,0.07,5,0.07,7,0.144,8,1.083,11,0.013,12,0.69,14,1.891,16,0.302,17,0.612,20,0.079,21,0.108,23,1.912,24,1.842,31,0.006,32,0.006,84,1.281,86,1.509,97,0.948,98,1.025,120,3.496,122,1.589,127,1.969,128,0.485,129,1.275,134,2.781,138,2.51,140,3.444,148,0.952,156,3.516,164,0.948,165,2.842,175,2.136,176,1.947,190,1.228,217,3.278,218,4.234,219,3.459,227,1.998,229,2.808,233,3.459,251,1.615,253,1.621,255,1.621,272,1.203,310,3.698,311,3.214,317,1.856,318,1.856,321,1.314,322,1.529,323,1.621,325,1.856,357,2.512,360,1.621,381,1.621,409,1.856,410,1.529,464,2.876,465,1.856,468,2.017,523,2.902,527,4.032,531,3.268,538,3.692,545,4.135,549,2.37,551,2.876,552,2.232,553,1.621,554,2.017,600,4.135,621,3.698,624,2.232,630,2.232,678,2.017,682,2.232,765,4.234,766,4.234,775,3.902,781,2.232,783,2.232,810,2.945,839,2.232,840,3.965,841,5.467,842,3.965,843,5.467,844,2.559,845,3.965,846,2.559,847,2.559,848,2.559,849,2.559,850,2.559,851,2.559,852,3.965,853,2.559,854,2.559,855,2.559,856,2.559,857,2.559,858,2.559,859,2.559,860,2.559,861,2.559,862,2.559,863,2.559,864,2.559,865,2.559,866,3.965,867,2.559,868,2.559,869,3.965,870,2.559,871,3.965,872,2.559,873,3.965,874,2.559,875,2.559,876,2.559,877,2.559,878,2.559,879,4.854,880,2.559,881,3.965,882,2.559,883,2.559,884,2.559]],["title/classes/CreateBoardCommentDTO.html",[21,0.171,223,2.3]],["body/classes/CreateBoardCommentDTO.html",[3,0.145,4,0.129,5,0.129,7,0.265,10,1.418,11,0.013,12,0.732,15,1.352,16,0.195,20,0.145,21,0.259,31,0.009,32,0.009,128,0.539,129,1.367,164,1.633,180,1.055,183,1.242,187,3.89,190,0.973,193,3.012,194,3.89,195,3.123,196,1.82,213,2.171,223,3.479,251,2.1,278,2.843,279,2.843,281,3.508,282,3.679,453,4.113,518,4.113,885,6.709,886,3.42,887,4.715,888,4.715,889,5.357,890,4.715,891,4.113,892,4.715,893,4.715,894,4.715,895,4.715,896,4.082,897,4.715,898,4.715,899,4.715,900,4.715]],["title/classes/CreateBoardCommentInput.html",[21,0.171,389,2.187]],["body/classes/CreateBoardCommentInput.html",[3,0.138,4,0.122,5,0.122,7,0.251,10,1.394,11,0.013,12,0.719,15,1.337,16,0.245,20,0.138,21,0.25,31,0.009,32,0.009,71,1.35,84,1.917,128,0.53,129,1.339,164,1.591,180,1.001,183,1.2,190,0.94,193,2.951,194,3.758,195,3.07,196,1.727,199,2.674,200,4.494,205,3.156,206,3.36,207,2.377,213,2.14,251,2.07,278,2.771,279,2.771,281,3.419,282,3.585,305,3.267,352,4.531,389,3.195,421,2.196,431,2.834,896,3.978,901,6.612,902,3.902,903,3.902,904,3.902,905,3.902,906,4.473,907,3.902,908,3.902]],["title/classes/CreateBoardDTO.html",[21,0.171,531,2.427]],["body/classes/CreateBoardDTO.html",[3,0.132,4,0.118,5,0.118,7,0.241,10,1.447,11,0.013,12,0.747,15,1.378,16,0.27,20,0.132,21,0.276,31,0.009,32,0.009,84,1.867,128,0.567,129,1.416,164,1.56,179,4.711,180,0.962,183,1.169,187,4.42,193,3.03,195,3.188,196,1.66,197,3.067,251,1.174,278,2.717,279,2.717,303,2.436,531,3.454,573,3.515,574,3.515,575,3.515,590,3.751,891,3.751,896,4.17,909,6.79,910,3.389,911,4.3,912,4.3,913,4.3,914,4.3,915,4.3,916,4.3,917,4.3,918,4.3,919,4.3,920,4.3,921,4.3,922,4.3,923,4.554,924,5.778,925,4.554,926,4.554,927,4.3]],["title/classes/CreateBoardInput.html",[21,0.171,810,2.187]],["body/classes/CreateBoardInput.html",[3,0.123,4,0.109,5,0.109,7,0.225,10,1.42,11,0.013,12,0.733,15,1.372,16,0.28,20,0.123,21,0.265,31,0.008,32,0.008,71,1.208,84,2.188,128,0.558,129,1.386,164,1.503,180,0.895,183,1.113,184,2.054,193,2.955,195,3.054,196,1.544,197,3.598,199,2.391,200,4.572,205,3.187,206,3.116,251,2.121,278,2.617,279,2.617,303,2.266,305,3.485,410,2.391,421,2.7,431,2.534,573,3.386,574,3.386,575,3.386,810,2.963,896,4.047,923,4.955,925,4.335,926,3.153,928,6.677,929,3.489,930,3.489,931,3.489,932,3.999,933,3.489,934,3.489,935,3.999,936,3.489,937,3.489,938,3.489,939,3.999]],["title/interfaces/DateTimeScalarConfig.html",[940,1.831,941,2.742]],["body/interfaces/DateTimeScalarConfig.html",[3,0.145,4,0.034,5,0.034,7,0.07,11,0.013,15,1.271,16,0.051,20,0.252,31,0.003,32,0.003,86,0.783,94,2.617,128,0.587,148,1.084,164,0.836,165,1.863,183,0.442,184,2.248,185,2.773,186,2.773,190,0.926,197,2.217,207,1.167,210,3.015,211,1.369,222,2.362,227,1.769,229,1.121,234,1.305,238,2.362,248,2.701,277,2.354,278,2.362,279,2.499,280,2.785,281,2.248,282,2.358,283,2.358,291,1.176,358,2.814,365,4.11,384,2.113,385,2.113,389,2.358,401,2.358,403,2.253,404,3.233,405,3.963,417,2.951,420,2.362,477,0.789,490,0.904,500,2.885,522,1.845,523,1.741,524,1.967,525,1.967,527,1.741,573,2.54,574,2.54,575,2.54,634,2.836,637,1.569,638,1.845,639,3.15,670,2.113,687,1.845,699,1.845,745,2.836,762,1.967,775,1.305,810,2.54,817,2.671,940,1.313,941,1.474,942,0.745,943,0.841,944,2.296,945,3.717,946,1.72,947,0.789,948,3.831,949,2.773,950,4.233,951,4.053,952,3.135,953,1.72,954,0.982,955,0.841,956,2.296,957,1.72,958,0.841,959,0.841,960,1.72,961,0.841,962,2.296,963,0.982,964,5.772,965,0.982,966,1.474,967,0.982,968,0.904,969,0.904,970,1.474,971,0.904,972,0.904,973,0.904,974,3.45,975,3.45,976,0.982,977,1.583,978,0.982,979,0.982,980,0.982,981,0.982,982,0.982,983,0.982,984,0.745,985,3.135,986,5.031,987,4.319,988,3.946,989,3.946,990,2.757,991,3.717,992,4.145,993,3.135,994,0.841,995,0.841,996,0.841,997,0.841,998,0.841,999,0.841,1000,0.841,1001,0.841,1002,0.841,1003,0.841,1004,0.841,1005,0.841,1006,0.841,1007,0.841,1008,0.841,1009,0.841,1010,0.841,1011,0.841,1012,0.841,1013,0.841,1014,0.841,1015,0.841,1016,0.841,1017,0.841,1018,0.841,1019,0.841,1020,0.841,1021,0.841,1022,0.841,1023,0.841,1024,0.841,1025,0.841,1026,0.841,1027,0.841,1028,0.841,1029,4.053,1030,1.474,1031,2.296,1032,1.967,1033,3.135,1034,2.757,1035,3.45,1036,2.296,1037,1.967,1038,0.982,1039,1.967,1040,1.383,1041,1.72,1042,1.383,1043,1.967,1044,0.841,1045,0.841,1046,2.956,1047,0.982,1048,1.474,1049,0.841,1050,1.583,1051,1.583,1052,1.583,1053,1.583,1054,1.65,1055,1.845,1056,0.841,1057,0.904,1058,0.841,1059,1.474,1060,3.135,1061,1.474,1062,3.946,1063,3.946,1064,1.474,1065,1.474,1066,1.474,1067,1.474,1068,1.474]],["title/classes/HttpExceptionFilter.html",[21,0.171,1069,3.201]],["body/classes/HttpExceptionFilter.html",[3,0.135,4,0.12,5,0.12,7,0.247,8,1.601,11,0.013,12,0.429,14,1.2,16,0.273,17,1.051,20,0.135,21,0.186,24,1.2,31,0.009,32,0.009,71,1.327,86,0.983,127,1.283,128,0.316,129,0.83,138,2.911,175,2.367,176,3.455,180,0.983,256,2.627,464,4.253,730,5.779,947,2.784,1069,4.621,1070,5.114,1071,3.833,1072,4.621,1073,6.597,1074,5.755,1075,5.862,1076,5.2,1077,7.038,1078,4.394,1079,5.862,1080,4.394,1081,3.833,1082,5.114,1083,4.253,1084,2.967,1085,4.394,1086,5.862,1087,3.833,1088,3.833,1089,4.394,1090,4.394,1091,4.394,1092,6.597,1093,5.862,1094,4.394,1095,3.833,1096,4.394,1097,5.862,1098,5.862,1099,5.779,1100,6.597,1101,6.597,1102,6.597,1103,5.114,1104,4.394,1105,4.394,1106,3.737,1107,4.394,1108,4.394,1109,4.394,1110,4.394]],["title/interfaces/IDeleteResponse.html",[940,1.831,1111,2.946]],["body/interfaces/IDeleteResponse.html",[3,0.178,4,0.158,5,0.158,7,0.324,11,0.013,15,1.275,20,0.215,31,0.011,32,0.011,128,0.501,129,1.471,183,1.411,190,1.187,211,2.715,940,3.145,942,3.452,949,3.659,1099,6.135,1106,4.409,1111,5.436,1112,4.553,1113,4.19,1114,4.553]],["title/interfaces/IResolverClearResponse.html",[940,1.831,1115,3.201]],["body/interfaces/IResolverClearResponse.html",[3,0.19,4,0.169,5,0.169,7,0.346,11,0.012,20,0.19,31,0.011,32,0.011,128,0.443,183,1.467,417,4.151,940,2.78,942,3.686,1115,5.717,1116,5.379,1117,7.953]],["title/interfaces/IResponseInterceptor.html",[940,1.831,1113,2.946]],["body/interfaces/IResponseInterceptor.html",[3,0.182,4,0.162,5,0.162,7,0.333,11,0.013,15,1.009,20,0.218,31,0.011,32,0.011,128,0.426,183,1.433,190,0.939,211,3.331,940,3.195,942,3.544,949,4.801,1099,4.674,1106,3.359,1111,5.498,1112,4.674,1113,5.14,1114,6.189]],["title/injectables/LoggingInterceptor.html",[97,0.971,1118,3.201]],["body/injectables/LoggingInterceptor.html",[3,0.177,4,0.116,5,0.116,7,0.239,8,1.566,11,0.013,12,0.415,14,1.162,16,0.3,17,1.017,20,0.131,21,0.18,24,1.162,31,0.009,32,0.009,71,1.284,86,0.952,94,2.543,97,1.372,98,1.705,127,1.242,128,0.306,129,0.804,138,2.89,417,3.09,477,4.112,947,3.634,1072,3.353,1081,3.711,1082,6.059,1083,3.086,1084,2.873,1087,3.711,1088,3.711,1103,3.711,1118,4.522,1119,3.711,1120,5.004,1121,5.004,1122,6.059,1123,6.059,1124,4.254,1125,6.059,1126,5.004,1127,4.254,1128,3.353,1129,5.736,1130,3.711,1131,5.736,1132,5.736,1133,5.736,1134,7.471,1135,7.471,1136,4.254,1137,4.254,1138,5.736,1139,4.254,1140,4.254,1141,5.736,1142,4.254,1143,5.736,1144,4.254,1145,4.254,1146,4.254,1147,5.736,1148,4.254,1149,3.711,1150,4.254,1151,4.254,1152,4.254]],["title/classes/PaginationDTO.html",[21,0.171,538,2.742]],["body/classes/PaginationDTO.html",[3,0.163,4,0.145,5,0.145,7,0.298,10,1.25,11,0.013,12,0.646,16,0.274,20,0.163,21,0.305,31,0.01,32,0.01,128,0.559,180,1.186,183,1.339,190,1.256,196,2.046,229,3.706,303,3.003,397,4.192,398,4.469,399,4.192,538,4.469,775,4.313,816,5.216,896,4.313,1153,4.625,1154,6.618,1155,5.302,1156,5.302,1157,7.215,1158,7.215]],["title/classes/PaginationResponseDTO.html",[21,0.171,553,2.573]],["body/classes/PaginationResponseDTO.html",[3,0.18,4,0.16,5,0.16,7,0.329,11,0.013,12,0.686,16,0.242,20,0.18,21,0.247,31,0.011,32,0.011,128,0.506,180,1.311,183,1.423,190,1.115,321,3.873,322,3.503,419,4.619,553,4.458,637,4.062,638,4.777,1159,6.578,1160,5.86,1161,5.86]],["title/interfaces/SubscriptionResolverObject.html",[940,1.831,1042,2.573]],["body/interfaces/SubscriptionResolverObject.html",[3,0.145,4,0.034,5,0.034,7,0.07,11,0.013,15,1.27,16,0.051,20,0.252,31,0.003,32,0.003,86,0.277,94,2.608,128,0.588,148,1.079,164,0.833,165,1.858,183,0.439,184,2.241,185,2.764,186,2.764,190,0.924,197,2.21,207,1.162,210,3.009,211,1.021,222,2.353,227,1.766,229,1.116,234,1.298,238,2.353,248,2.694,277,2.347,278,2.357,279,2.494,280,2.779,281,2.241,282,2.35,283,2.35,291,1.17,358,2.808,365,4.103,384,2.104,385,2.104,389,2.35,401,2.35,403,2.245,404,3.227,405,3.96,417,2.944,420,2.353,477,0.785,490,0.899,500,2.875,522,1.837,523,1.734,524,1.958,525,1.958,527,1.734,573,2.533,574,2.533,575,2.533,634,2.828,637,1.562,638,1.837,639,3.143,670,2.104,687,1.837,699,1.837,745,2.828,762,1.958,775,1.298,810,2.533,817,2.663,940,1.308,941,0.837,942,0.741,943,0.837,944,1.712,945,3.706,946,1.712,947,0.785,948,3.823,949,2.764,950,4.225,951,4.045,952,3.124,953,1.712,954,0.976,955,0.837,956,2.286,957,1.712,958,0.837,959,0.837,960,1.712,961,0.837,962,2.286,963,0.976,964,5.765,965,0.976,966,1.467,967,0.976,968,0.899,969,0.899,970,1.467,971,0.899,972,0.899,973,0.899,974,3.439,975,3.439,976,0.976,977,1.576,978,0.976,979,0.976,980,0.976,981,0.976,982,0.976,983,0.976,984,0.741,985,3.124,986,5.022,987,4.308,988,3.935,989,3.935,990,2.746,991,3.706,992,4.134,993,3.124,994,0.837,995,0.837,996,0.837,997,0.837,998,0.837,999,0.837,1000,0.837,1001,0.837,1002,0.837,1003,0.837,1004,0.837,1005,0.837,1006,0.837,1007,0.837,1008,0.837,1009,0.837,1010,0.837,1011,0.837,1012,0.837,1013,0.837,1014,0.837,1015,0.837,1016,0.837,1017,0.837,1018,0.837,1019,0.837,1020,0.837,1021,0.837,1022,0.837,1023,0.837,1024,0.837,1025,0.837,1026,0.837,1027,0.837,1028,0.837,1029,4.045,1030,1.467,1031,3.439,1032,1.958,1033,3.124,1034,2.746,1035,3.439,1036,2.286,1037,2.676,1038,0.976,1039,2.676,1040,1.376,1041,3.124,1042,1.837,1043,1.958,1044,0.837,1045,0.837,1046,2.946,1047,0.976,1048,1.467,1049,0.837,1050,1.576,1051,1.576,1052,1.576,1053,1.576,1054,1.643,1055,1.837,1056,0.837,1057,0.899,1058,0.837,1059,1.467,1060,3.124,1061,1.467,1062,3.935,1063,3.935,1064,1.467,1065,1.467,1066,1.467,1067,1.467,1068,1.467]],["title/interfaces/SubscriptionSubscriberObject.html",[940,1.831,1040,2.573]],["body/interfaces/SubscriptionSubscriberObject.html",[3,0.145,4,0.034,5,0.034,7,0.069,11,0.013,15,1.27,16,0.051,20,0.252,31,0.003,32,0.003,86,0.277,94,2.606,128,0.588,129,0.41,148,1.078,164,0.832,165,1.857,183,0.439,184,2.239,185,2.762,186,2.762,190,0.924,197,2.209,207,1.161,210,3.008,211,1.02,222,2.351,227,1.765,229,1.114,234,1.297,238,2.351,248,2.692,277,2.345,278,2.356,279,2.493,280,2.778,281,2.239,282,2.349,283,2.349,291,1.169,358,2.806,365,4.102,384,2.102,385,2.102,389,2.349,401,2.349,403,2.243,404,3.225,405,3.959,417,2.943,420,2.351,477,0.784,490,0.898,500,2.873,522,1.836,523,1.732,524,1.957,525,1.957,527,1.732,573,2.531,574,2.531,575,2.531,634,2.826,637,1.561,638,1.836,639,3.141,670,2.102,687,1.836,699,1.836,745,2.826,762,1.957,775,1.297,810,2.531,817,2.662,940,1.306,941,0.836,942,0.74,943,0.836,944,1.71,945,3.704,946,1.71,947,0.784,948,3.821,949,2.762,950,4.223,951,4.043,952,3.121,953,1.71,954,0.975,955,0.836,956,2.284,957,1.71,958,0.836,959,0.836,960,1.71,961,0.836,962,2.284,963,0.975,964,5.764,965,0.975,966,1.465,967,0.975,968,0.898,969,0.898,970,1.465,971,0.898,972,0.898,973,0.898,974,3.437,975,3.437,976,0.975,977,1.574,978,0.975,979,0.975,980,0.975,981,0.975,982,0.975,983,0.975,984,0.74,985,3.121,986,5.02,987,4.306,988,3.933,989,3.933,990,2.744,991,3.704,992,4.132,993,3.121,994,0.836,995,0.836,996,0.836,997,0.836,998,0.836,999,0.836,1000,0.836,1001,0.836,1002,0.836,1003,0.836,1004,0.836,1005,0.836,1006,0.836,1007,0.836,1008,0.836,1009,0.836,1010,0.836,1011,0.836,1012,0.836,1013,0.836,1014,0.836,1015,0.836,1016,0.836,1017,0.836,1018,0.836,1019,0.836,1020,0.836,1021,0.836,1022,0.836,1023,0.836,1024,0.836,1025,0.836,1026,0.836,1027,0.836,1028,0.836,1029,4.043,1030,1.465,1031,3.437,1032,1.957,1033,3.121,1034,2.744,1035,3.437,1036,2.284,1037,2.674,1038,0.975,1039,2.674,1040,1.836,1041,3.121,1042,1.375,1043,1.957,1044,0.836,1045,0.836,1046,2.944,1047,0.975,1048,1.465,1049,0.836,1050,1.574,1051,1.574,1052,1.574,1053,1.574,1054,1.641,1055,1.836,1056,0.836,1057,0.898,1058,0.836,1059,1.465,1060,3.121,1061,1.465,1062,3.933,1063,3.933,1064,1.465,1065,1.465,1066,1.465,1067,1.465,1068,1.465]],["title/injectables/TransformBoardInterceptor.html",[97,0.971,555,2.946]],["body/injectables/TransformBoardInterceptor.html",[3,0.136,4,0.121,5,0.121,7,0.248,8,1.608,11,0.013,12,0.574,14,1.608,16,0.274,17,1.058,20,0.136,21,0.187,24,2.063,31,0.009,32,0.009,86,1.317,94,3.52,97,1.408,98,1.773,127,1.719,128,0.423,129,1.113,134,3.111,138,2.191,277,2.079,365,2.802,475,3.859,476,3.859,477,4.47,478,3.859,479,3.487,480,3.859,481,3.859,482,3.859,483,5.136,484,6.41,508,3.859,555,4.271,556,5.217,637,2.383,1072,3.487,1114,5.562,1120,5.774,1121,3.859,1122,6.155,1123,6.155,1125,5.774,1126,5.136,1128,3.487,1130,3.859,1149,3.859,1162,3.859,1163,5.888,1164,4.423,1165,5.888,1166,4.423,1167,4.423,1168,4.423,1169,5.888,1170,4.423,1171,4.423,1172,5.888,1173,5.888,1174,4.423]],["title/classes/UpdateBoardCommentDTO.html",[21,0.171,239,2.573]],["body/classes/UpdateBoardCommentDTO.html",[3,0.171,4,0.152,5,0.152,7,0.313,10,1.052,11,0.013,12,0.543,15,1.161,16,0.305,20,0.171,21,0.288,31,0.01,32,0.01,128,0.4,164,1.763,180,1.245,183,1.38,187,3.527,193,2.84,195,2.84,196,2.149,211,3.206,213,1.925,217,3.759,223,3.154,239,4.321,251,2.013,254,3.759,886,4.038,1054,3.154,1175,5.376,1176,6.82,1177,5.567,1178,4.388,1179,4.038]],["title/classes/UpdateBoardCommentExceptPasswordDTO.html",[21,0.171,354,2.742]],["body/classes/UpdateBoardCommentExceptPasswordDTO.html",[3,0.182,4,0.162,5,0.162,11,0.013,16,0.293,20,0.182,21,0.25,31,0.011,32,0.011,164,1.418,180,1.327,211,3.331,213,1.674,217,4.004,223,4.293,251,1.935,254,4.004,354,4.785,361,4.301,886,4.301,1054,3.359,1175,4.674,1178,5.974,1179,4.301]],["title/classes/UpdateBoardCommentInput.html",[21,0.171,401,2.187]],["body/classes/UpdateBoardCommentInput.html",[3,0.144,4,0.128,5,0.128,7,0.262,10,1.362,11,0.013,12,0.703,15,1.306,16,0.252,20,0.144,21,0.258,31,0.009,32,0.009,71,1.41,84,1.973,128,0.518,129,1.362,164,1.626,180,1.045,183,1.235,190,0.967,193,2.541,194,3.867,195,3.001,196,1.803,199,2.792,200,3.154,205,3.114,206,3.457,207,2.446,213,2.112,251,2.042,279,2.83,281,3.492,282,3.662,305,3.338,352,4.471,401,3.288,421,2.293,431,2.959,896,4.309,902,4.075,903,4.075,904,4.075,905,4.075,907,4.075,908,4.075,1180,6.525,1181,4.671]],["title/classes/UpdateBoardDTO.html",[21,0.171,545,2.573]],["body/classes/UpdateBoardDTO.html",[3,0.187,4,0.167,5,0.167,11,0.013,16,0.298,20,0.187,21,0.257,31,0.011,32,0.011,180,1.363,211,3.385,217,4.114,531,3.641,545,4.562,551,4.419,910,4.802,1054,3.451,1178,4.802,1179,4.419,1182,5.314,1183,7.201]],["title/classes/UpdateBoardInput.html",[21,0.171,817,2.3]],["body/classes/UpdateBoardInput.html",[3,0.132,4,0.117,5,0.117,7,0.241,10,1.374,11,0.013,12,0.71,15,1.342,16,0.288,20,0.132,21,0.275,31,0.009,32,0.009,71,1.295,84,2.253,128,0.55,129,1.415,180,0.96,183,1.167,184,2.204,193,2.714,195,2.902,196,1.656,197,3.657,199,2.565,200,3.896,205,3.118,206,3.268,251,2.09,279,2.714,303,2.431,305,3.571,410,2.565,421,2.832,431,2.718,573,3.511,574,3.511,575,3.511,817,3.268,896,4.167,923,5.138,925,4.548,926,3.382,929,3.743,930,3.743,931,3.743,933,3.743,934,3.743,936,3.743,937,3.743,938,3.743,1184,6.534,1185,4.291]],["title/entities/User.html",[136,2.3,272,1.909]],["body/entities/User.html",[3,0.159,4,0.141,5,0.141,7,0.29,10,1.414,11,0.013,12,0.73,15,1.341,16,0.269,20,0.159,21,0.275,31,0.01,32,0.01,86,1.595,128,0.538,132,4.038,136,3.688,148,2.653,164,1.705,183,1.317,190,1.031,211,2.428,272,3.06,274,3.272,287,5.32,296,4.071,301,2.236,302,5.132,303,2.926,1186,4.506,1187,5.165,1188,7.129,1189,5.165,1190,5.165,1191,5.165,1192,6.51,1193,5.165,1194,5.165]],["title/controllers/UserController.html",[0,1.831,1195,2.946]],["body/controllers/UserController.html",[0,1.851,2,1.851,3,0.126,4,0.112,5,0.112,7,0.231,8,1.529,10,1.204,11,0.013,12,0.622,14,1.74,16,0.306,17,0.982,20,0.126,21,0.173,22,2.016,23,1.327,24,1.121,26,2.773,30,3.782,31,0.009,32,0.009,84,1.81,86,1.426,96,5.964,120,2.76,127,1.86,128,0.458,129,1.204,136,2.326,138,1.528,140,1.851,148,1.528,165,2.547,215,2.773,225,3.237,231,3.782,244,2.773,245,2.454,454,4.414,637,2.212,1083,5.489,1084,2.773,1195,4.062,1196,3.582,1197,4.106,1198,5.023,1199,4.885,1200,4.885,1201,3.582,1202,4.993,1203,4.106,1204,4.106,1205,3.582,1206,4.106,1207,4.106,1208,4.106,1209,4.684,1210,4.106,1211,4.106,1212,3.81,1213,3.237,1214,3.237,1215,2.979,1216,3.582,1217,4.106,1218,4.106,1219,4.106,1220,4.106,1221,4.106,1222,4.106,1223,3.582,1224,3.582,1225,3.582,1226,3.582,1227,3.582,1228,3.582,1229,3.582,1230,3.582,1231,3.582,1232,3.582,1233,3.582,1234,3.582,1235,4.885,1236,3.582,1237,4.106,1238,3.582,1239,4.106,1240,4.106,1241,3.582,1242,3.582]],["title/classes/UserIdSchema.html",[21,0.171,1243,2.946]],["body/classes/UserIdSchema.html",[3,0.181,4,0.161,5,0.161,7,0.33,10,1.111,11,0.013,12,0.573,16,0.243,20,0.181,21,0.248,31,0.011,32,0.011,71,1.774,128,0.423,148,2.979,180,1.315,183,1.426,190,1.117,205,2.935,208,3.797,421,2.885,1243,5.113,1244,6.149,1245,5.127,1246,5.877]],["title/modules/UserModule.html",[33,1.567,50,2.742]],["body/modules/UserModule.html",[2,2.79,3,0.147,4,0.13,5,0.13,11,0.013,16,0.333,17,1.141,20,0.147,21,0.201,31,0.009,32,0.009,33,2.651,35,2.342,36,2.342,37,2.57,38,2.57,39,2.342,40,3.7,41,2.57,45,4.888,46,4.157,50,5.553,51,3.334,52,2.57,53,2.451,55,3.699,72,3.023,73,2.243,89,3.761,136,2.703,313,3.461,1195,4.982,1212,4.612,1213,3.761,1215,3.461,1247,4.162,1248,4.771,1249,4.162,1250,4.888,1251,4.771,1252,4.771,1253,4.771,1254,4.162,1255,4.489,1256,4.771,1257,4.771]],["title/injectables/UserRepository.html",[97,0.971,1250,2.573]],["body/injectables/UserRepository.html",[3,0.134,4,0.119,5,0.119,7,0.245,8,1.594,11,0.013,12,0.641,14,1.594,15,1.119,16,0.302,17,1.044,20,0.134,21,0.184,23,1.411,24,1.594,31,0.009,32,0.009,73,2.052,86,1.471,89,3.441,97,1.396,98,1.749,120,3.26,122,2.339,127,1.919,128,0.473,129,1.242,132,3.976,134,2.052,136,4.144,138,2.172,140,2.632,165,2.612,175,3.542,176,3.228,301,1.89,356,2.948,357,2.766,1074,3.808,1095,3.808,1209,4.635,1214,3.441,1215,3.167,1250,4.447,1258,3.808,1259,5.091,1260,5.837,1261,3.808,1262,6.123,1263,4.366,1264,5.091,1265,4.366,1266,5.837,1267,4.366,1268,4.366,1269,5.837,1270,4.366,1271,4.366,1272,4.366,1273,4.366,1274,4.366,1275,4.366,1276,4.366,1277,4.366,1278,4.366,1279,4.366]],["title/classes/UserResolver.html",[21,0.171,1255,2.946]],["body/classes/UserResolver.html",[3,0.122,4,0.109,5,0.109,7,0.223,8,1.496,10,1.184,11,0.013,12,0.659,14,1.711,16,0.31,20,0.122,21,0.168,22,1.952,23,1.285,24,1.496,31,0.008,32,0.008,71,1.2,84,1.77,86,1.511,94,2.377,96,5.583,120,2.713,122,1.593,127,1.971,128,0.486,129,1.276,133,2.884,138,1.479,140,1.792,148,1.479,180,0.889,390,4.546,403,2.252,404,3.638,405,2.814,417,2.142,454,3.134,637,2.142,1083,5.442,1084,2.685,1198,4.94,1199,4.778,1200,4.778,1205,3.468,1212,4.376,1213,3.134,1223,3.468,1224,3.468,1225,3.468,1226,3.468,1227,3.468,1228,3.468,1229,3.468,1230,3.468,1231,3.468,1232,3.468,1233,3.468,1234,3.468,1235,4.778,1236,3.468,1238,3.468,1241,3.468,1242,3.468,1243,3.974,1255,3.974,1280,3.468,1281,3.976,1282,3.976,1283,3.976,1284,5.311,1285,3.976,1286,3.976,1287,3.976,1288,5.311,1289,3.976,1290,4.546,1291,3.976,1292,3.976,1293,3.976,1294,3.976,1295,3.976,1296,3.976,1297,3.976,1298,3.976,1299,3.976,1300,3.976,1301,3.976]],["title/classes/UserSchema.html",[21,0.171,1290,2.946]],["body/classes/UserSchema.html",[3,0.169,4,0.15,5,0.15,7,0.308,10,1.385,11,0.013,12,0.715,15,1.302,16,0.227,20,0.169,21,0.232,31,0.01,32,0.01,71,1.658,86,1.64,128,0.527,132,4.152,148,2.727,180,1.228,183,1.368,190,1.072,205,3.33,207,2.71,208,3.643,421,2.696,1290,4.906,1302,4.79,1303,5.491,1304,5.491,1305,5.491]],["title/injectables/UserService.html",[97,0.971,1212,2.427]],["body/injectables/UserService.html",[3,0.132,4,0.117,5,0.117,7,0.24,8,1.573,11,0.013,12,0.635,14,1.573,15,0.729,16,0.316,17,1.024,20,0.132,21,0.181,23,2.104,24,1.573,31,0.009,32,0.009,86,1.457,97,1.378,98,1.716,106,4.846,120,3.241,122,2.309,127,1.901,128,0.468,129,1.23,133,3.106,134,3.061,136,3.688,138,2.423,140,3.277,156,4.12,164,1.378,165,2.144,465,3.106,468,3.375,1198,4.541,1201,5.026,1202,4.908,1209,4.742,1212,3.444,1214,3.375,1215,3.106,1216,3.735,1250,4.742,1254,3.735,1259,5.026,1261,3.735,1264,5.026,1306,3.735,1307,4.282,1308,4.282,1309,4.282,1310,4.282,1311,4.282,1312,4.282,1313,4.282,1314,4.282,1315,4.282,1316,4.282,1317,5.761,1318,4.282]],["title/coverage.html",[1319,4.381]],["body/coverage.html",[0,2.183,1,1.08,5,0.041,6,1.299,11,0.013,18,0.944,21,0.324,31,0.004,32,0.004,39,0.731,63,2.115,66,2.115,97,1.586,99,1.299,106,0.944,119,1.299,128,0.596,136,1.443,148,0.554,156,0.802,159,1.299,164,0.356,176,0.731,179,1.006,181,1.299,182,1.299,184,1.309,197,1.198,198,2.422,199,2.894,210,1.251,212,1.08,213,2.032,214,1.299,223,0.844,239,0.944,248,0.765,250,0.89,251,1.413,256,0.89,272,2.088,273,0.89,275,1.174,276,1.299,310,0.844,311,0.765,319,1.08,321,0.765,325,1.08,326,1.299,352,1.996,354,1.006,358,1.309,361,1.08,375,5.088,383,1.299,389,1.372,401,1.372,404,0.802,405,0.765,406,1.006,418,1.299,419,2.008,424,1.299,425,1.299,436,1.299,519,1.08,520,1.299,531,0.89,538,1.006,545,0.944,549,0.89,553,0.944,555,1.08,556,1.174,572,1.299,592,1.006,593,1.299,594,1.299,600,0.944,601,1.299,602,1.299,621,0.844,625,0.89,626,1.174,628,2.115,631,1.08,634,1.443,635,1.174,636,1.299,639,1.372,643,1.08,644,1.299,648,1.08,651,0.89,658,1.299,659,1.299,666,1.08,669,1.299,677,1.299,684,1.08,685,1.299,692,0.89,698,1.299,713,1.08,716,1.299,741,1.299,745,1.443,748,1.299,749,1.299,756,1.299,760,1.299,806,1.299,810,1.372,817,1.443,828,1.299,839,1.299,885,1.299,886,2.422,889,2.912,901,1.299,909,1.299,910,2.008,928,1.299,940,2.183,941,1.006,943,5.605,948,1.006,950,1.006,951,1.006,955,1.006,958,1.006,959,1.006,961,1.006,966,1.006,970,1.006,994,1.006,995,1.006,996,1.006,997,1.006,998,1.006,999,1.006,1000,1.006,1001,1.006,1002,1.006,1003,1.006,1004,1.006,1005,1.006,1006,1.006,1007,1.006,1008,1.006,1009,1.006,1010,1.006,1011,1.006,1012,1.006,1013,1.006,1014,1.006,1015,1.006,1016,1.006,1017,1.006,1018,1.006,1019,1.006,1020,1.006,1021,1.006,1022,1.006,1023,1.006,1024,1.006,1025,1.006,1026,1.006,1027,1.006,1028,1.006,1029,1.006,1030,1.006,1032,1.006,1037,1.006,1039,1.006,1040,0.944,1042,0.944,1043,1.006,1044,1.006,1045,1.006,1046,1.006,1048,1.006,1049,1.006,1055,0.944,1056,1.006,1058,1.006,1059,1.006,1061,1.006,1064,1.006,1065,1.006,1066,1.006,1067,1.006,1068,1.006,1069,1.174,1070,1.299,1071,1.299,1076,1.174,1111,1.08,1112,2.008,1113,1.08,1115,1.174,1116,1.299,1118,1.174,1119,1.299,1153,1.299,1159,1.299,1162,1.299,1175,2.008,1180,1.299,1182,1.299,1184,1.299,1186,2.222,1195,1.08,1196,1.299,1202,1.006,1209,0.944,1212,0.89,1243,1.08,1244,1.299,1245,1.299,1250,0.944,1255,1.08,1258,1.299,1280,1.299,1284,1.08,1288,1.08,1290,1.08,1302,1.299,1306,1.299,1319,1.174,1320,1.299,1321,1.489,1322,1.489,1323,6.389,1324,6.736,1325,3.952,1326,4.441,1327,3.952,1328,8.332,1329,2.548,1330,2.548,1331,3.338,1332,5.455,1333,1.299,1334,1.299,1335,3.338,1336,8.281,1337,3.338,1338,2.631,1339,1.299,1340,1.299,1341,1.299,1342,1.299,1343,1.299,1344,1.299,1345,1.489,1346,1.489]],["title/dependencies.html",[36,2.4,1347,2.951]],["body/dependencies.html",[11,0.013,17,1.104,21,0.256,31,0.009,32,0.009,36,2.267,58,4.028,69,3.349,71,1.394,73,2.171,82,4.028,87,2.082,112,3.639,114,4.028,117,5.284,149,5.284,169,4.028,196,1.782,301,1.999,303,2.616,947,4.546,1054,2.616,1055,2.925,1084,4.565,1128,3.639,1179,3.349,1348,4.617,1349,4.617,1350,6.057,1351,4.617,1352,4.617,1353,4.617,1354,4.617,1355,4.617,1356,6.057,1357,4.617,1358,4.617,1359,6.057,1360,6.76,1361,4.617,1362,4.617,1363,4.617,1364,4.617,1365,4.617,1366,4.617,1367,4.617,1368,4.617,1369,4.617,1370,6.057,1371,4.617,1372,4.617,1373,4.617,1374,4.617,1375,6.057,1376,4.617,1377,4.028,1378,4.617,1379,4.617,1380,4.617,1381,4.617,1382,4.617,1383,4.617,1384,4.617,1385,4.617,1386,4.617,1387,4.617,1388,4.617,1389,4.617,1390,4.617,1391,6.76,1392,4.617,1393,4.617,1394,4.617,1395,4.617,1396,4.617,1397,4.617,1398,4.617,1399,4.617,1400,4.617,1401,4.617]],["title/miscellaneous/functions.html",[1402,2.143,1403,4.264]],["body/miscellaneous/functions.html",[7,0.363,11,0.011,31,0.011,32,0.011,39,3.857,1338,5.096,1402,4.096,1403,5.64,1404,5.64]],["title/index.html",[7,0.19,1405,3.383,1406,3.383]],["body/index.html",[4,0.117,11,0.013,31,0.009,32,0.009,53,3.574,251,1.167,278,1.779,479,3.368,977,4.718,1262,3.727,1319,3.368,1320,3.727,1377,3.727,1407,4.272,1408,4.272,1409,6.504,1410,4.272,1411,4.272,1412,4.272,1413,4.272,1414,4.272,1415,3.727,1416,6.504,1417,4.272,1418,6.958,1419,4.272,1420,6.504,1421,7.645,1422,4.272,1423,7.645,1424,4.272,1425,4.272,1426,4.272,1427,5.753,1428,4.272,1429,4.272,1430,4.272,1431,6.504,1432,4.272,1433,5.753,1434,4.272,1435,4.272,1436,4.272,1437,6.958,1438,4.272,1439,4.272,1440,4.272,1441,4.272,1442,4.272,1443,6.958,1444,5.753,1445,4.272,1446,6.504,1447,4.272,1448,6.07,1449,5.753,1450,4.272,1451,4.272,1452,4.272,1453,4.272,1454,4.272,1455,4.272,1456,6.504,1457,4.272,1458,4.272,1459,4.272,1460,5.753,1461,4.272,1462,4.272,1463,4.272,1464,4.272,1465,4.272,1466,4.272,1467,4.272,1468,4.272,1469,4.272,1470,4.272,1471,5.753,1472,4.272,1473,4.272,1474,4.272,1475,4.272,1476,4.272,1477,4.272,1478,5.753,1479,4.272,1480,4.272,1481,5.753,1482,5.753,1483,4.272,1484,4.272,1485,4.272,1486,4.272,1487,4.272,1488,4.272,1489,4.272,1490,4.272,1491,4.272,1492,4.272,1493,4.272,1494,4.272,1495,4.272,1496,4.272,1497,4.272,1498,4.272,1499,4.272,1500,3.727]],["title/classes/loginDTO.html",[21,0.171,1202,2.742]],["body/classes/loginDTO.html",[3,0.142,4,0.126,5,0.126,7,0.259,10,1.145,11,0.013,12,0.591,15,1.221,16,0.191,20,0.142,21,0.256,31,0.009,32,0.009,128,0.436,132,4.221,164,1.912,178,4.09,180,1.033,183,1.225,190,0.96,193,2.814,195,2.814,196,1.782,984,3.621,1106,4.479,1202,4.09,1341,4.028,1501,3.349,1502,4.617,1503,3.349,1504,4.09,1505,4.904,1506,3.349,1507,4.394,1508,4.394,1509,3.349,1510,4.394,1511,4.394,1512,4.394,1513,4.394,1514,4.394,1515,5.736,1516,4.394,1517,5.206,1518,4.394,1519,4.394,1520,4.394,1521,4.617,1522,4.394,1523,4.394,1524,3.349,1525,3.349,1526,3.349,1527,3.349,1528,3.349]],["title/classes/loginUser.html",[21,0.171,1284,2.946]],["body/classes/loginUser.html",[3,0.139,4,0.124,5,0.124,7,0.254,10,1.129,11,0.013,12,0.583,15,1.212,16,0.247,20,0.139,21,0.252,31,0.009,32,0.009,71,1.366,128,0.43,132,4.193,164,1.905,178,4.035,180,1.012,183,1.209,190,0.947,193,2.786,195,2.786,196,1.746,205,2.964,206,3.385,984,2.704,1106,4.459,1284,4.335,1343,3.946,1501,3.281,1503,3.281,1504,4.035,1505,4.855,1506,3.281,1507,4.335,1508,4.335,1509,3.281,1510,4.335,1511,4.335,1512,4.335,1513,4.335,1514,4.335,1515,5.71,1516,4.335,1517,5.164,1518,4.335,1519,4.335,1520,4.335,1522,4.335,1523,4.335,1524,3.281,1525,3.281,1526,3.281,1527,3.281,1528,3.281,1529,3.946,1530,4.523,1531,4.523]],["title/modules.html",[35,2.728]],["body/modules.html",[11,0.011,31,0.011,32,0.011,34,4.239,35,2.869,45,3.702,46,3.148,47,3.946,48,3.946,49,3.946,50,3.946,620,3.946,1448,7.222,1532,8.279,1533,8.279,1534,8.279]],["title/overview.html",[1535,4.848]],["body/overview.html",[2,1.685,11,0.013,18,3.842,31,0.008,32,0.008,33,1.443,34,5.887,35,1.835,36,1.835,37,2.014,38,2.014,39,1.835,40,2.014,41,2.014,42,3.261,43,3.261,44,3.261,45,4.672,46,4.176,47,5.341,48,5.549,49,5.167,50,5.292,51,2.827,52,2.014,53,1.92,98,1.498,103,3.261,104,3.261,105,3.261,106,4.672,153,3.261,154,3.261,155,3.261,156,3.973,180,0.836,250,3.625,274,2.368,306,3.261,308,3.261,309,3.261,310,4.264,311,3.93,549,4.409,600,3.842,616,3.261,617,3.261,618,3.261,619,3.261,620,4.98,621,3.725,651,3.625,661,3.261,662,3.261,692,3.625,708,3.261,709,3.261,816,2.947,942,2.235,1212,3.625,1247,3.261,1249,3.261,1250,3.842,1504,2.524,1535,3.261,1536,5.248,1537,3.738,1538,3.738]],["title/properties.html",[183,0.989,1347,2.951]],["body/properties.html",[11,0.013,31,0.011,32,0.011,183,1.295,278,2.666,1415,5.586,1500,5.586,1539,6.403,1540,6.403,1541,6.403]],["title/classes/signUpDTO.html",[21,0.171,1209,2.573]],["body/classes/signUpDTO.html",[3,0.138,4,0.122,5,0.122,7,0.251,10,1.258,11,0.013,12,0.649,15,1.29,16,0.185,20,0.138,21,0.25,31,0.009,32,0.009,86,1.489,128,0.478,132,4.178,164,1.9,178,4.006,180,1.001,183,1.2,187,2.834,190,0.94,193,2.951,195,2.951,196,1.727,984,3.546,1106,4.448,1209,3.758,1342,3.902,1501,3.245,1503,3.245,1504,4.006,1505,4.828,1506,3.245,1507,4.303,1508,4.303,1509,3.245,1510,4.303,1511,4.303,1512,4.303,1513,4.303,1514,4.303,1515,5.697,1516,4.303,1517,5.142,1518,4.303,1519,4.303,1520,4.303,1522,4.303,1523,4.303,1524,3.245,1525,3.245,1526,3.245,1527,3.245,1528,3.245,1542,4.473,1543,4.473,1544,4.473]],["title/classes/signUpUser.html",[21,0.171,1288,2.946]],["body/classes/signUpUser.html",[3,0.135,4,0.12,5,0.12,7,0.246,10,1.244,11,0.013,12,0.642,15,1.282,16,0.242,20,0.135,21,0.247,31,0.009,32,0.009,71,1.321,86,1.473,128,0.473,132,4.147,164,1.892,178,3.947,180,0.979,183,1.182,190,0.926,193,2.925,195,2.925,196,1.689,205,3.048,206,3.311,984,2.615,1106,4.427,1288,4.24,1344,3.817,1501,3.174,1503,3.174,1504,3.947,1505,4.775,1506,3.174,1507,4.24,1508,4.24,1509,3.174,1510,4.24,1511,4.24,1512,4.24,1513,4.24,1514,4.24,1515,5.669,1516,4.24,1517,5.096,1518,4.24,1519,4.24,1520,4.24,1522,4.24,1523,4.24,1524,3.174,1525,3.174,1526,3.174,1527,3.174,1528,3.174,1529,3.817,1545,4.375,1546,4.375,1547,4.375,1548,4.375]],["title/miscellaneous/typealiases.html",[1402,2.143,1549,4.888]],["body/miscellaneous/typealiases.html",[7,0.163,11,0.011,31,0.007,32,0.007,128,0.607,165,1.079,197,2.051,210,2.142,248,2.241,358,2.241,365,1.837,389,2.35,401,2.35,404,2.35,405,2.241,634,2.471,639,2.35,745,2.471,810,2.35,817,2.471,943,1.958,948,3.541,949,3.322,950,2.946,951,5.19,955,2.946,958,2.946,959,2.946,961,2.946,966,2.946,968,2.103,969,2.103,970,3.541,971,2.103,972,2.103,973,2.103,994,2.946,995,2.946,996,2.946,997,2.946,998,2.946,999,2.946,1000,2.946,1001,2.946,1002,2.946,1003,2.946,1004,2.946,1005,2.946,1006,2.946,1007,2.946,1008,2.946,1009,2.946,1010,2.946,1011,2.946,1012,2.946,1013,2.946,1014,2.946,1015,2.946,1016,2.946,1017,2.946,1018,2.946,1019,2.946,1020,2.946,1021,2.946,1022,2.946,1023,2.946,1024,2.946,1025,2.946,1026,2.946,1027,2.946,1028,2.946,1029,2.946,1030,3.541,1032,3.541,1037,2.946,1039,2.946,1040,1.837,1042,1.837,1043,3.541,1044,2.946,1045,2.946,1046,2.946,1048,2.946,1049,2.946,1050,3.164,1051,3.164,1052,3.164,1053,3.164,1054,2.971,1055,3.696,1056,2.946,1057,2.103,1058,2.946,1059,2.946,1061,2.946,1064,2.946,1065,2.946,1066,2.946,1067,2.946,1068,2.946,1339,5.949,1402,1.837,1550,2.899,1551,8.579,1552,8.437]],["title/miscellaneous/variables.html",[1402,2.143,1553,4.264]],["body/miscellaneous/variables.html",[7,0.336,11,0.012,15,1.018,31,0.011,32,0.011,256,4.258,397,4.82,398,5.137,1076,5.615,1106,4.309,1333,5.219,1334,6.214,1338,4.716,1340,6.214,1402,3.79,1404,6.214,1553,5.219,1554,5.983,1555,5.983,1556,5.983,1557,5.983]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BcryptModule.html":{},"injectables/BcryptService.html":{},"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"controllers/BoardCommentController.html":{},"entities/BoardCommentEntity.html":{},"modules/BoardCommentModule.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"injectables/BoardIdCounterRepository.html":{},"modules/BoardModule.html":{},"classes/BoardPaginationResponse.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordDTO.html":{},"modules/BoardPasswordModule.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"entities/BoardReactionEntity.html":{},"modules/BoardReactionModule.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"injectables/BoardService.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IDeleteResponse.html":{},"interfaces/IResolverClearResponse.html":{},"interfaces/IResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"classes/PaginationDTO.html":{},"classes/PaginationResponseDTO.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"injectables/TransformBoardInterceptor.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardDTO.html":{},"classes/UpdateBoardInput.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserIdSchema.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"classes/UserSchema.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":375,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"entities/BoardReactionEntity.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionSchema.html":{},"injectables/BoardRepository.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1540,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1382,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1399,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1401,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1381,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1392,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1328,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1329,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1327,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1323,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1324,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1332,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1325,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1326,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1330,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1331,"title":{},"body":{"coverage.html":{}}}],["03t09:54:33z",{"_index":982,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["1",{"_index":399,"title":{},"body":{"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"injectables/BoardIdCounterRepository.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"classes/PaginationDTO.html":{}}}],["1.0.0",{"_index":1393,"title":{},"body":{"dependencies.html":{}}}],["1.18.1",{"_index":1386,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1337,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":1360,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1368,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1364,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1363,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":889,"title":{},"body":{"classes/CreateBoardCommentDTO.html":{},"coverage.html":{}}}],["1000",{"_index":1236,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["12",{"_index":981,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["12.2.0",{"_index":1359,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":1537,"title":{},"body":{"overview.html":{}}}],["16.9.0",{"_index":1387,"title":{},"body":{"dependencies.html":{}}}],["2.1691.0",{"_index":1379,"title":{},"body":{"dependencies.html":{}}}],["2.7.0",{"_index":1371,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1508,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["2019",{"_index":980,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["23505",{"_index":1275,"title":{},"body":{"injectables/UserRepository.html":{}}}],["24",{"_index":1234,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["3",{"_index":491,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["3.13.0",{"_index":1378,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":1361,"title":{},"body":{"dependencies.html":{}}}],["3.674.0",{"_index":1353,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":1538,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":1375,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":1357,"title":{},"body":{"dependencies.html":{}}}],["4.11.0",{"_index":1349,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":1358,"title":{},"body":{"dependencies.html":{}}}],["4.7.0",{"_index":1396,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":816,"title":{},"body":{"classes/BoardResolver.html":{},"classes/PaginationDTO.html":{},"overview.html":{}}}],["5.0.2",{"_index":1373,"title":{},"body":{"dependencies.html":{}}}],["5.0.3",{"_index":1355,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1380,"title":{},"body":{"dependencies.html":{}}}],["5.4.1",{"_index":1389,"title":{},"body":{"dependencies.html":{}}}],["5.9.2",{"_index":1390,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1536,"title":{},"body":{"overview.html":{}}}],["60",{"_index":1235,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["7",{"_index":1233,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["7.1.1",{"_index":1384,"title":{},"body":{"dependencies.html":{}}}],["7.4.2",{"_index":1367,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1400,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1504,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"overview.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["8.13.0",{"_index":1395,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":490,"title":{},"body":{"injectables/BoardCommentService.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["__istypeof",{"_index":1060,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["__typename",{"_index":964,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["_id",{"_index":277,"title":{},"body":{"entities/BoardCommentEntity.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentSchema.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"entities/BoardReactionEntity.html":{},"classes/BoardReactionSchema.html":{},"classes/BoardSchema.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["accesstoken",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["actual",{"_index":972,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"miscellaneous/typealiases.html":{}}}],["address",{"_index":184,"title":{},"body":{"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"classes/BoardSchema.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UpdateBoardInput.html":{},"coverage.html":{}}}],["addresss.dto",{"_index":590,"title":{},"body":{"entities/BoardEntity.html":{},"classes/CreateBoardDTO.html":{}}}],["addresss.dto.ts",{"_index":182,"title":{},"body":{"classes/BoardAddressDTO.html":{},"coverage.html":{}}}],["addresss.dto.ts:10",{"_index":188,"title":{},"body":{"classes/BoardAddressDTO.html":{}}}],["addresss.dto.ts:14",{"_index":189,"title":{},"body":{"classes/BoardAddressDTO.html":{}}}],["addresss.dto.ts:6",{"_index":192,"title":{},"body":{"classes/BoardAddressDTO.html":{}}}],["alias",{"_index":1336,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1550,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amazing",{"_index":1487,"title":{},"body":{"index.html":{}}}],["api/board",{"_index":521,"title":{},"body":{"controllers/BoardController.html":{}}}],["api/board/:boardid/comment",{"_index":216,"title":{},"body":{"controllers/BoardCommentController.html":{}}}],["api/board/:boardid/password",{"_index":645,"title":{},"body":{"controllers/BoardPasswordController.html":{}}}],["api/board/:boardid/reaction",{"_index":686,"title":{},"body":{"controllers/BoardReactionController.html":{}}}],["api/user",{"_index":1197,"title":{},"body":{"controllers/UserController.html":{}}}],["apollo",{"_index":1376,"title":{},"body":{"dependencies.html":{}}}],["apollo/server",{"_index":1348,"title":{},"body":{"dependencies.html":{}}}],["apollodriver",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["apollodriverconfig",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["app.controller",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1460,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1414,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":34,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":403,"title":{},"body":{"classes/BoardCommentResolver.html":{},"classes/BoardPasswordResolver.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardResolver.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UserResolver.html":{}}}],["args('boardid",{"_index":412,"title":{},"body":{"classes/BoardCommentResolver.html":{},"classes/BoardPasswordResolver.html":{},"classes/BoardResolver.html":{}}}],["args('commentid",{"_index":416,"title":{},"body":{"classes/BoardCommentResolver.html":{}}}],["args('createboardcomment",{"_index":414,"title":{},"body":{"classes/BoardCommentResolver.html":{}}}],["args('createboardinput",{"_index":824,"title":{},"body":{"classes/BoardResolver.html":{}}}],["args('loginuser",{"_index":1298,"title":{},"body":{"classes/UserResolver.html":{}}}],["args('page",{"_index":413,"title":{},"body":{"classes/BoardCommentResolver.html":{},"classes/BoardResolver.html":{}}}],["args('password",{"_index":675,"title":{},"body":{"classes/BoardPasswordResolver.html":{}}}],["args('take",{"_index":821,"title":{},"body":{"classes/BoardResolver.html":{}}}],["args('updateboardcomment",{"_index":415,"title":{},"body":{"classes/BoardCommentResolver.html":{}}}],["args('updateboardinput",{"_index":826,"title":{},"body":{"classes/BoardResolver.html":{}}}],["argumentshost",{"_index":1077,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":992,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["array.from(commentmap.values",{"_index":516,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["array.isarray(data.result",{"_index":1168,"title":{},"body":{"injectables/TransformBoardInterceptor.html":{}}}],["arraymaxsize",{"_index":922,"title":{},"body":{"classes/CreateBoardDTO.html":{}}}],["arraymaxsize(3",{"_index":927,"title":{},"body":{"classes/CreateBoardDTO.html":{}}}],["asc",{"_index":370,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["async",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"injectables/BoardIdCounterRepository.html":{},"injectables/BoardPasswordService.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["asynciterable",{"_index":1038,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["auth.service",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["authmodule",{"_index":45,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":278,"title":{},"body":{"entities/BoardCommentEntity.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentSchema.html":{},"entities/BoardEntity.html":{},"injectables/BoardRepository.html":{},"classes/BoardSchema.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"index.html":{},"properties.html":{}}}],["authservice",{"_index":106,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["autoschemafile",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":1052,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"miscellaneous/typealiases.html":{}}}],["await",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"injectables/BoardIdCounterRepository.html":{},"injectables/BoardPasswordService.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["aws",{"_index":1350,"title":{},"body":{"dependencies.html":{}}}],["backers",{"_index":1488,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":464,"title":{},"body":{"injectables/BoardCommentService.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"classes/HttpExceptionFilter.html":{}}}],["baseentity",{"_index":1192,"title":{},"body":{"entities/User.html":{}}}],["bcrypt",{"_index":169,"title":{},"body":{"injectables/BcryptService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":174,"title":{},"body":{"injectables/BcryptService.html":{}}}],["bcrypt.gensalt",{"_index":172,"title":{},"body":{"injectables/BcryptService.html":{}}}],["bcrypt.hash(password",{"_index":173,"title":{},"body":{"injectables/BcryptService.html":{}}}],["bcrypt.service",{"_index":158,"title":{},"body":{"modules/BcryptModule.html":{}}}],["bcrypt/bcrypt.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["bcryptmodule",{"_index":46,"title":{"modules/BcryptModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BcryptModule.html":{},"modules/BoardCommentModule.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["bcryptservice",{"_index":156,"title":{"injectables/BcryptService.html":{}},"body":{"modules/BcryptModule.html":{},"injectables/BcryptService.html":{},"injectables/BoardCommentService.html":{},"injectables/BoardPasswordService.html":{},"injectables/BoardService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["bearer",{"_index":1224,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["between",{"_index":1051,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"miscellaneous/typealiases.html":{}}}],["board",{"_index":251,"title":{},"body":{"controllers/BoardCommentController.html":{},"modules/BoardCommentModule.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"injectables/BoardIdCounterRepository.html":{},"modules/BoardModule.html":{},"controllers/BoardPasswordController.html":{},"modules/BoardPasswordModule.html":{},"classes/BoardPasswordResolver.html":{},"controllers/BoardReactionController.html":{},"modules/BoardReactionModule.html":{},"classes/BoardReactionResolver.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"injectables/BoardService.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{},"coverage.html":{},"index.html":{}}}],["board.boardid",{"_index":861,"title":{},"body":{"injectables/BoardService.html":{}}}],["board.controller",{"_index":623,"title":{},"body":{"modules/BoardModule.html":{}}}],["board.dto",{"_index":551,"title":{},"body":{"controllers/BoardController.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"classes/UpdateBoardDTO.html":{}}}],["board.dto.ts",{"_index":910,"title":{},"body":{"classes/CreateBoardDTO.html":{},"classes/UpdateBoardDTO.html":{},"coverage.html":{}}}],["board.dto.ts:17",{"_index":911,"title":{},"body":{"classes/CreateBoardDTO.html":{}}}],["board.dto.ts:21",{"_index":920,"title":{},"body":{"classes/CreateBoardDTO.html":{}}}],["board.dto.ts:25",{"_index":915,"title":{},"body":{"classes/CreateBoardDTO.html":{}}}],["board.dto.ts:31",{"_index":918,"title":{},"body":{"classes/CreateBoardDTO.html":{}}}],["board.dto.ts:35",{"_index":921,"title":{},"body":{"classes/CreateBoardDTO.html":{}}}],["board.dto.ts:39",{"_index":919,"title":{},"body":{"classes/CreateBoardDTO.html":{}}}],["board.dto.ts:45",{"_index":914,"title":{},"body":{"classes/CreateBoardDTO.html":{}}}],["board.interceptor",{"_index":557,"title":{},"body":{"controllers/BoardController.html":{}}}],["board.interceptor.ts",{"_index":1162,"title":{},"body":{"injectables/TransformBoardInterceptor.html":{},"coverage.html":{}}}],["board.interceptor.ts:13",{"_index":1164,"title":{},"body":{"injectables/TransformBoardInterceptor.html":{}}}],["board.interceptor.ts:38",{"_index":1166,"title":{},"body":{"injectables/TransformBoardInterceptor.html":{}}}],["board.resolver",{"_index":632,"title":{},"body":{"modules/BoardModule.html":{}}}],["board.schema",{"_index":642,"title":{},"body":{"classes/BoardPaginationResponse.html":{}}}],["board.service",{"_index":550,"title":{},"body":{"controllers/BoardController.html":{},"modules/BoardModule.html":{},"classes/BoardResolver.html":{}}}],["board/board",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["board/board.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["boardaddressdto",{"_index":179,"title":{"classes/BoardAddressDTO.html":{}},"body":{"classes/BoardAddressDTO.html":{},"entities/BoardEntity.html":{},"classes/CreateBoardDTO.html":{},"coverage.html":{}}}],["boardaddressinput",{"_index":197,"title":{"classes/BoardAddressInput.html":{}},"body":{"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"injectables/BoardRepository.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UpdateBoardInput.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["boardaddressoutput",{"_index":210,"title":{"classes/BoardAddressOutput.html":{}},"body":{"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"entities/BoardEntity.html":{},"injectables/BoardRepository.html":{},"classes/BoardSchema.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["boardaddressoutputresolvers",{"_index":1059,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["boardcommentcontroller",{"_index":212,"title":{"controllers/BoardCommentController.html":{}},"body":{"controllers/BoardCommentController.html":{},"modules/BoardCommentModule.html":{},"coverage.html":{}}}],["boardcommententity",{"_index":273,"title":{"entities/BoardCommentEntity.html":{}},"body":{"entities/BoardCommentEntity.html":{},"modules/BoardCommentModule.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"modules/BoardModule.html":{},"coverage.html":{}}}],["boardcommentmodule",{"_index":47,"title":{"modules/BoardCommentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BoardCommentModule.html":{},"modules.html":{},"overview.html":{}}}],["boardcommentrepository",{"_index":310,"title":{"injectables/BoardCommentRepository.html":{}},"body":{"modules/BoardCommentModule.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"modules/BoardModule.html":{},"injectables/BoardService.html":{},"coverage.html":{},"overview.html":{}}}],["boardcommentresolver",{"_index":319,"title":{"classes/BoardCommentResolver.html":{}},"body":{"modules/BoardCommentModule.html":{},"classes/BoardCommentResolver.html":{},"coverage.html":{}}}],["boardcommentresponsedto",{"_index":358,"title":{"classes/BoardCommentResponseDTO.html":{}},"body":{"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"injectables/BoardCommentService.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["boardcommentresponsedtoresolvers",{"_index":1061,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["boardcomments",{"_index":457,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["boardcomments.foreach((comment",{"_index":509,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["boardcomments.map((item",{"_index":474,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["boardcommentschema",{"_index":406,"title":{"classes/BoardCommentSchema.html":{}},"body":{"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"coverage.html":{}}}],["boardcommentservice",{"_index":250,"title":{"injectables/BoardCommentService.html":{}},"body":{"controllers/BoardCommentController.html":{},"modules/BoardCommentModule.html":{},"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"coverage.html":{},"overview.html":{}}}],["boardcontroller",{"_index":519,"title":{"controllers/BoardController.html":{}},"body":{"controllers/BoardController.html":{},"modules/BoardModule.html":{},"coverage.html":{}}}],["boardentity",{"_index":321,"title":{"entities/BoardEntity.html":{}},"body":{"modules/BoardCommentModule.html":{},"controllers/BoardController.html":{},"entities/BoardEntity.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"classes/PaginationResponseDTO.html":{},"coverage.html":{}}}],["boardid",{"_index":227,"title":{},"body":{"controllers/BoardCommentController.html":{},"entities/BoardCommentEntity.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"injectables/BoardIdCounterRepository.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"entities/BoardReactionEntity.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"injectables/BoardService.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["boardid.entity",{"_index":608,"title":{},"body":{"injectables/BoardIdCounterRepository.html":{},"modules/BoardModule.html":{}}}],["boardid.entity.ts",{"_index":594,"title":{},"body":{"entities/BoardIdCounterEntity.html":{},"coverage.html":{}}}],["boardid.entity.ts:11",{"_index":598,"title":{},"body":{"entities/BoardIdCounterEntity.html":{}}}],["boardid.entity.ts:14",{"_index":597,"title":{},"body":{"entities/BoardIdCounterEntity.html":{}}}],["boardid.entity.ts:8",{"_index":596,"title":{},"body":{"entities/BoardIdCounterEntity.html":{}}}],["boardidcounterentity",{"_index":592,"title":{"entities/BoardIdCounterEntity.html":{}},"body":{"entities/BoardIdCounterEntity.html":{},"injectables/BoardIdCounterRepository.html":{},"modules/BoardModule.html":{},"coverage.html":{}}}],["boardidcounterrepository",{"_index":600,"title":{"injectables/BoardIdCounterRepository.html":{}},"body":{"injectables/BoardIdCounterRepository.html":{},"modules/BoardModule.html":{},"injectables/BoardService.html":{},"coverage.html":{},"overview.html":{}}}],["boardmodule",{"_index":48,"title":{"modules/BoardModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BoardModule.html":{},"modules.html":{},"overview.html":{}}}],["boardpaginationresponse",{"_index":634,"title":{"classes/BoardPaginationResponse.html":{}},"body":{"classes/BoardPaginationResponse.html":{},"classes/BoardResolver.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["boardpaginationresponseresolvers",{"_index":1064,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["boardpasswordcontroller",{"_index":643,"title":{"controllers/BoardPasswordController.html":{}},"body":{"controllers/BoardPasswordController.html":{},"modules/BoardPasswordModule.html":{},"coverage.html":{}}}],["boardpassworddto",{"_index":648,"title":{"classes/BoardPasswordDTO.html":{}},"body":{"controllers/BoardPasswordController.html":{},"classes/BoardPasswordDTO.html":{},"coverage.html":{}}}],["boardpasswordmodule",{"_index":49,"title":{"modules/BoardPasswordModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BoardPasswordModule.html":{},"modules.html":{},"overview.html":{}}}],["boardpasswordresolver",{"_index":666,"title":{"classes/BoardPasswordResolver.html":{}},"body":{"modules/BoardPasswordModule.html":{},"classes/BoardPasswordResolver.html":{},"coverage.html":{}}}],["boardpasswordservice",{"_index":651,"title":{"injectables/BoardPasswordService.html":{}},"body":{"controllers/BoardPasswordController.html":{},"modules/BoardPasswordModule.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"coverage.html":{},"overview.html":{}}}],["boardreaction",{"_index":732,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["boardreactioncontroller",{"_index":684,"title":{"controllers/BoardReactionController.html":{}},"body":{"controllers/BoardReactionController.html":{},"modules/BoardReactionModule.html":{},"coverage.html":{}}}],["boardreactionentity",{"_index":625,"title":{"entities/BoardReactionEntity.html":{}},"body":{"modules/BoardModule.html":{},"entities/BoardReactionEntity.html":{},"modules/BoardReactionModule.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardReactionService.html":{},"coverage.html":{}}}],["boardreactionmodule",{"_index":620,"title":{"modules/BoardReactionModule.html":{}},"body":{"modules/BoardModule.html":{},"modules/BoardReactionModule.html":{},"modules.html":{},"overview.html":{}}}],["boardreactionrepository",{"_index":621,"title":{"injectables/BoardReactionRepository.html":{}},"body":{"modules/BoardModule.html":{},"modules/BoardReactionModule.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardService.html":{},"coverage.html":{},"overview.html":{}}}],["boardreactionresolver",{"_index":713,"title":{"classes/BoardReactionResolver.html":{}},"body":{"modules/BoardReactionModule.html":{},"classes/BoardReactionResolver.html":{},"coverage.html":{}}}],["boardreactionschema",{"_index":745,"title":{"classes/BoardReactionSchema.html":{}},"body":{"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["boardreactionschemaresolvers",{"_index":1065,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["boardreactionservice",{"_index":692,"title":{"injectables/BoardReactionService.html":{}},"body":{"controllers/BoardReactionController.html":{},"modules/BoardReactionModule.html":{},"classes/BoardReactionResolver.html":{},"injectables/BoardReactionService.html":{},"coverage.html":{},"overview.html":{}}}],["boardrepository",{"_index":311,"title":{"injectables/BoardRepository.html":{}},"body":{"modules/BoardCommentModule.html":{},"injectables/BoardCommentService.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"injectables/BoardPasswordService.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"coverage.html":{},"overview.html":{}}}],["boardrepsitory",{"_index":443,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["boardresolver",{"_index":631,"title":{"classes/BoardResolver.html":{}},"body":{"modules/BoardModule.html":{},"classes/BoardResolver.html":{},"coverage.html":{}}}],["boardschema",{"_index":639,"title":{"classes/BoardSchema.html":{}},"body":{"classes/BoardPaginationResponse.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["boardschemaresolvers",{"_index":1066,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["boardservice",{"_index":549,"title":{"injectables/BoardService.html":{}},"body":{"controllers/BoardController.html":{},"modules/BoardModule.html":{},"classes/BoardResolver.html":{},"injectables/BoardService.html":{},"coverage.html":{},"overview.html":{}}}],["body",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/BoardCommentController.html":{},"controllers/BoardController.html":{},"controllers/BoardPasswordController.html":{},"controllers/UserController.html":{}}}],["body.password",{"_index":657,"title":{},"body":{"controllers/BoardPasswordController.html":{}}}],["boolean",{"_index":417,"title":{},"body":{"classes/BoardCommentResolver.html":{},"classes/BoardPasswordResolver.html":{},"classes/BoardResolver.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/IResolverClearResponse.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UserResolver.html":{}}}],["bootstrap",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BcryptModule.html":{},"modules/BoardCommentModule.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"modules/BoardReactionModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1534,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1532,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1410,"title":{},"body":{"index.html":{}}}],["built",{"_index":968,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"miscellaneous/typealiases.html":{}}}],["callhandler",{"_index":1123,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["catch",{"_index":1074,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/UserRepository.html":{}}}],["catch(exception",{"_index":1075,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":1085,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["channel",{"_index":1451,"title":{},"body":{"index.html":{}}}],["character",{"_index":1520,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["characters",{"_index":1505,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["characters'})@matches(/^(?=.*[a",{"_index":1509,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["check",{"_index":1437,"title":{},"body":{"index.html":{}}}],["checkboardentitycount",{"_index":840,"title":{},"body":{"injectables/BoardService.html":{}}}],["checkboardentitycount(page",{"_index":845,"title":{},"body":{"injectables/BoardService.html":{}}}],["class",{"_index":21,"title":{"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"classes/BoardPaginationResponse.html":{},"classes/BoardPasswordDTO.html":{},"classes/BoardPasswordResolver.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationDTO.html":{},"classes/PaginationResponseDTO.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardDTO.html":{},"classes/UpdateBoardInput.html":{},"classes/UserIdSchema.html":{},"classes/UserResolver.html":{},"classes/UserSchema.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BcryptModule.html":{},"injectables/BcryptService.html":{},"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"controllers/BoardCommentController.html":{},"entities/BoardCommentEntity.html":{},"modules/BoardCommentModule.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"injectables/BoardIdCounterRepository.html":{},"modules/BoardModule.html":{},"classes/BoardPaginationResponse.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordDTO.html":{},"modules/BoardPasswordModule.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"entities/BoardReactionEntity.html":{},"modules/BoardReactionModule.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"injectables/BoardService.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/PaginationDTO.html":{},"classes/PaginationResponseDTO.html":{},"injectables/TransformBoardInterceptor.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardDTO.html":{},"classes/UpdateBoardInput.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserIdSchema.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"classes/UserSchema.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["classes",{"_index":180,"title":{},"body":{"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"classes/BoardPaginationResponse.html":{},"classes/BoardPasswordDTO.html":{},"classes/BoardPasswordResolver.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationDTO.html":{},"classes/PaginationResponseDTO.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardDTO.html":{},"classes/UpdateBoardInput.html":{},"classes/UserIdSchema.html":{},"classes/UserResolver.html":{},"classes/UserSchema.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"overview.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["clear",{"_index":841,"title":{},"body":{"injectables/BoardService.html":{}}}],["clearboard",{"_index":522,"title":{},"body":{"controllers/BoardController.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["clearboardmutation",{"_index":1020,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["clearboardmutationvariables",{"_index":1019,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["clearboardreaction",{"_index":717,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["clearcomment",{"_index":327,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["cluster_appmodule",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_bcryptmodule",{"_index":153,"title":{},"body":{"modules/BcryptModule.html":{},"overview.html":{}}}],["cluster_bcryptmodule_exports",{"_index":155,"title":{},"body":{"modules/BcryptModule.html":{},"overview.html":{}}}],["cluster_bcryptmodule_providers",{"_index":154,"title":{},"body":{"modules/BcryptModule.html":{},"overview.html":{}}}],["cluster_boardcommentmodule",{"_index":306,"title":{},"body":{"modules/BoardCommentModule.html":{},"overview.html":{}}}],["cluster_boardcommentmodule_exports",{"_index":309,"title":{},"body":{"modules/BoardCommentModule.html":{},"overview.html":{}}}],["cluster_boardcommentmodule_imports",{"_index":307,"title":{},"body":{"modules/BoardCommentModule.html":{}}}],["cluster_boardcommentmodule_providers",{"_index":308,"title":{},"body":{"modules/BoardCommentModule.html":{},"overview.html":{}}}],["cluster_boardmodule",{"_index":616,"title":{},"body":{"modules/BoardModule.html":{},"overview.html":{}}}],["cluster_boardmodule_exports",{"_index":618,"title":{},"body":{"modules/BoardModule.html":{},"overview.html":{}}}],["cluster_boardmodule_imports",{"_index":617,"title":{},"body":{"modules/BoardModule.html":{},"overview.html":{}}}],["cluster_boardmodule_providers",{"_index":619,"title":{},"body":{"modules/BoardModule.html":{},"overview.html":{}}}],["cluster_boardpasswordmodule",{"_index":661,"title":{},"body":{"modules/BoardPasswordModule.html":{},"overview.html":{}}}],["cluster_boardpasswordmodule_imports",{"_index":663,"title":{},"body":{"modules/BoardPasswordModule.html":{}}}],["cluster_boardpasswordmodule_providers",{"_index":662,"title":{},"body":{"modules/BoardPasswordModule.html":{},"overview.html":{}}}],["cluster_boardreactionmodule",{"_index":708,"title":{},"body":{"modules/BoardReactionModule.html":{},"overview.html":{}}}],["cluster_boardreactionmodule_providers",{"_index":709,"title":{},"body":{"modules/BoardReactionModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1247,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1248,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1249,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["codegen/cli",{"_index":1354,"title":{},"body":{"dependencies.html":{}}}],["codegen/typescript",{"_index":1356,"title":{},"body":{"dependencies.html":{}}}],["collection",{"_index":595,"title":{},"body":{"entities/BoardIdCounterEntity.html":{},"injectables/BoardIdCounterRepository.html":{}}}],["column",{"_index":287,"title":{},"body":{"entities/BoardCommentEntity.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"entities/BoardReactionEntity.html":{},"entities/User.html":{}}}],["column('array",{"_index":584,"title":{},"body":{"entities/BoardEntity.html":{}}}],["column()@exclude",{"_index":296,"title":{},"body":{"entities/BoardCommentEntity.html":{},"entities/BoardEntity.html":{},"entities/User.html":{}}}],["column({default",{"_index":703,"title":{},"body":{"entities/BoardReactionEntity.html":{}}}],["column({nullable",{"_index":294,"title":{},"body":{"entities/BoardCommentEntity.html":{},"entities/BoardEntity.html":{}}}],["column({type",{"_index":578,"title":{},"body":{"entities/BoardEntity.html":{}}}],["come",{"_index":1440,"title":{},"body":{"index.html":{}}}],["comment",{"_index":352,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"injectables/BoardCommentService.html":{},"classes/CreateBoardCommentInput.html":{},"classes/UpdateBoardCommentInput.html":{},"coverage.html":{}}}],["comment.controller",{"_index":314,"title":{},"body":{"modules/BoardCommentModule.html":{}}}],["comment.controller.ts",{"_index":214,"title":{},"body":{"controllers/BoardCommentController.html":{},"coverage.html":{}}}],["comment.controller.ts:27",{"_index":226,"title":{},"body":{"controllers/BoardCommentController.html":{}}}],["comment.controller.ts:40",{"_index":232,"title":{},"body":{"controllers/BoardCommentController.html":{}}}],["comment.controller.ts:50",{"_index":241,"title":{},"body":{"controllers/BoardCommentController.html":{}}}],["comment.controller.ts:67",{"_index":236,"title":{},"body":{"controllers/BoardCommentController.html":{}}}],["comment.dto",{"_index":254,"title":{},"body":{"controllers/BoardCommentController.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{}}}],["comment.dto.ts",{"_index":886,"title":{},"body":{"classes/CreateBoardCommentDTO.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"coverage.html":{}}}],["comment.dto.ts:14",{"_index":887,"title":{},"body":{"classes/CreateBoardCommentDTO.html":{}}}],["comment.dto.ts:19",{"_index":890,"title":{},"body":{"classes/CreateBoardCommentDTO.html":{}}}],["comment.dto.ts:25",{"_index":895,"title":{},"body":{"classes/CreateBoardCommentDTO.html":{}}}],["comment.dto.ts:29",{"_index":892,"title":{},"body":{"classes/CreateBoardCommentDTO.html":{}}}],["comment.dto.ts:33",{"_index":893,"title":{},"body":{"classes/CreateBoardCommentDTO.html":{}}}],["comment.dto.ts:9",{"_index":1177,"title":{},"body":{"classes/UpdateBoardCommentDTO.html":{}}}],["comment.entity",{"_index":316,"title":{},"body":{"modules/BoardCommentModule.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"modules/BoardModule.html":{}}}],["comment.entity.ts",{"_index":276,"title":{},"body":{"entities/BoardCommentEntity.html":{},"coverage.html":{}}}],["comment.entity.ts:15",{"_index":286,"title":{},"body":{"entities/BoardCommentEntity.html":{}}}],["comment.entity.ts:18",{"_index":288,"title":{},"body":{"entities/BoardCommentEntity.html":{}}}],["comment.entity.ts:21",{"_index":290,"title":{},"body":{"entities/BoardCommentEntity.html":{}}}],["comment.entity.ts:24",{"_index":298,"title":{},"body":{"entities/BoardCommentEntity.html":{}}}],["comment.entity.ts:27",{"_index":295,"title":{},"body":{"entities/BoardCommentEntity.html":{}}}],["comment.entity.ts:31",{"_index":297,"title":{},"body":{"entities/BoardCommentEntity.html":{}}}],["comment.entity.ts:34",{"_index":289,"title":{},"body":{"entities/BoardCommentEntity.html":{}}}],["comment.entity.ts:37",{"_index":293,"title":{},"body":{"entities/BoardCommentEntity.html":{}}}],["comment.entity.ts:40",{"_index":300,"title":{},"body":{"entities/BoardCommentEntity.html":{}}}],["comment.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["comment.module.ts",{"_index":312,"title":{},"body":{"modules/BoardCommentModule.html":{}}}],["comment.parentid",{"_index":510,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["comment.parentid.tostring",{"_index":514,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["comment.password",{"_index":506,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["comment.repository",{"_index":318,"title":{},"body":{"modules/BoardCommentModule.html":{},"injectables/BoardCommentService.html":{},"modules/BoardModule.html":{},"injectables/BoardService.html":{}}}],["comment.repository.ts",{"_index":326,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"coverage.html":{}}}],["comment.repository.ts:11",{"_index":337,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["comment.repository.ts:17",{"_index":349,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["comment.repository.ts:23",{"_index":341,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["comment.repository.ts:43",{"_index":351,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["comment.repository.ts:49",{"_index":347,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["comment.repository.ts:56",{"_index":355,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["comment.repository.ts:76",{"_index":345,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["comment.repository.ts:85",{"_index":343,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["comment.repository.ts:97",{"_index":338,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["comment.resolver",{"_index":320,"title":{},"body":{"modules/BoardCommentModule.html":{}}}],["comment.resolver.ts",{"_index":383,"title":{},"body":{"classes/BoardCommentResolver.html":{},"coverage.html":{}}}],["comment.resolver.ts:11",{"_index":387,"title":{},"body":{"classes/BoardCommentResolver.html":{}}}],["comment.resolver.ts:15",{"_index":396,"title":{},"body":{"classes/BoardCommentResolver.html":{}}}],["comment.resolver.ts:23",{"_index":391,"title":{},"body":{"classes/BoardCommentResolver.html":{}}}],["comment.resolver.ts:35",{"_index":402,"title":{},"body":{"classes/BoardCommentResolver.html":{}}}],["comment.resolver.ts:51",{"_index":393,"title":{},"body":{"classes/BoardCommentResolver.html":{}}}],["comment.schema",{"_index":408,"title":{},"body":{"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{}}}],["comment.schema.ts",{"_index":425,"title":{},"body":{"classes/BoardCommentSchema.html":{},"coverage.html":{}}}],["comment.schema.ts:11",{"_index":427,"title":{},"body":{"classes/BoardCommentSchema.html":{}}}],["comment.schema.ts:14",{"_index":429,"title":{},"body":{"classes/BoardCommentSchema.html":{}}}],["comment.schema.ts:17",{"_index":434,"title":{},"body":{"classes/BoardCommentSchema.html":{}}}],["comment.schema.ts:20",{"_index":432,"title":{},"body":{"classes/BoardCommentSchema.html":{}}}],["comment.schema.ts:23",{"_index":433,"title":{},"body":{"classes/BoardCommentSchema.html":{}}}],["comment.schema.ts:26",{"_index":428,"title":{},"body":{"classes/BoardCommentSchema.html":{}}}],["comment.schema.ts:29",{"_index":430,"title":{},"body":{"classes/BoardCommentSchema.html":{}}}],["comment.schema.ts:32",{"_index":435,"title":{},"body":{"classes/BoardCommentSchema.html":{}}}],["comment.schema.ts:8",{"_index":426,"title":{},"body":{"classes/BoardCommentSchema.html":{}}}],["comment.service",{"_index":252,"title":{},"body":{"controllers/BoardCommentController.html":{},"modules/BoardCommentModule.html":{},"classes/BoardCommentResolver.html":{}}}],["comment.service.ts",{"_index":436,"title":{},"body":{"injectables/BoardCommentService.html":{},"coverage.html":{}}}],["comment.service.ts:101",{"_index":448,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["comment.service.ts:111",{"_index":450,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["comment.service.ts:123",{"_index":463,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["comment.service.ts:137",{"_index":456,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["comment.service.ts:158",{"_index":452,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["comment.service.ts:18",{"_index":444,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["comment.service.ts:24",{"_index":445,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["comment.service.ts:49",{"_index":446,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["comment.service.ts:74",{"_index":461,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["comment.service.ts:95",{"_index":459,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["comment/board",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"controllers/BoardCommentController.html":{},"modules/BoardCommentModule.html":{},"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"coverage.html":{}}}],["comment/dto/board",{"_index":418,"title":{},"body":{"classes/BoardCommentResponseDTO.html":{},"coverage.html":{}}}],["comment/dto/create",{"_index":885,"title":{},"body":{"classes/CreateBoardCommentDTO.html":{},"coverage.html":{}}}],["comment/dto/update",{"_index":1175,"title":{},"body":{"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"coverage.html":{}}}],["comment/entity/board",{"_index":275,"title":{},"body":{"entities/BoardCommentEntity.html":{},"modules/BoardModule.html":{},"coverage.html":{}}}],["comment/repository/board",{"_index":325,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"modules/BoardModule.html":{},"injectables/BoardService.html":{},"coverage.html":{}}}],["comment/schema/board",{"_index":424,"title":{},"body":{"classes/BoardCommentSchema.html":{},"coverage.html":{}}}],["comment/schema/create",{"_index":901,"title":{},"body":{"classes/CreateBoardCommentInput.html":{},"coverage.html":{}}}],["comment/schema/update",{"_index":1180,"title":{},"body":{"classes/UpdateBoardCommentInput.html":{},"coverage.html":{}}}],["commentboardlist",{"_index":485,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["commentboardlist.filter",{"_index":489,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["commentboardlist.length",{"_index":487,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["commentid",{"_index":234,"title":{},"body":{"controllers/BoardCommentController.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["commentmap",{"_index":507,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["commentmap.get",{"_index":513,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["commentmap.set(comment._id.tostring",{"_index":511,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["common/decorators/response",{"_index":257,"title":{},"body":{"controllers/BoardCommentController.html":{},"controllers/BoardController.html":{},"controllers/BoardPasswordController.html":{},"controllers/BoardReactionController.html":{}}}],["compliant",{"_index":983,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["configmodule",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["configs/jwt.config",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{}}}],["configs/mongodb.config",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["configs/postgresql.config",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception",{"_index":1268,"title":{},"body":{"injectables/UserRepository.html":{}}}],["conflictexception('existing",{"_index":1276,"title":{},"body":{"injectables/UserRepository.html":{}}}],["connect",{"_index":1383,"title":{},"body":{"dependencies.html":{}}}],["console.log('before",{"_index":1145,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`after",{"_index":1151,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`incoming",{"_index":1138,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`outgoing",{"_index":1150,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["const",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"controllers/BoardCommentController.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"injectables/BoardIdCounterRepository.html":{},"injectables/BoardPasswordService.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TransformBoardInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"injectables/BoardIdCounterRepository.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"injectables/BoardService.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["constructor(boardcommentrepository",{"_index":335,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{}}}],["constructor(boardcommentservice",{"_index":386,"title":{},"body":{"classes/BoardCommentResolver.html":{}}}],["constructor(boardidcounterrepository",{"_index":604,"title":{},"body":{"injectables/BoardIdCounterRepository.html":{}}}],["constructor(boardpasswordservice",{"_index":671,"title":{},"body":{"classes/BoardPasswordResolver.html":{}}}],["constructor(boardreactionrepository",{"_index":721,"title":{},"body":{"injectables/BoardReactionRepository.html":{},"injectables/BoardReactionService.html":{}}}],["constructor(boardreactionservice",{"_index":742,"title":{},"body":{"classes/BoardReactionResolver.html":{}}}],["constructor(boardrepository",{"_index":678,"title":{},"body":{"injectables/BoardPasswordService.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{}}}],["constructor(boardservice",{"_index":807,"title":{},"body":{"classes/BoardResolver.html":{}}}],["constructor(jwtservice",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/BoardCommentController.html":{},"classes/BoardCommentResolver.html":{},"controllers/BoardController.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordResolver.html":{},"controllers/BoardReactionController.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardResolver.html":{},"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["constructor(userrepository",{"_index":1261,"title":{},"body":{"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":1281,"title":{},"body":{"classes/UserResolver.html":{}}}],["content",{"_index":279,"title":{},"body":{"entities/BoardCommentEntity.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentSchema.html":{},"entities/BoardEntity.html":{},"injectables/BoardRepository.html":{},"classes/BoardSchema.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{}}}],["context",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"interfaces/DateTimeScalarConfig.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"injectables/TransformBoardInterceptor.html":{},"classes/UserResolver.html":{}}}],["context('res",{"_index":1299,"title":{},"body":{"classes/UserResolver.html":{}}}],["context.gettype",{"_index":1132,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":1136,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["contexttype",{"_index":1063,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/BoardCommentController.html":{},"controllers/BoardController.html":{},"controllers/BoardPasswordController.html":{},"controllers/BoardReactionController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/BoardCommentController.html":{},"controllers/BoardController.html":{},"controllers/BoardPasswordController.html":{},"controllers/BoardReactionController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('/api/board",{"_index":559,"title":{},"body":{"controllers/BoardController.html":{}}}],["controller('/api/board/:boardid/comment",{"_index":259,"title":{},"body":{"controllers/BoardCommentController.html":{}}}],["controller('/api/board/:boardid/password",{"_index":654,"title":{},"body":{"controllers/BoardPasswordController.html":{}}}],["controller('/api/board/:boardid/reaction",{"_index":694,"title":{},"body":{"controllers/BoardReactionController.html":{}}}],["controller('/api/user",{"_index":1217,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/BoardCommentController.html":{},"modules/BoardCommentModule.html":{},"controllers/BoardController.html":{},"modules/BoardModule.html":{},"controllers/BoardPasswordController.html":{},"modules/BoardPasswordModule.html":{},"controllers/BoardReactionController.html":{},"modules/BoardReactionModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["counselor",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["count",{"_index":881,"title":{},"body":{"injectables/BoardService.html":{}}}],["countboard",{"_index":761,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["counter",{"_index":610,"title":{},"body":{"injectables/BoardIdCounterRepository.html":{}}}],["counter.repository",{"_index":624,"title":{},"body":{"modules/BoardModule.html":{},"injectables/BoardService.html":{}}}],["counter.repository.ts",{"_index":602,"title":{},"body":{"injectables/BoardIdCounterRepository.html":{},"coverage.html":{}}}],["counter.repository.ts:12",{"_index":607,"title":{},"body":{"injectables/BoardIdCounterRepository.html":{}}}],["counter.repository.ts:7",{"_index":605,"title":{},"body":{"injectables/BoardIdCounterRepository.html":{}}}],["counter.value.boardid",{"_index":615,"title":{},"body":{"injectables/BoardIdCounterRepository.html":{}}}],["courses",{"_index":1458,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1319,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":217,"title":{},"body":{"controllers/BoardCommentController.html":{},"injectables/BoardService.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"classes/UpdateBoardDTO.html":{}}}],["create(boardid",{"_index":221,"title":{},"body":{"controllers/BoardCommentController.html":{}}}],["create(createboard",{"_index":848,"title":{},"body":{"injectables/BoardService.html":{}}}],["createboard",{"_index":523,"title":{},"body":{"controllers/BoardController.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"injectables/BoardService.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["createboard(@body",{"_index":561,"title":{},"body":{"controllers/BoardController.html":{}}}],["createboard(createboard",{"_index":770,"title":{},"body":{"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{}}}],["createboard(createboarddto",{"_index":530,"title":{},"body":{"controllers/BoardController.html":{}}}],["createboard.password",{"_index":858,"title":{},"body":{"injectables/BoardService.html":{}}}],["createboardcomment",{"_index":222,"title":{},"body":{"controllers/BoardCommentController.html":{},"classes/BoardCommentResolver.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["createboardcomment(boardid",{"_index":388,"title":{},"body":{"classes/BoardCommentResolver.html":{}}}],["createboardcommentdto",{"_index":223,"title":{"classes/CreateBoardCommentDTO.html":{}},"body":{"controllers/BoardCommentController.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"coverage.html":{}}}],["createboardcommentdto.password",{"_index":469,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["createboardcommentinput",{"_index":389,"title":{"classes/CreateBoardCommentInput.html":{}},"body":{"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"classes/CreateBoardCommentInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["createboardcommentmutation",{"_index":1006,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["createboardcommentmutationvariables",{"_index":1005,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["createboarddto",{"_index":531,"title":{"classes/CreateBoardDTO.html":{}},"body":{"controllers/BoardController.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"classes/CreateBoardDTO.html":{},"classes/UpdateBoardDTO.html":{},"coverage.html":{}}}],["createboardinput",{"_index":810,"title":{"classes/CreateBoardInput.html":{}},"body":{"classes/BoardResolver.html":{},"injectables/BoardService.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["createboardmutation",{"_index":1014,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["createboardmutationvariables",{"_index":1013,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["createcomment",{"_index":328,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{}}}],["createcomment(boardid",{"_index":339,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{}}}],["createdat",{"_index":280,"title":{},"body":{"entities/BoardCommentEntity.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentSchema.html":{},"entities/BoardEntity.html":{},"entities/BoardReactionEntity.html":{},"classes/BoardReactionSchema.html":{},"injectables/BoardRepository.html":{},"classes/BoardSchema.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["createdatecolumn",{"_index":292,"title":{},"body":{"entities/BoardCommentEntity.html":{},"entities/BoardEntity.html":{},"entities/BoardReactionEntity.html":{}}}],["createtestimage(@uploadedfiles",{"_index":28,"title":{},"body":{"controllers/AppController.html":{}}}],["createuser",{"_index":1259,"title":{},"body":{"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["createuser(signupdto",{"_index":1264,"title":{},"body":{"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["ctx",{"_index":1088,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["ctx.getinfo",{"_index":1140,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["ctx.getrequest",{"_index":1091,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":1090,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["current",{"_index":884,"title":{},"body":{"injectables/BoardService.html":{}}}],["custom",{"_index":969,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"miscellaneous/typealiases.html":{}}}],["data",{"_index":1114,"title":{},"body":{"interfaces/IDeleteResponse.html":{},"interfaces/IResponseInterceptor.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["data.result.map((item",{"_index":1170,"title":{},"body":{"injectables/TransformBoardInterceptor.html":{}}}],["database",{"_index":791,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["date",{"_index":291,"title":{},"body":{"entities/BoardCommentEntity.html":{},"classes/BoardCommentSchema.html":{},"entities/BoardEntity.html":{},"entities/BoardReactionEntity.html":{},"classes/BoardReactionSchema.html":{},"classes/BoardSchema.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["date().toisostring",{"_index":1101,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date.now",{"_index":1147,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["datetime",{"_index":985,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["datetimescalarconfig",{"_index":941,"title":{"interfaces/DateTimeScalarConfig.html":{}},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{}}}],["declarations",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BcryptModule.html":{},"modules/BoardCommentModule.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"modules/BoardReactionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"controllers/BoardCommentController.html":{},"entities/BoardCommentEntity.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"controllers/BoardController.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"classes/BoardPaginationResponse.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordDTO.html":{},"classes/BoardPasswordResolver.html":{},"controllers/BoardReactionController.html":{},"entities/BoardReactionEntity.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"classes/PaginationDTO.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserIdSchema.html":{},"classes/UserResolver.html":{},"classes/UserSchema.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["deeper",{"_index":1453,"title":{},"body":{"index.html":{}}}],["default",{"_index":397,"title":{},"body":{"classes/BoardCommentResolver.html":{},"entities/BoardReactionEntity.html":{},"classes/BoardReactionSchema.html":{},"classes/BoardResolver.html":{},"classes/PaginationDTO.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{}}}],["defaultvaluepipe",{"_index":249,"title":{},"body":{"controllers/BoardCommentController.html":{}}}],["defaultvaluepipe(1",{"_index":264,"title":{},"body":{"controllers/BoardCommentController.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"controllers/BoardCommentController.html":{},"entities/BoardCommentEntity.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"injectables/BoardIdCounterRepository.html":{},"classes/BoardPaginationResponse.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordDTO.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"entities/BoardReactionEntity.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"injectables/BoardService.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/PaginationDTO.html":{},"classes/PaginationResponseDTO.html":{},"injectables/TransformBoardInterceptor.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserIdSchema.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"classes/UserSchema.html":{},"injectables/UserService.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["delete",{"_index":243,"title":{},"body":{"controllers/BoardCommentController.html":{},"controllers/BoardController.html":{}}}],["delete(':boardid",{"_index":569,"title":{},"body":{"controllers/BoardController.html":{}}}],["delete(':boardid')@responsemessage('board",{"_index":542,"title":{},"body":{"controllers/BoardController.html":{}}}],["delete(':commentid",{"_index":270,"title":{},"body":{"controllers/BoardCommentController.html":{}}}],["delete(':commentid')@responsemessage('comment",{"_index":235,"title":{},"body":{"controllers/BoardCommentController.html":{}}}],["delete()@responsemessage('board",{"_index":528,"title":{},"body":{"controllers/BoardController.html":{}}}],["deleteallcomment",{"_index":329,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["deleteallcomment(boardid",{"_index":342,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["deleteboard",{"_index":762,"title":{},"body":{"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["deleteboard(@args('boardid",{"_index":827,"title":{},"body":{"classes/BoardResolver.html":{}}}],["deleteboard(boardid",{"_index":772,"title":{},"body":{"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{}}}],["deleteboardcomment",{"_index":384,"title":{},"body":{"classes/BoardCommentResolver.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["deleteboardcomment(boardid",{"_index":392,"title":{},"body":{"classes/BoardCommentResolver.html":{}}}],["deleteboardcommentmutation",{"_index":1010,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["deleteboardcommentmutationvariables",{"_index":1009,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["deleteboarddb",{"_index":801,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["deleteboarddb.deletedcount",{"_index":803,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["deleteboardmutation",{"_index":1018,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["deleteboardmutationvariables",{"_index":1017,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["deleteboardreaction",{"_index":718,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["deleteboardreaction(boardid",{"_index":724,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["deleteboardreaction.deletedcount",{"_index":739,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["deletecomment",{"_index":330,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["deletecomment(parentid",{"_index":344,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["dependencies",{"_index":36,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BcryptModule.html":{},"modules/BoardCommentModule.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"modules/BoardReactionModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":1415,"title":{},"body":{"index.html":{},"properties.html":{}}}],["detailaddress",{"_index":185,"title":{},"body":{"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["development",{"_index":1424,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1465,"title":{},"body":{"index.html":{}}}],["directiveresolverfn",{"_index":1049,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["disable",{"_index":476,"title":{},"body":{"injectables/BoardCommentService.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["discord",{"_index":1450,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1452,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1320,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["driver",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["dto/board",{"_index":359,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"entities/BoardEntity.html":{},"controllers/BoardPasswordController.html":{}}}],["dto/create",{"_index":253,"title":{},"body":{"controllers/BoardCommentController.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{}}}],["dto/login.dto",{"_index":1216,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/pagination",{"_index":554,"title":{},"body":{"controllers/BoardController.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{}}}],["dto/pagination.dto",{"_index":552,"title":{},"body":{"controllers/BoardController.html":{},"injectables/BoardService.html":{}}}],["dto/signup.dto",{"_index":1214,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["dto/update",{"_index":255,"title":{},"body":{"controllers/BoardCommentController.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{}}}],["e2e",{"_index":1434,"title":{},"body":{"index.html":{}}}],["each",{"_index":926,"title":{},"body":{"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"classes/UpdateBoardInput.html":{}}}],["efficient",{"_index":1411,"title":{},"body":{"index.html":{}}}],["email",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"classes/UserSchema.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["encryptedpassword",{"_index":167,"title":{},"body":{"injectables/BcryptService.html":{}}}],["enterprise",{"_index":1470,"title":{},"body":{"index.html":{}}}],["entities",{"_index":274,"title":{},"body":{"entities/BoardCommentEntity.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"entities/BoardReactionEntity.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":272,"title":{"entities/BoardCommentEntity.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"entities/BoardReactionEntity.html":{},"entities/User.html":{}},"body":{"entities/BoardCommentEntity.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"entities/BoardReactionEntity.html":{},"injectables/BoardService.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('board",{"_index":591,"title":{},"body":{"entities/BoardEntity.html":{}}}],["entity('board_comment",{"_index":304,"title":{},"body":{"entities/BoardCommentEntity.html":{}}}],["entity('board_id_counter",{"_index":599,"title":{},"body":{"entities/BoardIdCounterEntity.html":{}}}],["entity('board_reaction",{"_index":707,"title":{},"body":{"entities/BoardReactionEntity.html":{}}}],["entity/board",{"_index":315,"title":{},"body":{"modules/BoardCommentModule.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"injectables/BoardIdCounterRepository.html":{},"modules/BoardModule.html":{},"modules/BoardReactionModule.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardReactionService.html":{}}}],["entity/board.entity",{"_index":322,"title":{},"body":{"modules/BoardCommentModule.html":{},"controllers/BoardController.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"classes/PaginationResponseDTO.html":{}}}],["entity/user.entity",{"_index":1215,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["env.${process.env.node_env",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":1095,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/UserRepository.html":{}}}],["error.code",{"_index":1274,"title":{},"body":{"injectables/UserRepository.html":{}}}],["eslint",{"_index":475,"title":{},"body":{"injectables/BoardCommentService.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["eslint/no",{"_index":480,"title":{},"body":{"injectables/BoardCommentService.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["exact",{"_index":951,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["example",{"_index":1420,"title":{},"body":{"index.html":{}}}],["exceed",{"_index":1507,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["exceeds",{"_index":882,"title":{},"body":{"injectables/BoardService.html":{}}}],["except",{"_index":361,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"coverage.html":{}}}],["exception",{"_index":1079,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":1071,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:13",{"_index":1078,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":1097,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":1093,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":1107,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":1073,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exclude",{"_index":302,"title":{},"body":{"entities/BoardCommentEntity.html":{},"entities/BoardEntity.html":{},"entities/User.html":{}}}],["executioncontext",{"_index":1122,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["exist",{"_index":1279,"title":{},"body":{"injectables/UserRepository.html":{}}}],["experience",{"_index":1455,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BcryptModule.html":{},"injectables/BcryptService.html":{},"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"controllers/BoardCommentController.html":{},"entities/BoardCommentEntity.html":{},"modules/BoardCommentModule.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"injectables/BoardIdCounterRepository.html":{},"modules/BoardModule.html":{},"classes/BoardPaginationResponse.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordDTO.html":{},"modules/BoardPasswordModule.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"entities/BoardReactionEntity.html":{},"modules/BoardReactionModule.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"injectables/BoardService.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IDeleteResponse.html":{},"interfaces/IResolverClearResponse.html":{},"interfaces/IResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"classes/PaginationDTO.html":{},"classes/PaginationResponseDTO.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"injectables/TransformBoardInterceptor.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardDTO.html":{},"classes/UpdateBoardInput.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserIdSchema.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"classes/UserSchema.html":{},"injectables/UserService.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["exports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BcryptModule.html":{},"modules/BoardCommentModule.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"modules/BoardReactionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":1084,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"controllers/UserController.html":{},"classes/UserResolver.html":{},"dependencies.html":{}}}],["extends",{"_index":211,"title":{},"body":{"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"classes/BoardCommentResponseDTO.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/IDeleteResponse.html":{},"interfaces/IResponseInterceptor.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"classes/UpdateBoardDTO.html":{},"entities/User.html":{}}}],["failed",{"_index":789,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["few",{"_index":1438,"title":{},"body":{"index.html":{}}}],["field",{"_index":205,"title":{},"body":{"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"classes/BoardPaginationResponse.html":{},"classes/BoardReactionSchema.html":{},"classes/BoardSchema.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardInput.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{},"classes/UserIdSchema.html":{},"classes/UserSchema.html":{},"classes/loginUser.html":{},"classes/signUpUser.html":{}}}],["field()@isstring()@isnotempty",{"_index":200,"title":{},"body":{"classes/BoardAddressInput.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardInput.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{}}}],["field()@isstring()@isoptional",{"_index":1181,"title":{},"body":{"classes/UpdateBoardCommentInput.html":{}}}],["field(undefined",{"_index":421,"title":{},"body":{"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"classes/BoardPaginationResponse.html":{},"classes/BoardReactionSchema.html":{},"classes/BoardSchema.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardInput.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{},"classes/UserIdSchema.html":{},"classes/UserSchema.html":{}}}],["field(undefined)@isnumber()@isnotempty",{"_index":203,"title":{},"body":{"classes/BoardAddressInput.html":{}}}],["field({nullable",{"_index":431,"title":{},"body":{"classes/BoardCommentSchema.html":{},"classes/BoardSchema.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardInput.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{}}}],["fieldmethod",{"_index":1143,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["fieldname",{"_index":1141,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BcryptModule.html":{},"injectables/BcryptService.html":{},"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"controllers/BoardCommentController.html":{},"entities/BoardCommentEntity.html":{},"modules/BoardCommentModule.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"injectables/BoardIdCounterRepository.html":{},"modules/BoardModule.html":{},"classes/BoardPaginationResponse.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordDTO.html":{},"modules/BoardPasswordModule.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"entities/BoardReactionEntity.html":{},"modules/BoardReactionModule.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"injectables/BoardService.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IDeleteResponse.html":{},"interfaces/IResolverClearResponse.html":{},"interfaces/IResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"classes/PaginationDTO.html":{},"classes/PaginationResponseDTO.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"injectables/TransformBoardInterceptor.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardDTO.html":{},"classes/UpdateBoardInput.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserIdSchema.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"classes/UserSchema.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["files",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["findall",{"_index":218,"title":{},"body":{"controllers/BoardCommentController.html":{},"injectables/BoardService.html":{}}}],["findall(boardid",{"_index":228,"title":{},"body":{"controllers/BoardCommentController.html":{}}}],["findall(undefined",{"_index":850,"title":{},"body":{"injectables/BoardService.html":{}}}],["findallboard",{"_index":763,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["findallboard(page",{"_index":774,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["findallcomment",{"_index":331,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{}}}],["findallcomment(boardid",{"_index":346,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{}}}],["findboard",{"_index":681,"title":{},"body":{"injectables/BoardPasswordService.html":{},"injectables/BoardRepository.html":{}}}],["findboard(boardid",{"_index":777,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["findboard.password",{"_index":683,"title":{},"body":{"injectables/BoardPasswordService.html":{}}}],["findboardreaction",{"_index":719,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["findboardreaction(boardid",{"_index":726,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["findcomment",{"_index":332,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["findcomment(id",{"_index":348,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["findone",{"_index":842,"title":{},"body":{"injectables/BoardService.html":{}}}],["findone(boardid",{"_index":852,"title":{},"body":{"injectables/BoardService.html":{}}}],["findreaction",{"_index":735,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["finduser",{"_index":1260,"title":{},"body":{"injectables/UserRepository.html":{}}}],["finduser(email",{"_index":1266,"title":{},"body":{"injectables/UserRepository.html":{}}}],["float",{"_index":976,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["follow",{"_index":1474,"title":{},"body":{"index.html":{}}}],["format",{"_index":984,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["format'})@field",{"_index":1529,"title":{},"body":{"classes/loginUser.html":{},"classes/signUpUser.html":{}}}],["found",{"_index":381,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"injectables/BoardPasswordService.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{}}}],["fragmentname",{"_index":963,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["framework",{"_index":1409,"title":{},"body":{"index.html":{}}}],["full",{"_index":1469,"title":{},"body":{"index.html":{}}}],["function",{"_index":1339,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":1403,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':boardid",{"_index":565,"title":{},"body":{"controllers/BoardController.html":{}}}],["get(':boardid')@responsemessage('board",{"_index":535,"title":{},"body":{"controllers/BoardController.html":{}}}],["get()@responsemessage('board",{"_index":539,"title":{},"body":{"controllers/BoardController.html":{}}}],["get()@responsemessage('comment",{"_index":230,"title":{},"body":{"controllers/BoardCommentController.html":{}}}],["get()@responsemessage(board",{"_index":689,"title":{},"body":{"controllers/BoardReactionController.html":{}}}],["getboard",{"_index":524,"title":{},"body":{"controllers/BoardController.html":{},"classes/BoardResolver.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["getboard(@args('boardid",{"_index":823,"title":{},"body":{"classes/BoardResolver.html":{}}}],["getboard(boardid",{"_index":534,"title":{},"body":{"controllers/BoardController.html":{},"classes/BoardResolver.html":{}}}],["getboardcomment",{"_index":385,"title":{},"body":{"classes/BoardCommentResolver.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["getboardcomment(boardid",{"_index":394,"title":{},"body":{"classes/BoardCommentResolver.html":{}}}],["getboardcommentquery",{"_index":1022,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getboardcommentqueryvariables",{"_index":1021,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getboardcount",{"_index":843,"title":{},"body":{"injectables/BoardService.html":{}}}],["getboardquery",{"_index":1028,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getboardqueryvariables",{"_index":1027,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getboardreaction",{"_index":687,"title":{},"body":{"controllers/BoardReactionController.html":{},"classes/BoardReactionResolver.html":{},"injectables/BoardReactionService.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["getboardreaction(@args('boardid",{"_index":747,"title":{},"body":{"classes/BoardReactionResolver.html":{}}}],["getboardreaction(@param('boardid",{"_index":696,"title":{},"body":{"controllers/BoardReactionController.html":{}}}],["getboardreaction(boardid",{"_index":688,"title":{},"body":{"controllers/BoardReactionController.html":{},"classes/BoardReactionResolver.html":{},"injectables/BoardReactionService.html":{}}}],["getboardreactionquery",{"_index":1024,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getboardreactionqueryvariables",{"_index":1023,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getboards",{"_index":525,"title":{},"body":{"controllers/BoardController.html":{},"classes/BoardResolver.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["getboards(@query",{"_index":563,"title":{},"body":{"controllers/BoardController.html":{}}}],["getboards(page",{"_index":814,"title":{},"body":{"classes/BoardResolver.html":{}}}],["getboards(query",{"_index":537,"title":{},"body":{"controllers/BoardController.html":{}}}],["getboardsquery",{"_index":1026,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getboardsqueryvariables",{"_index":1025,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":1405,"title":{"index.html":{}},"body":{}}],["gqlargumentshost",{"_index":1080,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["gqlargumentshost.create(host",{"_index":1109,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["gqlcontexttype",{"_index":1081,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["gqlexecutioncontext",{"_index":1127,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["gqlexecutioncontext.create(context",{"_index":1139,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["gqlhost",{"_index":1108,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["gqlhost.getinfo().fieldname",{"_index":1110,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["graph",{"_index":1461,"title":{},"body":{"index.html":{}}}],["graphql",{"_index":947,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"dependencies.html":{}}}],["graphqlmodule",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlresolveinfo",{"_index":945,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["graphqlscalartype",{"_index":946,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["graphqlscalartypeconfig",{"_index":944,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["grow",{"_index":1484,"title":{},"body":{"index.html":{}}}],["hands",{"_index":1454,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1441,"title":{},"body":{"index.html":{}}}],["hate",{"_index":699,"title":{},"body":{"entities/BoardReactionEntity.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionSchema.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["hello",{"_index":101,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1467,"title":{},"body":{"index.html":{}}}],["here",{"_index":1492,"title":{},"body":{"index.html":{}}}],["host",{"_index":1076,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["host.gettype",{"_index":1086,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":1089,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["http",{"_index":1087,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["httpcode",{"_index":244,"title":{},"body":{"controllers/BoardCommentController.html":{},"controllers/BoardController.html":{},"controllers/BoardPasswordController.html":{},"controllers/BoardReactionController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.created",{"_index":225,"title":{},"body":{"controllers/BoardCommentController.html":{},"controllers/BoardController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":231,"title":{},"body":{"controllers/BoardCommentController.html":{},"controllers/BoardController.html":{},"controllers/BoardPasswordController.html":{},"controllers/BoardReactionController.html":{},"controllers/UserController.html":{}}}],["httpexception",{"_index":730,"title":{},"body":{"injectables/BoardReactionRepository.html":{},"injectables/BoardRepository.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":1069,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httponly",{"_index":1228,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["https://nestjs.com",{"_index":1497,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":245,"title":{},"body":{"controllers/BoardCommentController.html":{},"controllers/BoardController.html":{},"controllers/BoardPasswordController.html":{},"controllers/BoardReactionController.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardRepository.html":{},"controllers/UserController.html":{}}}],["httpstatus.not_found",{"_index":737,"title":{},"body":{"injectables/BoardReactionRepository.html":{},"injectables/BoardRepository.html":{}}}],["id",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"injectables/BoardIdCounterRepository.html":{},"modules/BoardModule.html":{},"classes/BoardReactionSchema.html":{},"classes/BoardSchema.html":{},"injectables/BoardService.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserIdSchema.html":{},"classes/UserResolver.html":{},"classes/UserSchema.html":{},"coverage.html":{}}}],["id.schema",{"_index":1295,"title":{},"body":{"classes/UserResolver.html":{}}}],["id.schema.ts",{"_index":1245,"title":{},"body":{"classes/UserIdSchema.html":{},"coverage.html":{}}}],["id.schema.ts:6",{"_index":1246,"title":{},"body":{"classes/UserIdSchema.html":{}}}],["ideleteresponse",{"_index":1111,"title":{"interfaces/IDeleteResponse.html":{}},"body":{"interfaces/IDeleteResponse.html":{},"interfaces/IResponseInterceptor.html":{},"coverage.html":{}}}],["identifier",{"_index":1321,"title":{},"body":{"coverage.html":{}}}],["imageurl",{"_index":573,"title":{},"body":{"entities/BoardEntity.html":{},"injectables/BoardRepository.html":{},"classes/BoardSchema.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UpdateBoardInput.html":{}}}],["imageurl?.length",{"_index":787,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["implements",{"_index":1072,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BcryptModule.html":{},"injectables/BcryptService.html":{},"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"controllers/BoardCommentController.html":{},"entities/BoardCommentEntity.html":{},"modules/BoardCommentModule.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"injectables/BoardIdCounterRepository.html":{},"modules/BoardModule.html":{},"classes/BoardPaginationResponse.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordDTO.html":{},"modules/BoardPasswordModule.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"entities/BoardReactionEntity.html":{},"modules/BoardReactionModule.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"injectables/BoardService.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/PaginationDTO.html":{},"classes/PaginationResponseDTO.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"injectables/TransformBoardInterceptor.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardDTO.html":{},"classes/UpdateBoardInput.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserIdSchema.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"classes/UserSchema.html":{},"injectables/UserService.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["imports",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardCommentModule.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"modules/BoardReactionModule.html":{},"modules/UserModule.html":{}}}],["inc",{"_index":612,"title":{},"body":{"injectables/BoardIdCounterRepository.html":{}}}],["include",{"_index":1514,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["incremental",{"_index":961,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["incrementboardid",{"_index":603,"title":{},"body":{"injectables/BoardIdCounterRepository.html":{}}}],["incrementboardid(board",{"_index":606,"title":{},"body":{"injectables/BoardIdCounterRepository.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"controllers/BoardCommentController.html":{},"entities/BoardCommentEntity.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"injectables/BoardIdCounterRepository.html":{},"classes/BoardPaginationResponse.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordDTO.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"entities/BoardReactionEntity.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"injectables/BoardService.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IDeleteResponse.html":{},"interfaces/IResolverClearResponse.html":{},"interfaces/IResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"classes/PaginationDTO.html":{},"classes/PaginationResponseDTO.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"injectables/TransformBoardInterceptor.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserIdSchema.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"classes/UserSchema.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BcryptModule.html":{},"injectables/BcryptService.html":{},"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"controllers/BoardCommentController.html":{},"entities/BoardCommentEntity.html":{},"modules/BoardCommentModule.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"injectables/BoardIdCounterRepository.html":{},"modules/BoardModule.html":{},"classes/BoardPaginationResponse.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordDTO.html":{},"modules/BoardPasswordModule.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"entities/BoardReactionEntity.html":{},"modules/BoardReactionModule.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"injectables/BoardService.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IDeleteResponse.html":{},"interfaces/IResolverClearResponse.html":{},"interfaces/IResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"classes/PaginationDTO.html":{},"classes/PaginationResponseDTO.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"injectables/TransformBoardInterceptor.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardDTO.html":{},"classes/UpdateBoardInput.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserIdSchema.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"classes/UserSchema.html":{},"injectables/UserService.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["info.path.key",{"_index":1142,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["info.path.typename",{"_index":1144,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["initializatedboardreaction",{"_index":720,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["initializatedboardreaction(boardid",{"_index":728,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["injectable",{"_index":97,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"injectables/BoardIdCounterRepository.html":{},"injectables/BoardPasswordService.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TransformBoardInterceptor.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"injectables/BoardIdCounterRepository.html":{},"injectables/BoardPasswordService.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TransformBoardInterceptor.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":98,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"injectables/BoardIdCounterRepository.html":{},"injectables/BoardPasswordService.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TransformBoardInterceptor.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":356,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"injectables/BoardIdCounterRepository.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardRepository.html":{},"injectables/UserRepository.html":{}}}],["injectrepository(boardcommententity",{"_index":362,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["injectrepository(boardentity",{"_index":785,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["injectrepository(boardidcounterentity",{"_index":609,"title":{},"body":{"injectables/BoardIdCounterRepository.html":{}}}],["injectrepository(boardreactionentity",{"_index":731,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["injectrepository(user",{"_index":1270,"title":{},"body":{"injectables/UserRepository.html":{}}}],["input",{"_index":974,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["input.schema",{"_index":410,"title":{},"body":{"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"injectables/BoardService.html":{},"classes/CreateBoardInput.html":{},"classes/UpdateBoardInput.html":{}}}],["input.schema.ts",{"_index":199,"title":{},"body":{"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardInput.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{},"coverage.html":{}}}],["input.schema.ts:10",{"_index":204,"title":{},"body":{"classes/BoardAddressInput.html":{}}}],["input.schema.ts:14",{"_index":903,"title":{},"body":{"classes/CreateBoardCommentInput.html":{},"classes/UpdateBoardCommentInput.html":{}}}],["input.schema.ts:15",{"_index":201,"title":{},"body":{"classes/BoardAddressInput.html":{}}}],["input.schema.ts:18",{"_index":929,"title":{},"body":{"classes/CreateBoardInput.html":{},"classes/UpdateBoardInput.html":{}}}],["input.schema.ts:19",{"_index":908,"title":{},"body":{"classes/CreateBoardCommentInput.html":{},"classes/UpdateBoardCommentInput.html":{}}}],["input.schema.ts:20",{"_index":202,"title":{},"body":{"classes/BoardAddressInput.html":{}}}],["input.schema.ts:23",{"_index":936,"title":{},"body":{"classes/CreateBoardInput.html":{},"classes/UpdateBoardInput.html":{}}}],["input.schema.ts:24",{"_index":905,"title":{},"body":{"classes/CreateBoardCommentInput.html":{},"classes/UpdateBoardCommentInput.html":{}}}],["input.schema.ts:28",{"_index":937,"title":{},"body":{"classes/CreateBoardInput.html":{},"classes/UpdateBoardInput.html":{}}}],["input.schema.ts:29",{"_index":906,"title":{},"body":{"classes/CreateBoardCommentInput.html":{}}}],["input.schema.ts:33",{"_index":933,"title":{},"body":{"classes/CreateBoardInput.html":{},"classes/UpdateBoardInput.html":{}}}],["input.schema.ts:38",{"_index":935,"title":{},"body":{"classes/CreateBoardInput.html":{}}}],["input.schema.ts:40",{"_index":1185,"title":{},"body":{"classes/UpdateBoardInput.html":{}}}],["input.schema.ts:43",{"_index":939,"title":{},"body":{"classes/CreateBoardInput.html":{}}}],["input.schema.ts:50",{"_index":932,"title":{},"body":{"classes/CreateBoardInput.html":{}}}],["input.schema.ts:9",{"_index":902,"title":{},"body":{"classes/CreateBoardCommentInput.html":{},"classes/UpdateBoardCommentInput.html":{}}}],["inputmaybe",{"_index":950,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["inputtype",{"_index":206,"title":{},"body":{"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardInput.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{},"classes/loginUser.html":{},"classes/signUpUser.html":{}}}],["installcompile",{"_index":1422,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1096,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["int",{"_index":207,"title":{},"body":{"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentSchema.html":{},"classes/BoardPaginationResponse.html":{},"classes/BoardPasswordResolver.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"classes/CreateBoardCommentInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UserSchema.html":{}}}],["interact",{"_index":1462,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":1120,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["intercept(context",{"_index":1121,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["interface",{"_index":940,"title":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/IDeleteResponse.html":{},"interfaces/IResolverClearResponse.html":{},"interfaces/IResponseInterceptor.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/IDeleteResponse.html":{},"interfaces/IResolverClearResponse.html":{},"interfaces/IResponseInterceptor.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{}}}],["interfaces",{"_index":942,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/IDeleteResponse.html":{},"interfaces/IResolverClearResponse.html":{},"interfaces/IResponseInterceptor.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":1269,"title":{},"body":{"injectables/UserRepository.html":{}}}],["invalid",{"_index":178,"title":{},"body":{"injectables/BcryptService.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["ioredis",{"_index":1388,"title":{},"body":{"dependencies.html":{}}}],["iresolverclearresponse",{"_index":1115,"title":{"interfaces/IResolverClearResponse.html":{}},"body":{"interfaces/IResolverClearResponse.html":{},"coverage.html":{}}}],["iresponseinterceptor",{"_index":1113,"title":{"interfaces/IResponseInterceptor.html":{}},"body":{"interfaces/IDeleteResponse.html":{},"interfaces/IResponseInterceptor.html":{},"coverage.html":{}}}],["isarray",{"_index":923,"title":{},"body":{"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"classes/UpdateBoardInput.html":{}}}],["isarray()@isoptional()@isstring({each",{"_index":916,"title":{},"body":{"classes/CreateBoardDTO.html":{}}}],["isemail",{"_index":1522,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["isexist",{"_index":497,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["isexistboard",{"_index":437,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["isexistboard(boardid",{"_index":447,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["isexistparentcomment",{"_index":438,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["isexistparentcomment(parentid",{"_index":449,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["isexistparentcomment.parentid",{"_index":501,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["isglobal",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["isgraphql",{"_index":1133,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["ishttp",{"_index":1131,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["isint",{"_index":1157,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["isinvalidpage",{"_index":439,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["isinvalidpage(length",{"_index":451,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["isnotempty",{"_index":193,"title":{},"body":{"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"classes/BoardPasswordDTO.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["isnumber",{"_index":194,"title":{},"body":{"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/UpdateBoardCommentInput.html":{}}}],["isnumber()@isnotempty",{"_index":191,"title":{},"body":{"classes/BoardAddressDTO.html":{}}}],["isnumber()@isoptional()@min(1)@max(5",{"_index":894,"title":{},"body":{"classes/CreateBoardCommentDTO.html":{}}}],["isobject",{"_index":924,"title":{},"body":{"classes/CreateBoardDTO.html":{}}}],["isoptional",{"_index":896,"title":{},"body":{"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"classes/PaginationDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{}}}],["isoptional()@type(undefined)@ispositive()@isint",{"_index":1154,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["isoptional()@validatenested({each",{"_index":912,"title":{},"body":{"classes/CreateBoardDTO.html":{}}}],["ispasswordcorrect",{"_index":670,"title":{},"body":{"classes/BoardPasswordResolver.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["ispasswordcorrect(boardid",{"_index":673,"title":{},"body":{"classes/BoardPasswordResolver.html":{}}}],["ispasswordcorrectmutation",{"_index":1012,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ispasswordcorrectmutationvariables",{"_index":1011,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ispositive",{"_index":1158,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["isstring",{"_index":195,"title":{},"body":{"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"classes/BoardPasswordDTO.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["isstring()@isnotempty",{"_index":187,"title":{},"body":{"classes/BoardAddressDTO.html":{},"classes/BoardPasswordDTO.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardDTO.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/signUpDTO.html":{}}}],["isstring()@isnotempty()@field",{"_index":1546,"title":{},"body":{"classes/signUpUser.html":{}}}],["isstring()@isnotempty()@isemail",{"_index":1501,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["isstring()@isnotempty()@length(1",{"_index":888,"title":{},"body":{"classes/CreateBoardCommentDTO.html":{}}}],["isstring()@isnotempty()@minlength(8",{"_index":1503,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["isstring()@isoptional",{"_index":891,"title":{},"body":{"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardDTO.html":{}}}],["issuelogintoken",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{}}}],["issuelogintoken(email",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["istypeofresolverfn",{"_index":1046,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["item",{"_index":484,"title":{},"body":{"injectables/BoardCommentService.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["job",{"_index":1478,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1480,"title":{},"body":{"index.html":{}}}],["join",{"_index":1490,"title":{},"body":{"index.html":{}}}],["json",{"_index":579,"title":{},"body":{"entities/BoardEntity.html":{}}}],["jti(jwt",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["jwtconfigservice",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{}}}],["k",{"_index":952,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["kamil",{"_index":1494,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":953,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["learn",{"_index":1445,"title":{},"body":{"index.html":{}}}],["legend",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BcryptModule.html":{},"modules/BoardCommentModule.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"modules/BoardReactionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":453,"title":{},"body":{"injectables/BoardCommentService.html":{},"classes/CreateBoardCommentDTO.html":{}}}],["length(1",{"_index":898,"title":{},"body":{"classes/CreateBoardCommentDTO.html":{}}}],["letter",{"_index":1517,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["license",{"_index":1500,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1482,"title":{},"body":{"index.html":{}}}],["limit",{"_index":883,"title":{},"body":{"injectables/BoardService.html":{}}}],["line",{"_index":478,"title":{},"body":{"injectables/BoardCommentService.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["linkedin",{"_index":1476,"title":{},"body":{"index.html":{}}}],["literal",{"_index":1552,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["local",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["logginginterceptor",{"_index":1118,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["login",{"_index":1198,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["login(logindto",{"_index":1201,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["login(loginuser",{"_index":1283,"title":{},"body":{"classes/UserResolver.html":{}}}],["logindto",{"_index":1202,"title":{"classes/loginDTO.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/loginDTO.html":{}}}],["logindto.password",{"_index":1315,"title":{},"body":{"injectables/UserService.html":{}}}],["loginuser",{"_index":1284,"title":{"classes/loginUser.html":{}},"body":{"classes/UserResolver.html":{},"coverage.html":{},"classes/loginUser.html":{}}}],["logout",{"_index":1199,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["logout(@context('res",{"_index":1301,"title":{},"body":{"classes/UserResolver.html":{}}}],["logout(@res",{"_index":1240,"title":{},"body":{"controllers/UserController.html":{}}}],["logout(res",{"_index":1205,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["long",{"_index":1527,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["long'})@maxlength(20",{"_index":1506,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["looking",{"_index":1477,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1472,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":1518,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["makecommentmap",{"_index":440,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["makecommentmap(boardcomments",{"_index":455,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["makeempty",{"_index":959,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["makemaybe",{"_index":958,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["makeoptional",{"_index":955,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["map",{"_index":508,"title":{},"body":{"injectables/BoardCommentService.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["map((data",{"_index":1167,"title":{},"body":{"injectables/TransformBoardInterceptor.html":{}}}],["mapped",{"_index":971,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"miscellaneous/typealiases.html":{}}}],["mapping",{"_index":1050,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"miscellaneous/typealiases.html":{}}}],["matches",{"_index":1523,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["matching",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BcryptModule.html":{},"injectables/BcryptService.html":{},"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"controllers/BoardCommentController.html":{},"entities/BoardCommentEntity.html":{},"modules/BoardCommentModule.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"injectables/BoardIdCounterRepository.html":{},"modules/BoardModule.html":{},"classes/BoardPaginationResponse.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordDTO.html":{},"modules/BoardPasswordModule.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"entities/BoardReactionEntity.html":{},"modules/BoardReactionModule.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"injectables/BoardService.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IDeleteResponse.html":{},"interfaces/IResolverClearResponse.html":{},"interfaces/IResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"classes/PaginationDTO.html":{},"classes/PaginationResponseDTO.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"injectables/TransformBoardInterceptor.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardDTO.html":{},"classes/UpdateBoardInput.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserIdSchema.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"classes/UserSchema.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(maxcount",{"_index":880,"title":{},"body":{"injectables/BoardService.html":{}}}],["max",{"_index":518,"title":{},"body":{"injectables/BoardCommentService.html":{},"classes/CreateBoardCommentDTO.html":{}}}],["max(5",{"_index":900,"title":{},"body":{"classes/CreateBoardCommentDTO.html":{}}}],["maxage",{"_index":1232,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["maxcount",{"_index":878,"title":{},"body":{"injectables/BoardService.html":{}}}],["maxlength",{"_index":1524,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["maxlength(20",{"_index":1528,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["maxpage",{"_index":879,"title":{},"body":{"injectables/BoardService.html":{}}}],["maybe",{"_index":948,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["message",{"_index":1106,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IDeleteResponse.html":{},"interfaces/IResponseInterceptor.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{},"miscellaneous/variables.html":{}}}],["message.decorator",{"_index":258,"title":{},"body":{"controllers/BoardCommentController.html":{},"controllers/BoardController.html":{},"controllers/BoardPasswordController.html":{},"controllers/BoardReactionController.html":{}}}],["message.decorator.ts",{"_index":1334,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":1398,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1134,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"controllers/BoardCommentController.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"injectables/BoardIdCounterRepository.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"injectables/BoardService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TransformBoardInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["min",{"_index":897,"title":{},"body":{"classes/CreateBoardCommentDTO.html":{}}}],["min(1",{"_index":899,"title":{},"body":{"classes/CreateBoardCommentDTO.html":{}}}],["minlength",{"_index":1525,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["minlength(8",{"_index":1526,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["miscellaneous",{"_index":1402,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1481,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1427,"title":{},"body":{"index.html":{}}}],["module",{"_index":33,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BcryptModule.html":{},"modules/BoardCommentModule.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"modules/BoardReactionModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BcryptModule.html":{},"modules/BoardCommentModule.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"modules/BoardReactionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":35,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BcryptModule.html":{},"modules/BoardCommentModule.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"modules/BoardReactionModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"entities/BoardCommentEntity.html":{},"modules/BoardCommentModule.html":{},"injectables/BoardCommentRepository.html":{},"entities/BoardIdCounterEntity.html":{},"injectables/BoardIdCounterRepository.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"entities/BoardReactionEntity.html":{},"modules/BoardReactionModule.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardRepository.html":{},"dependencies.html":{}}}],["mongodbconfig",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["mongorepository",{"_index":336,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"injectables/BoardIdCounterRepository.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardRepository.html":{}}}],["more",{"_index":1446,"title":{},"body":{"index.html":{}}}],["mutation",{"_index":404,"title":{},"body":{"classes/BoardCommentResolver.html":{},"classes/BoardPasswordResolver.html":{},"classes/BoardResolver.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UserResolver.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["mutation(undefined",{"_index":390,"title":{},"body":{"classes/BoardCommentResolver.html":{},"classes/BoardPasswordResolver.html":{},"classes/BoardResolver.html":{},"classes/UserResolver.html":{}}}],["mutationcreateboardargs",{"_index":994,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["mutationcreateboardcommentargs",{"_index":995,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["mutationdeleteboardargs",{"_index":996,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["mutationdeleteboardcommentargs",{"_index":997,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["mutationispasswordcorrectargs",{"_index":998,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["mutationresolvers",{"_index":1067,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["mutationupdateboardargs",{"_index":999,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["mutationupdateboardcommentargs",{"_index":1000,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["myśliwiec",{"_index":1495,"title":{},"body":{"index.html":{}}}],["name",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"controllers/BoardCommentController.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"injectables/BoardIdCounterRepository.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"injectables/BoardService.html":{},"interfaces/DateTimeScalarConfig.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"injectables/TransformBoardInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"classes/UserSchema.html":{},"injectables/UserService.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["need",{"_index":1466,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1416,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1499,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1126,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["nestjs",{"_index":1443,"title":{},"body":{"index.html":{}}}],["nestjs/apollo",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BcryptModule.html":{},"injectables/BcryptService.html":{},"controllers/BoardCommentController.html":{},"modules/BoardCommentModule.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"injectables/BoardIdCounterRepository.html":{},"modules/BoardModule.html":{},"controllers/BoardPasswordController.html":{},"modules/BoardPasswordModule.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"modules/BoardReactionModule.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TransformBoardInterceptor.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1362,"title":{},"body":{"dependencies.html":{}}}],["nestjs/graphql",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"classes/BoardPaginationResponse.html":{},"classes/BoardPasswordResolver.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardInput.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{},"classes/UserIdSchema.html":{},"classes/UserResolver.html":{},"classes/UserSchema.html":{},"dependencies.html":{},"classes/loginUser.html":{},"classes/signUpUser.html":{}}}],["nestjs/jwt",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1179,"title":{},"body":{"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"classes/UpdateBoardDTO.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1365,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":1366,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/BoardCommentModule.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardIdCounterRepository.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"modules/BoardReactionModule.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardRepository.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"dependencies.html":{}}}],["never",{"_index":960,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["new",{"_index":176,"title":{},"body":{"injectables/BcryptService.html":{},"controllers/BoardCommentController.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"injectables/BoardPasswordService.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/UserRepository.html":{},"coverage.html":{}}}],["next",{"_index":477,"title":{},"body":{"injectables/BoardCommentService.html":{},"interfaces/DateTimeScalarConfig.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["next.handle",{"_index":1148,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["next.handle().pipe",{"_index":1149,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["nextresolverfn",{"_index":1048,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["node.js",{"_index":1408,"title":{},"body":{"index.html":{}}}],["none",{"_index":1231,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["nonnullable",{"_index":967,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["notfoundexception",{"_index":357,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"injectables/BoardPasswordService.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"injectables/UserRepository.html":{}}}],["notfoundexception('is",{"_index":1278,"title":{},"body":{"injectables/UserRepository.html":{}}}],["notfoundexception(`boardid",{"_index":380,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"injectables/BoardPasswordService.html":{},"injectables/BoardRepository.html":{}}}],["notfoundexception(`commentid",{"_index":504,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["notfoundexception(`commnetid",{"_index":502,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["now",{"_index":1146,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":1152,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["npm",{"_index":1421,"title":{},"body":{"index.html":{}}}],["null",{"_index":365,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"injectables/TransformBoardInterceptor.html":{},"miscellaneous/typealiases.html":{}}}],["nullable",{"_index":305,"title":{},"body":{"entities/BoardCommentEntity.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"entities/BoardEntity.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardInput.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{}}}],["number",{"_index":190,"title":{},"body":{"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"controllers/BoardCommentController.html":{},"entities/BoardCommentEntity.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"classes/BoardPaginationResponse.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"entities/BoardReactionEntity.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"injectables/BoardService.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/IDeleteResponse.html":{},"interfaces/IResponseInterceptor.html":{},"classes/PaginationDTO.html":{},"classes/PaginationResponseDTO.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UpdateBoardCommentInput.html":{},"entities/User.html":{},"classes/UserIdSchema.html":{},"classes/UserSchema.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["obj",{"_index":1047,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["object",{"_index":1173,"title":{},"body":{"injectables/TransformBoardInterceptor.html":{}}}],["object.assign(updateboarddb",{"_index":799,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["objectid",{"_index":284,"title":{},"body":{"entities/BoardCommentEntity.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentSchema.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"entities/BoardReactionEntity.html":{},"classes/BoardReactionSchema.html":{},"classes/BoardSchema.html":{}}}],["objectid(commentid",{"_index":373,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["objectid(id",{"_index":364,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["objectidcolumn",{"_index":285,"title":{},"body":{"entities/BoardCommentEntity.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"entities/BoardReactionEntity.html":{}}}],["objecttype",{"_index":208,"title":{},"body":{"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"classes/BoardPaginationResponse.html":{},"classes/BoardReactionSchema.html":{},"classes/BoardSchema.html":{},"classes/UserIdSchema.html":{},"classes/UserSchema.html":{}}}],["observable",{"_index":1125,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["offer",{"_index":1479,"title":{},"body":{"index.html":{}}}],["official",{"_index":1456,"title":{},"body":{"index.html":{}}}],["omit",{"_index":956,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["omittype",{"_index":209,"title":{},"body":{"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"classes/BoardCommentResponseDTO.html":{}}}],["omittype(boardcommentschema",{"_index":423,"title":{},"body":{"classes/BoardCommentResponseDTO.html":{}}}],["one",{"_index":1515,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["open",{"_index":1483,"title":{},"body":{"index.html":{}}}],["optional",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"controllers/BoardCommentController.html":{},"entities/BoardCommentEntity.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"entities/BoardEntity.html":{},"injectables/BoardIdCounterRepository.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"injectables/BoardService.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IDeleteResponse.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"injectables/TransformBoardInterceptor.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["order",{"_index":369,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["out",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BcryptModule.html":{},"modules/BoardCommentModule.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"modules/BoardReactionModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["output",{"_index":975,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["over",{"_index":517,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["overview",{"_index":1535,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":962,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["package",{"_index":1347,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":229,"title":{},"body":{"controllers/BoardCommentController.html":{},"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"injectables/BoardService.html":{},"interfaces/DateTimeScalarConfig.html":{},"classes/PaginationDTO.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["pagination",{"_index":635,"title":{},"body":{"classes/BoardPaginationResponse.html":{},"classes/BoardResolver.html":{},"coverage.html":{}}}],["paginationdto",{"_index":538,"title":{"classes/PaginationDTO.html":{}},"body":{"controllers/BoardController.html":{},"injectables/BoardService.html":{},"classes/PaginationDTO.html":{},"coverage.html":{}}}],["paginationresponsedto",{"_index":553,"title":{"classes/PaginationResponseDTO.html":{}},"body":{"controllers/BoardController.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"classes/PaginationResponseDTO.html":{},"coverage.html":{}}}],["param",{"_index":242,"title":{},"body":{"controllers/BoardCommentController.html":{},"controllers/BoardController.html":{},"controllers/BoardPasswordController.html":{},"controllers/BoardReactionController.html":{}}}],["param('boardid",{"_index":261,"title":{},"body":{"controllers/BoardCommentController.html":{},"controllers/BoardController.html":{},"controllers/BoardPasswordController.html":{}}}],["param('commentid",{"_index":267,"title":{},"body":{"controllers/BoardCommentController.html":{}}}],["parameters",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"controllers/BoardCommentController.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"injectables/BoardIdCounterRepository.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"injectables/BoardService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TransformBoardInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["parent",{"_index":500,"title":{},"body":{"injectables/BoardCommentService.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["parentcomment",{"_index":512,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["parentcomment.replies.push(comment",{"_index":515,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["parentid",{"_index":281,"title":{},"body":{"entities/BoardCommentEntity.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UpdateBoardCommentInput.html":{}}}],["parents",{"_index":1057,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"miscellaneous/typealiases.html":{}}}],["parenttype",{"_index":1062,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["parseintpipe",{"_index":246,"title":{},"body":{"controllers/BoardCommentController.html":{},"controllers/BoardController.html":{},"controllers/BoardPasswordController.html":{},"controllers/BoardReactionController.html":{}}}],["part",{"_index":1468,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":1178,"title":{},"body":{"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"classes/UpdateBoardDTO.html":{}}}],["partialtype(createboardcommentdto",{"_index":1176,"title":{},"body":{"classes/UpdateBoardCommentDTO.html":{}}}],["partialtype(createboarddto",{"_index":1183,"title":{},"body":{"classes/UpdateBoardDTO.html":{}}}],["passport",{"_index":1391,"title":{},"body":{"dependencies.html":{}}}],["passportmodule",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{}}}],["password",{"_index":164,"title":{},"body":{"injectables/BcryptService.html":{},"controllers/BoardCommentController.html":{},"entities/BoardCommentEntity.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"entities/BoardEntity.html":{},"classes/BoardPasswordDTO.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"entities/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["password.controller",{"_index":665,"title":{},"body":{"modules/BoardPasswordModule.html":{}}}],["password.controller.ts",{"_index":644,"title":{},"body":{"controllers/BoardPasswordController.html":{},"coverage.html":{}}}],["password.controller.ts:21",{"_index":650,"title":{},"body":{"controllers/BoardPasswordController.html":{}}}],["password.dto",{"_index":653,"title":{},"body":{"controllers/BoardPasswordController.html":{}}}],["password.dto.ts",{"_index":659,"title":{},"body":{"classes/BoardPasswordDTO.html":{},"coverage.html":{}}}],["password.dto.ts:6",{"_index":660,"title":{},"body":{"classes/BoardPasswordDTO.html":{}}}],["password.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["password.module.ts",{"_index":664,"title":{},"body":{"modules/BoardPasswordModule.html":{}}}],["password.resolver",{"_index":667,"title":{},"body":{"modules/BoardPasswordModule.html":{}}}],["password.resolver.ts",{"_index":669,"title":{},"body":{"classes/BoardPasswordResolver.html":{},"coverage.html":{}}}],["password.resolver.ts:5",{"_index":672,"title":{},"body":{"classes/BoardPasswordResolver.html":{}}}],["password.resolver.ts:9",{"_index":674,"title":{},"body":{"classes/BoardPasswordResolver.html":{}}}],["password.service",{"_index":652,"title":{},"body":{"controllers/BoardPasswordController.html":{},"modules/BoardPasswordModule.html":{},"classes/BoardPasswordResolver.html":{}}}],["password.service.ts",{"_index":677,"title":{},"body":{"injectables/BoardPasswordService.html":{},"coverage.html":{}}}],["password.service.ts:13",{"_index":680,"title":{},"body":{"injectables/BoardPasswordService.html":{}}}],["password.service.ts:7",{"_index":679,"title":{},"body":{"injectables/BoardPasswordService.html":{}}}],["password/board",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"controllers/BoardPasswordController.html":{},"modules/BoardPasswordModule.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"coverage.html":{}}}],["password/dto/board",{"_index":658,"title":{},"body":{"classes/BoardPasswordDTO.html":{},"coverage.html":{}}}],["path",{"_index":1102,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["pg",{"_index":1394,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":1449,"title":{},"body":{"index.html":{}}}],["port",{"_index":1340,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/BoardCommentController.html":{},"controllers/BoardController.html":{},"controllers/BoardPasswordController.html":{},"controllers/UserController.html":{}}}],["post('/login",{"_index":1221,"title":{},"body":{"controllers/UserController.html":{}}}],["post('/login')@httpcode(httpstatus.ok",{"_index":1203,"title":{},"body":{"controllers/UserController.html":{}}}],["post('/logout",{"_index":1239,"title":{},"body":{"controllers/UserController.html":{}}}],["post('/logout')@httpcode(httpstatus.ok",{"_index":1206,"title":{},"body":{"controllers/UserController.html":{}}}],["post('/signup",{"_index":1218,"title":{},"body":{"controllers/UserController.html":{}}}],["post('/signup')@httpcode(httpstatus.created",{"_index":1210,"title":{},"body":{"controllers/UserController.html":{}}}],["post()@responsemessage('board",{"_index":532,"title":{},"body":{"controllers/BoardController.html":{}}}],["post()@responsemessage('comment",{"_index":224,"title":{},"body":{"controllers/BoardCommentController.html":{}}}],["post()@responsemessage('password",{"_index":649,"title":{},"body":{"controllers/BoardPasswordController.html":{}}}],["postgresql",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{}}}],["postgresqlconfig",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":215,"title":{},"body":{"controllers/BoardCommentController.html":{},"controllers/BoardController.html":{},"controllers/BoardPasswordController.html":{},"controllers/BoardReactionController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":1188,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"injectables/BoardIdCounterRepository.html":{},"injectables/BoardPasswordService.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"injectables/TransformBoardInterceptor.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["process.env.host",{"_index":1555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.port",{"_index":1556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1429,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1407,"title":{},"body":{"index.html":{}}}],["project",{"_index":1418,"title":{},"body":{"index.html":{}}}],["promise",{"_index":165,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"injectables/BoardIdCounterRepository.html":{},"controllers/BoardPasswordController.html":{},"injectables/BoardPasswordService.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["properties",{"_index":183,"title":{"properties.html":{}},"body":{"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"entities/BoardCommentEntity.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"classes/BoardPaginationResponse.html":{},"classes/BoardPasswordDTO.html":{},"entities/BoardReactionEntity.html":{},"classes/BoardReactionSchema.html":{},"classes/BoardSchema.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/IDeleteResponse.html":{},"interfaces/IResolverClearResponse.html":{},"interfaces/IResponseInterceptor.html":{},"classes/PaginationDTO.html":{},"classes/PaginationResponseDTO.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{},"entities/User.html":{},"classes/UserIdSchema.html":{},"classes/UserSchema.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"properties.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BcryptModule.html":{},"modules/BoardCommentModule.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"modules/BoardReactionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["put",{"_index":247,"title":{},"body":{"controllers/BoardCommentController.html":{},"controllers/BoardController.html":{}}}],["put(':boardid",{"_index":567,"title":{},"body":{"controllers/BoardController.html":{}}}],["put(':boardid')@responsemessage('board",{"_index":546,"title":{},"body":{"controllers/BoardController.html":{}}}],["put(':commentid",{"_index":266,"title":{},"body":{"controllers/BoardCommentController.html":{}}}],["put(':commentid')@responsemessage('comment",{"_index":240,"title":{},"body":{"controllers/BoardCommentController.html":{}}}],["query",{"_index":248,"title":{},"body":{"controllers/BoardCommentController.html":{},"classes/BoardCommentResolver.html":{},"controllers/BoardController.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardResolver.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["query('page",{"_index":263,"title":{},"body":{"controllers/BoardCommentController.html":{}}}],["query(undefined",{"_index":395,"title":{},"body":{"classes/BoardCommentResolver.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardResolver.html":{}}}],["querygetboardargs",{"_index":1001,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["querygetboardcommentargs",{"_index":1002,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["querygetboardreactionargs",{"_index":1003,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["querygetboardsargs",{"_index":1004,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["queryresolvers",{"_index":1068,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["questions",{"_index":1447,"title":{},"body":{"index.html":{}}}],["rating",{"_index":282,"title":{},"body":{"entities/BoardCommentEntity.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentSchema.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UpdateBoardCommentInput.html":{}}}],["reaction",{"_index":690,"title":{},"body":{"controllers/BoardReactionController.html":{}}}],["reaction.controller",{"_index":711,"title":{},"body":{"modules/BoardReactionModule.html":{}}}],["reaction.controller.ts",{"_index":685,"title":{},"body":{"controllers/BoardReactionController.html":{},"coverage.html":{}}}],["reaction.controller.ts:19",{"_index":691,"title":{},"body":{"controllers/BoardReactionController.html":{}}}],["reaction.entity",{"_index":627,"title":{},"body":{"modules/BoardModule.html":{},"modules/BoardReactionModule.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardReactionService.html":{}}}],["reaction.entity.ts",{"_index":698,"title":{},"body":{"entities/BoardReactionEntity.html":{},"coverage.html":{}}}],["reaction.entity.ts:14",{"_index":700,"title":{},"body":{"entities/BoardReactionEntity.html":{}}}],["reaction.entity.ts:17",{"_index":701,"title":{},"body":{"entities/BoardReactionEntity.html":{}}}],["reaction.entity.ts:20",{"_index":705,"title":{},"body":{"entities/BoardReactionEntity.html":{}}}],["reaction.entity.ts:23",{"_index":704,"title":{},"body":{"entities/BoardReactionEntity.html":{}}}],["reaction.entity.ts:26",{"_index":702,"title":{},"body":{"entities/BoardReactionEntity.html":{}}}],["reaction.entity.ts:29",{"_index":706,"title":{},"body":{"entities/BoardReactionEntity.html":{}}}],["reaction.module",{"_index":629,"title":{},"body":{"modules/BoardModule.html":{}}}],["reaction.module.ts",{"_index":710,"title":{},"body":{"modules/BoardReactionModule.html":{}}}],["reaction.resolver",{"_index":714,"title":{},"body":{"modules/BoardReactionModule.html":{}}}],["reaction.resolver.ts",{"_index":741,"title":{},"body":{"classes/BoardReactionResolver.html":{},"coverage.html":{}}}],["reaction.resolver.ts:10",{"_index":744,"title":{},"body":{"classes/BoardReactionResolver.html":{}}}],["reaction.resolver.ts:6",{"_index":743,"title":{},"body":{"classes/BoardReactionResolver.html":{}}}],["reaction.schema",{"_index":746,"title":{},"body":{"classes/BoardReactionResolver.html":{}}}],["reaction.schema.ts",{"_index":749,"title":{},"body":{"classes/BoardReactionSchema.html":{},"coverage.html":{}}}],["reaction.schema.ts:11",{"_index":751,"title":{},"body":{"classes/BoardReactionSchema.html":{}}}],["reaction.schema.ts:14",{"_index":754,"title":{},"body":{"classes/BoardReactionSchema.html":{}}}],["reaction.schema.ts:17",{"_index":753,"title":{},"body":{"classes/BoardReactionSchema.html":{}}}],["reaction.schema.ts:20",{"_index":752,"title":{},"body":{"classes/BoardReactionSchema.html":{}}}],["reaction.schema.ts:23",{"_index":755,"title":{},"body":{"classes/BoardReactionSchema.html":{}}}],["reaction.schema.ts:8",{"_index":750,"title":{},"body":{"classes/BoardReactionSchema.html":{}}}],["reaction.service",{"_index":693,"title":{},"body":{"controllers/BoardReactionController.html":{},"modules/BoardReactionModule.html":{},"classes/BoardReactionResolver.html":{}}}],["reaction.service.ts",{"_index":756,"title":{},"body":{"injectables/BoardReactionService.html":{},"coverage.html":{}}}],["reaction.service.ts:11",{"_index":758,"title":{},"body":{"injectables/BoardReactionService.html":{}}}],["reaction.service.ts:6",{"_index":757,"title":{},"body":{"injectables/BoardReactionService.html":{}}}],["reaction/board",{"_index":628,"title":{},"body":{"modules/BoardModule.html":{},"controllers/BoardReactionController.html":{},"modules/BoardReactionModule.html":{},"classes/BoardReactionResolver.html":{},"injectables/BoardReactionService.html":{},"coverage.html":{}}}],["reaction/entity/board",{"_index":626,"title":{},"body":{"modules/BoardModule.html":{},"entities/BoardReactionEntity.html":{},"coverage.html":{}}}],["reaction/repository/boardreactionrepository",{"_index":630,"title":{},"body":{"modules/BoardModule.html":{},"injectables/BoardService.html":{}}}],["reaction/repository/boardreactionrepository.ts",{"_index":716,"title":{},"body":{"injectables/BoardReactionRepository.html":{},"coverage.html":{}}}],["reaction/repository/boardreactionrepository.ts:12",{"_index":729,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["reaction/repository/boardreactionrepository.ts:24",{"_index":727,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["reaction/repository/boardreactionrepository.ts:39",{"_index":725,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["reaction/repository/boardreactionrepository.ts:54",{"_index":723,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["reaction/repository/boardreactionrepository.ts:7",{"_index":722,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["reaction/schema/board",{"_index":748,"title":{},"body":{"classes/BoardReactionSchema.html":{},"coverage.html":{}}}],["read",{"_index":1491,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/BoardCommentController.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"injectables/BoardIdCounterRepository.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"injectables/BoardService.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["real",{"_index":1463,"title":{},"body":{"index.html":{}}}],["redis",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["reflect",{"_index":1397,"title":{},"body":{"dependencies.html":{}}}],["refreshtoken",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["remove",{"_index":219,"title":{},"body":{"controllers/BoardCommentController.html":{},"injectables/BoardService.html":{}}}],["remove(boardid",{"_index":233,"title":{},"body":{"controllers/BoardCommentController.html":{},"injectables/BoardService.html":{}}}],["removeboard",{"_index":526,"title":{},"body":{"controllers/BoardController.html":{}}}],["removeboard(boardid",{"_index":541,"title":{},"body":{"controllers/BoardController.html":{}}}],["removecomment",{"_index":441,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["removecomment(boardid",{"_index":458,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["removesensitivedata",{"_index":1163,"title":{},"body":{"injectables/TransformBoardInterceptor.html":{}}}],["removesensitivedata(item",{"_index":1165,"title":{},"body":{"injectables/TransformBoardInterceptor.html":{}}}],["replies",{"_index":420,"title":{},"body":{"classes/BoardCommentResponseDTO.html":{},"injectables/BoardCommentService.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["repository",{"_index":1262,"title":{},"body":{"injectables/UserRepository.html":{},"index.html":{}}}],["repository/board",{"_index":317,"title":{},"body":{"modules/BoardCommentModule.html":{},"injectables/BoardCommentService.html":{},"modules/BoardModule.html":{},"injectables/BoardService.html":{}}}],["repository/board.repository",{"_index":323,"title":{},"body":{"modules/BoardCommentModule.html":{},"injectables/BoardCommentService.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"injectables/BoardPasswordService.html":{},"injectables/BoardService.html":{}}}],["repository/boardreactionrepository",{"_index":712,"title":{},"body":{"modules/BoardReactionModule.html":{},"injectables/BoardReactionService.html":{}}}],["repository/user.repository",{"_index":1254,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["req",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["request",{"_index":1082,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["request.method",{"_index":1137,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["request.url",{"_index":1103,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["requirefields",{"_index":966,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["res",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["res.clearcookie('refreshtoken",{"_index":1241,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["res.cookie('refreshtoken",{"_index":1226,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["res.send(true",{"_index":1242,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["res.setheader('authorization",{"_index":1223,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["res.status(httpstatus.ok).json",{"_index":1237,"title":{},"body":{"controllers/UserController.html":{}}}],["reset",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BcryptModule.html":{},"modules/BoardCommentModule.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"modules/BoardReactionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolve",{"_index":1031,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["resolver",{"_index":405,"title":{},"body":{"classes/BoardCommentResolver.html":{},"classes/BoardPasswordResolver.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardResolver.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UserResolver.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["resolverfn",{"_index":1032,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["resolvers",{"_index":1055,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{}}}],["resolversparenttypes",{"_index":1058,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["resolverstypes",{"_index":1056,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["resolvertypewrapper",{"_index":1029,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["resolverwithresolve",{"_index":1030,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["resources",{"_index":1439,"title":{},"body":{"index.html":{}}}],["response",{"_index":1083,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["response.dto",{"_index":360,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{}}}],["response.dto.ts",{"_index":419,"title":{},"body":{"classes/BoardCommentResponseDTO.html":{},"classes/PaginationResponseDTO.html":{},"coverage.html":{}}}],["response.dto.ts:10",{"_index":422,"title":{},"body":{"classes/BoardCommentResponseDTO.html":{}}}],["response.dto.ts:4",{"_index":1160,"title":{},"body":{"classes/PaginationResponseDTO.html":{}}}],["response.dto.ts:5",{"_index":1161,"title":{},"body":{"classes/PaginationResponseDTO.html":{}}}],["response.schema",{"_index":820,"title":{},"body":{"classes/BoardResolver.html":{}}}],["response.schema.ts",{"_index":636,"title":{},"body":{"classes/BoardPaginationResponse.html":{},"coverage.html":{}}}],["response.schema.ts:11",{"_index":641,"title":{},"body":{"classes/BoardPaginationResponse.html":{}}}],["response.schema.ts:8",{"_index":640,"title":{},"body":{"classes/BoardPaginationResponse.html":{}}}],["response.status(status).json",{"_index":1098,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["responseboard",{"_index":869,"title":{},"body":{"injectables/BoardService.html":{}}}],["responseboardcomment",{"_index":873,"title":{},"body":{"injectables/BoardService.html":{}}}],["responseboardreaction",{"_index":871,"title":{},"body":{"injectables/BoardService.html":{}}}],["responsemessage",{"_index":256,"title":{},"body":{"controllers/BoardCommentController.html":{},"controllers/BoardController.html":{},"controllers/BoardPasswordController.html":{},"controllers/BoardReactionController.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["responsemessage('board",{"_index":560,"title":{},"body":{"controllers/BoardController.html":{}}}],["responsemessage('comment",{"_index":260,"title":{},"body":{"controllers/BoardCommentController.html":{}}}],["responsemessage('password",{"_index":655,"title":{},"body":{"controllers/BoardPasswordController.html":{}}}],["responsemessage(`board",{"_index":695,"title":{},"body":{"controllers/BoardReactionController.html":{}}}],["responsemessage['message",{"_index":1105,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["rest",{"_index":483,"title":{},"body":{"injectables/BoardCommentService.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["restboardcomments",{"_index":473,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["restupdateboardcomment",{"_index":268,"title":{},"body":{"controllers/BoardCommentController.html":{},"classes/BoardCommentResolver.html":{}}}],["result",{"_index":637,"title":{},"body":{"classes/BoardPaginationResponse.html":{},"injectables/BoardRepository.html":{},"interfaces/DateTimeScalarConfig.html":{},"classes/PaginationResponseDTO.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"injectables/TransformBoardInterceptor.html":{},"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["result.accesstoken",{"_index":1225,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["result.refreshtoken",{"_index":1227,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["result.user.id",{"_index":1238,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["results",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BcryptModule.html":{},"injectables/BcryptService.html":{},"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"controllers/BoardCommentController.html":{},"entities/BoardCommentEntity.html":{},"modules/BoardCommentModule.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"injectables/BoardIdCounterRepository.html":{},"modules/BoardModule.html":{},"classes/BoardPaginationResponse.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordDTO.html":{},"modules/BoardPasswordModule.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"entities/BoardReactionEntity.html":{},"modules/BoardReactionModule.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"injectables/BoardService.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IDeleteResponse.html":{},"interfaces/IResolverClearResponse.html":{},"interfaces/IResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"classes/PaginationDTO.html":{},"classes/PaginationResponseDTO.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"injectables/TransformBoardInterceptor.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardDTO.html":{},"classes/UpdateBoardInput.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserIdSchema.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"classes/UserSchema.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"controllers/BoardCommentController.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"injectables/BoardIdCounterRepository.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"injectables/BoardService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TransformBoardInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["returndocument",{"_index":614,"title":{},"body":{"injectables/BoardIdCounterRepository.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"controllers/BoardCommentController.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"injectables/BoardIdCounterRepository.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"injectables/BoardService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TransformBoardInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["role",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["run",{"_index":1423,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1128,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/TransformBoardInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1130,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["s3",{"_index":1352,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":171,"title":{},"body":{"injectables/BcryptService.html":{}}}],["samesite",{"_index":1230,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["sanitizedresult",{"_index":1169,"title":{},"body":{"injectables/TransformBoardInterceptor.html":{}}}],["save",{"_index":790,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["saveboard",{"_index":764,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["saveboard(board",{"_index":779,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["savecomment",{"_index":333,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["savecomment(comment",{"_index":350,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["scalable",{"_index":1412,"title":{},"body":{"index.html":{}}}],["scalars",{"_index":970,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["scalars['boolean']['output",{"_index":993,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["scalars['datetime']['output",{"_index":991,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["scalars['id']['output",{"_index":990,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["scalars['int']['input",{"_index":987,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["scalars['int']['output",{"_index":989,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["scalars['string']['input",{"_index":986,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["scalars['string']['output",{"_index":988,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["schema",{"_index":1053,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"miscellaneous/typealiases.html":{}}}],["schema/board",{"_index":407,"title":{},"body":{"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardResolver.html":{}}}],["schema/board.schema",{"_index":819,"title":{},"body":{"classes/BoardResolver.html":{}}}],["schema/create",{"_index":409,"title":{},"body":{"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"classes/BoardResolver.html":{},"injectables/BoardService.html":{}}}],["schema/login.schema",{"_index":1293,"title":{},"body":{"classes/UserResolver.html":{}}}],["schema/signup.schema",{"_index":1292,"title":{},"body":{"classes/UserResolver.html":{}}}],["schema/update",{"_index":411,"title":{},"body":{"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"classes/BoardResolver.html":{}}}],["schema/user",{"_index":1294,"title":{},"body":{"classes/UserResolver.html":{}}}],["schema/user.schema",{"_index":1291,"title":{},"body":{"classes/UserResolver.html":{}}}],["sdk",{"_index":1370,"title":{},"body":{"dependencies.html":{}}}],["sdk/client",{"_index":1351,"title":{},"body":{"dependencies.html":{}}}],["secret",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["secure",{"_index":1229,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["select",{"_index":794,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["server",{"_index":1377,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["session",{"_index":1385,"title":{},"body":{"dependencies.html":{}}}],["setmetadata('response",{"_index":1557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1419,"title":{},"body":{"index.html":{}}}],["side",{"_index":1413,"title":{},"body":{"index.html":{}}}],["signup",{"_index":1200,"title":{},"body":{"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["signup(@args('signupuser",{"_index":1296,"title":{},"body":{"classes/UserResolver.html":{}}}],["signup(@body",{"_index":1219,"title":{},"body":{"controllers/UserController.html":{}}}],["signup(signupdto",{"_index":1208,"title":{},"body":{"controllers/UserController.html":{}}}],["signup(signupuser",{"_index":1287,"title":{},"body":{"classes/UserResolver.html":{}}}],["signupdto",{"_index":1209,"title":{"classes/signUpDTO.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/signUpDTO.html":{}}}],["signupdto.password",{"_index":1311,"title":{},"body":{"injectables/UserService.html":{}}}],["signupuser",{"_index":1288,"title":{"classes/signUpUser.html":{}},"body":{"classes/UserResolver.html":{},"coverage.html":{},"classes/signUpUser.html":{}}}],["skip",{"_index":793,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BcryptModule.html":{},"injectables/BcryptService.html":{},"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"controllers/BoardCommentController.html":{},"entities/BoardCommentEntity.html":{},"modules/BoardCommentModule.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"injectables/BoardIdCounterRepository.html":{},"modules/BoardModule.html":{},"classes/BoardPaginationResponse.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordDTO.html":{},"modules/BoardPasswordModule.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"entities/BoardReactionEntity.html":{},"modules/BoardReactionModule.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"injectables/BoardService.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IDeleteResponse.html":{},"interfaces/IResolverClearResponse.html":{},"interfaces/IResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"classes/PaginationDTO.html":{},"classes/PaginationResponseDTO.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"injectables/TransformBoardInterceptor.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardDTO.html":{},"classes/UpdateBoardInput.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserIdSchema.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"classes/UserSchema.html":{},"injectables/UserService.html":{},"index.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["special",{"_index":1519,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["sponsors",{"_index":1486,"title":{},"body":{"index.html":{}}}],["src/.../graphql.ts",{"_index":1551,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":1404,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../response",{"_index":1554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:10",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":99,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":100,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.module",{"_index":1252,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":1310,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/auth.service.ts",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:6",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/bcrypt/bcrypt.module",{"_index":313,"title":{},"body":{"modules/BoardCommentModule.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"modules/UserModule.html":{}}}],["src/bcrypt/bcrypt.module.ts",{"_index":157,"title":{},"body":{"modules/BcryptModule.html":{}}}],["src/bcrypt/bcrypt.service",{"_index":465,"title":{},"body":{"injectables/BoardCommentService.html":{},"injectables/BoardPasswordService.html":{},"injectables/BoardService.html":{},"injectables/UserService.html":{}}}],["src/bcrypt/bcrypt.service.ts",{"_index":159,"title":{},"body":{"injectables/BcryptService.html":{},"coverage.html":{}}}],["src/bcrypt/bcrypt.service.ts:13",{"_index":168,"title":{},"body":{"injectables/BcryptService.html":{}}}],["src/bcrypt/bcrypt.service.ts:7",{"_index":163,"title":{},"body":{"injectables/BcryptService.html":{}}}],["src/board/board",{"_index":213,"title":{},"body":{"controllers/BoardCommentController.html":{},"entities/BoardCommentEntity.html":{},"modules/BoardCommentModule.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordDTO.html":{},"modules/BoardPasswordModule.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"entities/BoardReactionEntity.html":{},"modules/BoardReactionModule.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"injectables/BoardReactionService.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"coverage.html":{}}}],["src/board/board.controller.ts",{"_index":520,"title":{},"body":{"controllers/BoardController.html":{},"coverage.html":{}}}],["src/board/board.controller.ts:31",{"_index":533,"title":{},"body":{"controllers/BoardController.html":{}}}],["src/board/board.controller.ts:38",{"_index":540,"title":{},"body":{"controllers/BoardController.html":{}}}],["src/board/board.controller.ts:45",{"_index":536,"title":{},"body":{"controllers/BoardController.html":{}}}],["src/board/board.controller.ts:54",{"_index":547,"title":{},"body":{"controllers/BoardController.html":{}}}],["src/board/board.controller.ts:64",{"_index":543,"title":{},"body":{"controllers/BoardController.html":{}}}],["src/board/board.controller.ts:73",{"_index":529,"title":{},"body":{"controllers/BoardController.html":{}}}],["src/board/board.module.ts",{"_index":622,"title":{},"body":{"modules/BoardModule.html":{}}}],["src/board/board.resolver.ts",{"_index":806,"title":{},"body":{"classes/BoardResolver.html":{},"coverage.html":{}}}],["src/board/board.resolver.ts:13",{"_index":815,"title":{},"body":{"classes/BoardResolver.html":{}}}],["src/board/board.resolver.ts:21",{"_index":813,"title":{},"body":{"classes/BoardResolver.html":{}}}],["src/board/board.resolver.ts:26",{"_index":811,"title":{},"body":{"classes/BoardResolver.html":{}}}],["src/board/board.resolver.ts:34",{"_index":818,"title":{},"body":{"classes/BoardResolver.html":{}}}],["src/board/board.resolver.ts:42",{"_index":812,"title":{},"body":{"classes/BoardResolver.html":{}}}],["src/board/board.resolver.ts:47",{"_index":809,"title":{},"body":{"classes/BoardResolver.html":{}}}],["src/board/board.resolver.ts:9",{"_index":808,"title":{},"body":{"classes/BoardResolver.html":{}}}],["src/board/board.service.ts",{"_index":839,"title":{},"body":{"injectables/BoardService.html":{},"coverage.html":{}}}],["src/board/board.service.ts:105",{"_index":846,"title":{},"body":{"injectables/BoardService.html":{}}}],["src/board/board.service.ts:20",{"_index":844,"title":{},"body":{"injectables/BoardService.html":{}}}],["src/board/board.service.ts:28",{"_index":849,"title":{},"body":{"injectables/BoardService.html":{}}}],["src/board/board.service.ts:49",{"_index":851,"title":{},"body":{"injectables/BoardService.html":{}}}],["src/board/board.service.ts:57",{"_index":853,"title":{},"body":{"injectables/BoardService.html":{}}}],["src/board/board.service.ts:61",{"_index":854,"title":{},"body":{"injectables/BoardService.html":{}}}],["src/board/board.service.ts:65",{"_index":857,"title":{},"body":{"injectables/BoardService.html":{}}}],["src/board/board.service.ts:72",{"_index":856,"title":{},"body":{"injectables/BoardService.html":{}}}],["src/board/board.service.ts:79",{"_index":855,"title":{},"body":{"injectables/BoardService.html":{}}}],["src/board/board.service.ts:95",{"_index":847,"title":{},"body":{"injectables/BoardService.html":{}}}],["src/board/dto/board",{"_index":181,"title":{},"body":{"classes/BoardAddressDTO.html":{},"coverage.html":{}}}],["src/board/dto/create",{"_index":909,"title":{},"body":{"classes/CreateBoardDTO.html":{},"coverage.html":{}}}],["src/board/dto/pagination",{"_index":1159,"title":{},"body":{"classes/PaginationResponseDTO.html":{},"coverage.html":{}}}],["src/board/dto/pagination.dto.ts",{"_index":1153,"title":{},"body":{"classes/PaginationDTO.html":{},"coverage.html":{}}}],["src/board/dto/pagination.dto.ts:10",{"_index":1155,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["src/board/dto/pagination.dto.ts:16",{"_index":1156,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["src/board/dto/update",{"_index":1182,"title":{},"body":{"classes/UpdateBoardDTO.html":{},"coverage.html":{}}}],["src/board/entity/board",{"_index":593,"title":{},"body":{"entities/BoardIdCounterEntity.html":{},"coverage.html":{}}}],["src/board/entity/board.entity.ts",{"_index":572,"title":{},"body":{"entities/BoardEntity.html":{},"coverage.html":{}}}],["src/board/entity/board.entity.ts:16",{"_index":576,"title":{},"body":{"entities/BoardEntity.html":{}}}],["src/board/entity/board.entity.ts:19",{"_index":577,"title":{},"body":{"entities/BoardEntity.html":{}}}],["src/board/entity/board.entity.ts:23",{"_index":586,"title":{},"body":{"entities/BoardEntity.html":{}}}],["src/board/entity/board.entity.ts:26",{"_index":587,"title":{},"body":{"entities/BoardEntity.html":{}}}],["src/board/entity/board.entity.ts:29",{"_index":582,"title":{},"body":{"entities/BoardEntity.html":{}}}],["src/board/entity/board.entity.ts:32",{"_index":585,"title":{},"body":{"entities/BoardEntity.html":{}}}],["src/board/entity/board.entity.ts:35",{"_index":589,"title":{},"body":{"entities/BoardEntity.html":{}}}],["src/board/entity/board.entity.ts:38",{"_index":580,"title":{},"body":{"entities/BoardEntity.html":{}}}],["src/board/entity/board.entity.ts:41",{"_index":581,"title":{},"body":{"entities/BoardEntity.html":{}}}],["src/board/entity/board.entity.ts:44",{"_index":583,"title":{},"body":{"entities/BoardEntity.html":{}}}],["src/board/entity/board.entity.ts:47",{"_index":588,"title":{},"body":{"entities/BoardEntity.html":{}}}],["src/board/repository/board",{"_index":601,"title":{},"body":{"injectables/BoardIdCounterRepository.html":{},"coverage.html":{}}}],["src/board/repository/board.repository.ts",{"_index":760,"title":{},"body":{"injectables/BoardRepository.html":{},"coverage.html":{}}}],["src/board/repository/board.repository.ts:112",{"_index":773,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["src/board/repository/board.repository.ts:125",{"_index":768,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["src/board/repository/board.repository.ts:129",{"_index":769,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["src/board/repository/board.repository.ts:16",{"_index":767,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["src/board/repository/board.repository.ts:22",{"_index":771,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["src/board/repository/board.repository.ts:44",{"_index":780,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["src/board/repository/board.repository.ts:55",{"_index":776,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["src/board/repository/board.repository.ts:68",{"_index":778,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["src/board/repository/board.repository.ts:80",{"_index":784,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["src/board/repository/board.repository.ts:99",{"_index":782,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["src/board/schema/board",{"_index":198,"title":{},"body":{"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"classes/BoardPaginationResponse.html":{},"coverage.html":{}}}],["src/board/schema/board.schema.ts",{"_index":828,"title":{},"body":{"classes/BoardSchema.html":{},"coverage.html":{}}}],["src/board/schema/board.schema.ts:12",{"_index":830,"title":{},"body":{"classes/BoardSchema.html":{}}}],["src/board/schema/board.schema.ts:15",{"_index":836,"title":{},"body":{"classes/BoardSchema.html":{}}}],["src/board/schema/board.schema.ts:18",{"_index":833,"title":{},"body":{"classes/BoardSchema.html":{}}}],["src/board/schema/board.schema.ts:21",{"_index":835,"title":{},"body":{"classes/BoardSchema.html":{}}}],["src/board/schema/board.schema.ts:24",{"_index":838,"title":{},"body":{"classes/BoardSchema.html":{}}}],["src/board/schema/board.schema.ts:27",{"_index":831,"title":{},"body":{"classes/BoardSchema.html":{}}}],["src/board/schema/board.schema.ts:30",{"_index":832,"title":{},"body":{"classes/BoardSchema.html":{}}}],["src/board/schema/board.schema.ts:33",{"_index":834,"title":{},"body":{"classes/BoardSchema.html":{}}}],["src/board/schema/board.schema.ts:36",{"_index":837,"title":{},"body":{"classes/BoardSchema.html":{}}}],["src/board/schema/board.schema.ts:9",{"_index":829,"title":{},"body":{"classes/BoardSchema.html":{}}}],["src/board/schema/create",{"_index":928,"title":{},"body":{"classes/CreateBoardInput.html":{},"coverage.html":{}}}],["src/board/schema/update",{"_index":1184,"title":{},"body":{"classes/UpdateBoardInput.html":{},"coverage.html":{}}}],["src/common/decorators/response",{"_index":1333,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/filters/http",{"_index":1070,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/interceptors/logging.interceptor.ts",{"_index":1119,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/logging.interceptor.ts:15",{"_index":1124,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/common/interceptors/transform",{"_index":556,"title":{},"body":{"controllers/BoardController.html":{},"injectables/TransformBoardInterceptor.html":{},"coverage.html":{}}}],["src/common/types/interceptor.interface.ts",{"_index":1112,"title":{},"body":{"interfaces/IDeleteResponse.html":{},"interfaces/IResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/types/resolver.interface.ts",{"_index":1116,"title":{},"body":{"interfaces/IResolverClearResponse.html":{},"coverage.html":{}}}],["src/generated/graphql.ts",{"_index":943,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/graphql/schema.gql",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["src/main.ts",{"_index":1338,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/user/dto/login.dto.ts",{"_index":1341,"title":{},"body":{"coverage.html":{},"classes/loginDTO.html":{}}}],["src/user/dto/login.dto.ts:14",{"_index":1502,"title":{},"body":{"classes/loginDTO.html":{}}}],["src/user/dto/login.dto.ts:27",{"_index":1521,"title":{},"body":{"classes/loginDTO.html":{}}}],["src/user/dto/signup.dto.ts",{"_index":1342,"title":{},"body":{"coverage.html":{},"classes/signUpDTO.html":{}}}],["src/user/dto/signup.dto.ts:13",{"_index":1543,"title":{},"body":{"classes/signUpDTO.html":{}}}],["src/user/dto/signup.dto.ts:18",{"_index":1542,"title":{},"body":{"classes/signUpDTO.html":{}}}],["src/user/dto/signup.dto.ts:31",{"_index":1544,"title":{},"body":{"classes/signUpDTO.html":{}}}],["src/user/entity/user.entity.ts",{"_index":1186,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entity/user.entity.ts:15",{"_index":1189,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:18",{"_index":1190,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:21",{"_index":1187,"title":{},"body":{"entities/User.html":{}}}],["src/user/entity/user.entity.ts:25",{"_index":1191,"title":{},"body":{"entities/User.html":{}}}],["src/user/repository/user.repository.ts",{"_index":1258,"title":{},"body":{"injectables/UserRepository.html":{},"coverage.html":{}}}],["src/user/repository/user.repository.ts:13",{"_index":1263,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/user/repository/user.repository.ts:19",{"_index":1265,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/user/repository/user.repository.ts:32",{"_index":1267,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/user/schema/login.schema.ts",{"_index":1343,"title":{},"body":{"coverage.html":{},"classes/loginUser.html":{}}}],["src/user/schema/login.schema.ts:17",{"_index":1530,"title":{},"body":{"classes/loginUser.html":{}}}],["src/user/schema/login.schema.ts:31",{"_index":1531,"title":{},"body":{"classes/loginUser.html":{}}}],["src/user/schema/signup.schema.ts",{"_index":1344,"title":{},"body":{"coverage.html":{},"classes/signUpUser.html":{}}}],["src/user/schema/signup.schema.ts:16",{"_index":1547,"title":{},"body":{"classes/signUpUser.html":{}}}],["src/user/schema/signup.schema.ts:22",{"_index":1545,"title":{},"body":{"classes/signUpUser.html":{}}}],["src/user/schema/signup.schema.ts:36",{"_index":1548,"title":{},"body":{"classes/signUpUser.html":{}}}],["src/user/schema/user",{"_index":1244,"title":{},"body":{"classes/UserIdSchema.html":{},"coverage.html":{}}}],["src/user/schema/user.schema.ts",{"_index":1302,"title":{},"body":{"classes/UserSchema.html":{},"coverage.html":{}}}],["src/user/schema/user.schema.ts:12",{"_index":1303,"title":{},"body":{"classes/UserSchema.html":{}}}],["src/user/schema/user.schema.ts:6",{"_index":1304,"title":{},"body":{"classes/UserSchema.html":{}}}],["src/user/schema/user.schema.ts:9",{"_index":1305,"title":{},"body":{"classes/UserSchema.html":{}}}],["src/user/user.controller.ts",{"_index":1196,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:21",{"_index":1211,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:27",{"_index":1204,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:46",{"_index":1207,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":1251,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.resolver.ts",{"_index":1280,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{}}}],["src/user/user.resolver.ts:11",{"_index":1282,"title":{},"body":{"classes/UserResolver.html":{}}}],["src/user/user.resolver.ts:15",{"_index":1289,"title":{},"body":{"classes/UserResolver.html":{}}}],["src/user/user.resolver.ts:20",{"_index":1285,"title":{},"body":{"classes/UserResolver.html":{}}}],["src/user/user.resolver.ts:39",{"_index":1286,"title":{},"body":{"classes/UserResolver.html":{}}}],["src/user/user.service.ts",{"_index":1306,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:10",{"_index":1307,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:17",{"_index":1308,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:27",{"_index":1309,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":1425,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1428,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1430,"title":{},"body":{"index.html":{}}}],["started",{"_index":1406,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1417,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1322,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":1092,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":1099,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IDeleteResponse.html":{},"interfaces/IResponseInterceptor.html":{}}}],["stay",{"_index":1471,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"controllers/BoardCommentController.html":{},"entities/BoardCommentEntity.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"injectables/BoardIdCounterRepository.html":{},"classes/BoardPasswordDTO.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"classes/BoardSchema.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/IDeleteResponse.html":{},"interfaces/IResponseInterceptor.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"classes/UserSchema.html":{},"injectables/UserService.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["subkey",{"_index":957,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["subscribe",{"_index":1041,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["subscriptionobject",{"_index":1043,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["subscriptionresolvefn",{"_index":1039,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["subscriptionresolver",{"_index":1044,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["subscriptionresolverobject",{"_index":1042,"title":{"interfaces/SubscriptionResolverObject.html":{}},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["subscriptionsubscribefn",{"_index":1037,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["subscriptionsubscriberobject",{"_index":1040,"title":{"interfaces/SubscriptionSubscriberObject.html":{}},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["sucess",{"_index":1117,"title":{},"body":{"interfaces/IResolverClearResponse.html":{}}}],["such",{"_index":979,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["support",{"_index":1448,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1533,"title":{},"body":{"modules.html":{}}}],["t",{"_index":949,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/IDeleteResponse.html":{},"interfaces/IResponseInterceptor.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"miscellaneous/typealiases.html":{}}}],["t[k",{"_index":954,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["t[p",{"_index":965,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["table",{"_index":1346,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1345,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":775,"title":{},"body":{"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"injectables/BoardService.html":{},"interfaces/DateTimeScalarConfig.html":{},"classes/PaginationDTO.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["tap",{"_index":1129,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["targs",{"_index":1034,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["tcontext",{"_index":1035,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["test",{"_index":1433,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":1436,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1435,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1431,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1485,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.issuelogintoken(logindto.email",{"_index":1318,"title":{},"body":{"injectables/UserService.html":{}}}],["this.bcryptservice.transformpassword",{"_index":468,"title":{},"body":{"injectables/BoardCommentService.html":{},"injectables/BoardService.html":{},"injectables/UserService.html":{}}}],["this.bcryptservice.validatepassword",{"_index":1314,"title":{},"body":{"injectables/UserService.html":{}}}],["this.bcryptservice.validatepassword(password",{"_index":505,"title":{},"body":{"injectables/BoardCommentService.html":{},"injectables/BoardPasswordService.html":{}}}],["this.boardcommentrepository.clear",{"_index":382,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["this.boardcommentrepository.clearcomment",{"_index":877,"title":{},"body":{"injectables/BoardService.html":{}}}],["this.boardcommentrepository.create",{"_index":366,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["this.boardcommentrepository.createcomment(boardid",{"_index":470,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["this.boardcommentrepository.delete",{"_index":379,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["this.boardcommentrepository.deleteallcomment(boardid",{"_index":874,"title":{},"body":{"injectables/BoardService.html":{}}}],["this.boardcommentrepository.deletecomment(commentid",{"_index":496,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["this.boardcommentrepository.find",{"_index":368,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["this.boardcommentrepository.findallcomment(boardid",{"_index":472,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["this.boardcommentrepository.findcomment(commentid",{"_index":503,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["this.boardcommentrepository.findcomment(parentid",{"_index":499,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["this.boardcommentrepository.findone",{"_index":363,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["this.boardcommentrepository.findoneby",{"_index":376,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["this.boardcommentrepository.remove(deletecomment",{"_index":378,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["this.boardcommentrepository.save(comment",{"_index":367,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["this.boardcommentrepository.savecomment(comment",{"_index":471,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["this.boardcommentrepository.update",{"_index":372,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["this.boardcommentrepository.updatecomment",{"_index":495,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["this.boardcommentservice.createcomment",{"_index":262,"title":{},"body":{"controllers/BoardCommentController.html":{},"classes/BoardCommentResolver.html":{}}}],["this.boardcommentservice.findallcomment(boardid",{"_index":265,"title":{},"body":{"controllers/BoardCommentController.html":{},"classes/BoardCommentResolver.html":{}}}],["this.boardcommentservice.removecomment(boardid",{"_index":271,"title":{},"body":{"controllers/BoardCommentController.html":{},"classes/BoardCommentResolver.html":{}}}],["this.boardcommentservice.updatecomment",{"_index":269,"title":{},"body":{"controllers/BoardCommentController.html":{},"classes/BoardCommentResolver.html":{}}}],["this.boardidcounterrepository.findoneandupdate",{"_index":611,"title":{},"body":{"injectables/BoardIdCounterRepository.html":{}}}],["this.boardidcounterrepository.incrementboardid('board",{"_index":860,"title":{},"body":{"injectables/BoardService.html":{}}}],["this.boardpasswordservice.validateboarddata",{"_index":656,"title":{},"body":{"controllers/BoardPasswordController.html":{}}}],["this.boardpasswordservice.validateboarddata(boardid",{"_index":676,"title":{},"body":{"classes/BoardPasswordResolver.html":{}}}],["this.boardreactionrepository.clear",{"_index":740,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["this.boardreactionrepository.clearboardreaction",{"_index":876,"title":{},"body":{"injectables/BoardService.html":{}}}],["this.boardreactionrepository.create",{"_index":733,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["this.boardreactionrepository.deleteboardreaction(boardid",{"_index":872,"title":{},"body":{"injectables/BoardService.html":{}}}],["this.boardreactionrepository.deleteone",{"_index":738,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["this.boardreactionrepository.findboardreaction(boardid",{"_index":759,"title":{},"body":{"injectables/BoardReactionService.html":{}}}],["this.boardreactionrepository.findoneby",{"_index":736,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["this.boardreactionrepository.initializatedboardreaction(boardid",{"_index":862,"title":{},"body":{"injectables/BoardService.html":{}}}],["this.boardreactionrepository.save(boardreaction",{"_index":734,"title":{},"body":{"injectables/BoardReactionRepository.html":{}}}],["this.boardreactionservice.getboardreaction(boardid",{"_index":697,"title":{},"body":{"controllers/BoardReactionController.html":{},"classes/BoardReactionResolver.html":{}}}],["this.boardrepository.clear",{"_index":804,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["this.boardrepository.clearboard",{"_index":875,"title":{},"body":{"injectables/BoardService.html":{}}}],["this.boardrepository.count",{"_index":805,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["this.boardrepository.countboard",{"_index":866,"title":{},"body":{"injectables/BoardService.html":{}}}],["this.boardrepository.create",{"_index":786,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["this.boardrepository.createboard",{"_index":859,"title":{},"body":{"injectables/BoardService.html":{}}}],["this.boardrepository.deleteboard(boardid",{"_index":870,"title":{},"body":{"injectables/BoardService.html":{}}}],["this.boardrepository.deleteone",{"_index":802,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["this.boardrepository.findallboard(page",{"_index":865,"title":{},"body":{"injectables/BoardService.html":{}}}],["this.boardrepository.findandcount",{"_index":792,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["this.boardrepository.findboard(boardid",{"_index":682,"title":{},"body":{"injectables/BoardPasswordService.html":{},"injectables/BoardService.html":{}}}],["this.boardrepository.findone",{"_index":795,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["this.boardrepository.findoneby",{"_index":797,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["this.boardrepository.save(board",{"_index":788,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["this.boardrepository.saveboard(board",{"_index":863,"title":{},"body":{"injectables/BoardService.html":{}}}],["this.boardrepository.update",{"_index":796,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["this.boardrepository.updateall(boardid",{"_index":868,"title":{},"body":{"injectables/BoardService.html":{}}}],["this.boardrepository.updateone(boardid",{"_index":867,"title":{},"body":{"injectables/BoardService.html":{}}}],["this.boardrepsitory.findboard(boardid",{"_index":498,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["this.boardservice.clear",{"_index":571,"title":{},"body":{"controllers/BoardController.html":{},"classes/BoardResolver.html":{}}}],["this.boardservice.create(createboard",{"_index":825,"title":{},"body":{"classes/BoardResolver.html":{}}}],["this.boardservice.create(createboarddto",{"_index":562,"title":{},"body":{"controllers/BoardController.html":{}}}],["this.boardservice.findall",{"_index":822,"title":{},"body":{"classes/BoardResolver.html":{}}}],["this.boardservice.findall(query",{"_index":564,"title":{},"body":{"controllers/BoardController.html":{}}}],["this.boardservice.findone(boardid",{"_index":566,"title":{},"body":{"controllers/BoardController.html":{},"classes/BoardResolver.html":{}}}],["this.boardservice.remove(boardid",{"_index":570,"title":{},"body":{"controllers/BoardController.html":{},"classes/BoardResolver.html":{}}}],["this.boardservice.updateall(boardid",{"_index":568,"title":{},"body":{"controllers/BoardController.html":{},"classes/BoardResolver.html":{}}}],["this.checkboardentitycount(page",{"_index":864,"title":{},"body":{"injectables/BoardService.html":{}}}],["this.configservice.get('jwt_access_expire')}s",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_access_secret",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_expire')}s",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.findboard(boardid",{"_index":798,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["this.findcomment(parentid",{"_index":377,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["this.isexistboard(boardid",{"_index":466,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["this.isexistparentcomment(parentid",{"_index":467,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["this.isexistparentcomment(updateboardcommentdto.parentid",{"_index":493,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["this.isinvalidpage(commentboardlist.length",{"_index":488,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["this.jwtservice.signasync",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.makecommentmap(restboardcomments",{"_index":486,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["this.removesensitivedata(data",{"_index":1174,"title":{},"body":{"injectables/TransformBoardInterceptor.html":{}}}],["this.removesensitivedata(item",{"_index":1171,"title":{},"body":{"injectables/TransformBoardInterceptor.html":{}}}],["this.saveboard(updateboarddb",{"_index":800,"title":{},"body":{"injectables/BoardRepository.html":{}}}],["this.userrepository.create(signupdto",{"_index":1271,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.userrepository.createuser",{"_index":1312,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby",{"_index":1277,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.userrepository.finduser(logindto.email",{"_index":1313,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(user",{"_index":1273,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.userservice.createuser(signupdto",{"_index":1220,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.createuser(signupuser",{"_index":1297,"title":{},"body":{"classes/UserResolver.html":{}}}],["this.userservice.login(logindto",{"_index":1222,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.login(loginuser",{"_index":1300,"title":{},"body":{"classes/UserResolver.html":{}}}],["this.validateboardcomment(commentid",{"_index":494,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["throw",{"_index":175,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"injectables/BoardPasswordService.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/UserRepository.html":{}}}],["time",{"_index":977,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"index.html":{}}}],["timestamp",{"_index":1100,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["title",{"_index":574,"title":{},"body":{"entities/BoardEntity.html":{},"injectables/BoardRepository.html":{},"classes/BoardSchema.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UpdateBoardInput.html":{}}}],["token",{"_index":1317,"title":{},"body":{"injectables/UserService.html":{}}}],["totalcount",{"_index":638,"title":{},"body":{"classes/BoardPaginationResponse.html":{},"injectables/BoardRepository.html":{},"interfaces/DateTimeScalarConfig.html":{},"classes/PaginationResponseDTO.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["touch",{"_index":1493,"title":{},"body":{"index.html":{}}}],["tparent",{"_index":1033,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["transformboardinterceptor",{"_index":555,"title":{"injectables/TransformBoardInterceptor.html":{}},"body":{"controllers/BoardController.html":{},"injectables/TransformBoardInterceptor.html":{},"coverage.html":{}}}],["transformer",{"_index":303,"title":{},"body":{"entities/BoardCommentEntity.html":{},"entities/BoardEntity.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"classes/PaginationDTO.html":{},"classes/UpdateBoardInput.html":{},"entities/User.html":{},"dependencies.html":{}}}],["transformpassword",{"_index":160,"title":{},"body":{"injectables/BcryptService.html":{}}}],["transformpassword(password",{"_index":162,"title":{},"body":{"injectables/BcryptService.html":{}}}],["tresult",{"_index":1036,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["true",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"entities/BoardCommentEntity.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"entities/BoardEntity.html":{},"injectables/BoardIdCounterRepository.html":{},"injectables/BoardPasswordService.html":{},"injectables/BoardReactionRepository.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"injectables/BoardService.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{},"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["true})@arraymaxsize(3",{"_index":917,"title":{},"body":{"classes/CreateBoardDTO.html":{}}}],["true})@isnumber()@isoptional",{"_index":907,"title":{},"body":{"classes/CreateBoardCommentInput.html":{},"classes/UpdateBoardCommentInput.html":{}}}],["true})@isoptional()@isarray",{"_index":934,"title":{},"body":{"classes/CreateBoardInput.html":{},"classes/UpdateBoardInput.html":{}}}],["true})@isoptional()@isarray()@validatenested({each",{"_index":930,"title":{},"body":{"classes/CreateBoardInput.html":{},"classes/UpdateBoardInput.html":{}}}],["true})@isoptional()@isstring",{"_index":938,"title":{},"body":{"classes/CreateBoardInput.html":{},"classes/UpdateBoardInput.html":{}}}],["true})@isstring()@isoptional",{"_index":904,"title":{},"body":{"classes/CreateBoardCommentInput.html":{},"classes/UpdateBoardCommentInput.html":{}}}],["true})@type(undefined",{"_index":931,"title":{},"body":{"classes/CreateBoardInput.html":{},"classes/UpdateBoardInput.html":{}}}],["true})@type(undefined)@isobject",{"_index":913,"title":{},"body":{"classes/CreateBoardDTO.html":{}}}],["try",{"_index":1272,"title":{},"body":{"injectables/UserRepository.html":{}}}],["twitter",{"_index":1498,"title":{},"body":{"index.html":{}}}],["type",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"controllers/BoardCommentController.html":{},"entities/BoardCommentEntity.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentResolver.html":{},"classes/BoardCommentResponseDTO.html":{},"classes/BoardCommentSchema.html":{},"injectables/BoardCommentService.html":{},"controllers/BoardController.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"injectables/BoardIdCounterRepository.html":{},"classes/BoardPaginationResponse.html":{},"controllers/BoardPasswordController.html":{},"classes/BoardPasswordDTO.html":{},"classes/BoardPasswordResolver.html":{},"injectables/BoardPasswordService.html":{},"controllers/BoardReactionController.html":{},"entities/BoardReactionEntity.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionResolver.html":{},"classes/BoardReactionSchema.html":{},"injectables/BoardReactionService.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"classes/BoardSchema.html":{},"injectables/BoardService.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IDeleteResponse.html":{},"interfaces/IResolverClearResponse.html":{},"interfaces/IResponseInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"classes/PaginationDTO.html":{},"classes/PaginationResponseDTO.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"injectables/TransformBoardInterceptor.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserIdSchema.html":{},"injectables/UserRepository.html":{},"classes/UserResolver.html":{},"classes/UserSchema.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1549,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1172,"title":{},"body":{"injectables/TransformBoardInterceptor.html":{}}}],["typeorm",{"_index":301,"title":{},"body":{"entities/BoardCommentEntity.html":{},"injectables/BoardCommentRepository.html":{},"classes/BoardCommentSchema.html":{},"entities/BoardEntity.html":{},"entities/BoardIdCounterEntity.html":{},"injectables/BoardIdCounterRepository.html":{},"entities/BoardReactionEntity.html":{},"injectables/BoardReactionRepository.html":{},"classes/BoardReactionSchema.html":{},"injectables/BoardRepository.html":{},"classes/BoardSchema.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/BoardCommentModule.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"modules/BoardReactionModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature",{"_index":633,"title":{},"body":{"modules/BoardModule.html":{}}}],["typeormmodule.forfeature([boardcommententity",{"_index":324,"title":{},"body":{"modules/BoardCommentModule.html":{}}}],["typeormmodule.forfeature([boardentity",{"_index":668,"title":{},"body":{"modules/BoardPasswordModule.html":{}}}],["typeormmodule.forfeature([boardreactionentity",{"_index":715,"title":{},"body":{"modules/BoardReactionModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1257,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["typeresolvefn",{"_index":1045,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["types",{"_index":1054,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"classes/UpdateBoardDTO.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{}}}],["types/aws",{"_index":1369,"title":{},"body":{"dependencies.html":{}}}],["types/bcrypt",{"_index":1372,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":1374,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":479,"title":{},"body":{"injectables/BoardCommentService.html":{},"injectables/TransformBoardInterceptor.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":170,"title":{},"body":{"injectables/BcryptService.html":{}}}],["unauthorizedexception(`password",{"_index":177,"title":{},"body":{"injectables/BcryptService.html":{}}}],["undefined",{"_index":340,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["unique",{"_index":1193,"title":{},"body":{"entities/User.html":{}}}],["unique(['email",{"_index":1194,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":1432,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BoardCommentRepository.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1541,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":481,"title":{},"body":{"injectables/BoardCommentService.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["update",{"_index":220,"title":{},"body":{"controllers/BoardCommentController.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardRepository.html":{}}}],["update(boardid",{"_index":237,"title":{},"body":{"controllers/BoardCommentController.html":{}}}],["updateall",{"_index":765,"title":{},"body":{"injectables/BoardRepository.html":{},"injectables/BoardService.html":{}}}],["updateall(boardid",{"_index":781,"title":{},"body":{"injectables/BoardRepository.html":{},"injectables/BoardService.html":{}}}],["updateboard",{"_index":527,"title":{},"body":{"controllers/BoardController.html":{},"injectables/BoardRepository.html":{},"classes/BoardResolver.html":{},"injectables/BoardService.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["updateboard(boardid",{"_index":544,"title":{},"body":{"controllers/BoardController.html":{},"classes/BoardResolver.html":{}}}],["updateboardcomment",{"_index":238,"title":{},"body":{"controllers/BoardCommentController.html":{},"classes/BoardCommentResolver.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["updateboardcomment(boardid",{"_index":400,"title":{},"body":{"classes/BoardCommentResolver.html":{}}}],["updateboardcommentdto",{"_index":239,"title":{"classes/UpdateBoardCommentDTO.html":{}},"body":{"controllers/BoardCommentController.html":{},"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"classes/UpdateBoardCommentDTO.html":{},"coverage.html":{}}}],["updateboardcommentdto.parentid",{"_index":492,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["updateboardcommentexceptpassworddto",{"_index":354,"title":{"classes/UpdateBoardCommentExceptPasswordDTO.html":{}},"body":{"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{},"classes/UpdateBoardCommentExceptPasswordDTO.html":{},"coverage.html":{}}}],["updateboardcommentinput",{"_index":401,"title":{"classes/UpdateBoardCommentInput.html":{}},"body":{"classes/BoardCommentResolver.html":{},"injectables/BoardCommentService.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UpdateBoardCommentInput.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["updateboardcommentmutation",{"_index":1008,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["updateboardcommentmutationvariables",{"_index":1007,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["updateboarddb",{"_index":371,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"injectables/BoardRepository.html":{}}}],["updateboarddb.affected",{"_index":374,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"injectables/BoardRepository.html":{}}}],["updateboarddto",{"_index":545,"title":{"classes/UpdateBoardDTO.html":{}},"body":{"controllers/BoardController.html":{},"injectables/BoardRepository.html":{},"injectables/BoardService.html":{},"classes/UpdateBoardDTO.html":{},"coverage.html":{}}}],["updateboardinput",{"_index":817,"title":{"classes/UpdateBoardInput.html":{}},"body":{"classes/BoardResolver.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UpdateBoardInput.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["updateboardmutation",{"_index":1016,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["updateboardmutationvariables",{"_index":1015,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["updatecomment",{"_index":334,"title":{},"body":{"injectables/BoardCommentRepository.html":{},"injectables/BoardCommentService.html":{}}}],["updatecomment(boardid",{"_index":460,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["updatecomment(commentid",{"_index":353,"title":{},"body":{"injectables/BoardCommentRepository.html":{}}}],["updatedat",{"_index":283,"title":{},"body":{"entities/BoardCommentEntity.html":{},"classes/BoardCommentSchema.html":{},"entities/BoardEntity.html":{},"entities/BoardReactionEntity.html":{},"classes/BoardReactionSchema.html":{},"classes/BoardSchema.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["updatedatecolumn",{"_index":299,"title":{},"body":{"entities/BoardCommentEntity.html":{},"entities/BoardEntity.html":{},"entities/BoardReactionEntity.html":{}}}],["updateone",{"_index":766,"title":{},"body":{"injectables/BoardRepository.html":{},"injectables/BoardService.html":{}}}],["updateone(boardid",{"_index":783,"title":{},"body":{"injectables/BoardRepository.html":{},"injectables/BoardService.html":{}}}],["updates",{"_index":1473,"title":{},"body":{"index.html":{}}}],["uppercase",{"_index":1516,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["upsert",{"_index":613,"title":{},"body":{"injectables/BoardIdCounterRepository.html":{}}}],["url",{"_index":1135,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["useclass",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useinterceptors",{"_index":548,"title":{},"body":{"controllers/BoardController.html":{}}}],["useinterceptors(filesinterceptor('image",{"_index":27,"title":{},"body":{"controllers/AppController.html":{}}}],["useinterceptors(transformboardinterceptor",{"_index":558,"title":{},"body":{"controllers/BoardController.html":{}}}],["user",{"_index":136,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":1253,"title":{},"body":{"modules/UserModule.html":{}}}],["user.password",{"_index":1316,"title":{},"body":{"injectables/UserService.html":{}}}],["user.resolver",{"_index":1256,"title":{},"body":{"modules/UserModule.html":{}}}],["user.service",{"_index":1213,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResolver.html":{}}}],["user/user.module",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":1195,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["useridschema",{"_index":1243,"title":{"classes/UserIdSchema.html":{}},"body":{"classes/UserIdSchema.html":{},"classes/UserResolver.html":{},"coverage.html":{}}}],["usermodule",{"_index":50,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userrepository",{"_index":1250,"title":{"injectables/UserRepository.html":{}},"body":{"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userresolver",{"_index":1255,"title":{"classes/UserResolver.html":{}},"body":{"modules/UserModule.html":{},"classes/UserResolver.html":{},"coverage.html":{}}}],["userschema",{"_index":1290,"title":{"classes/UserSchema.html":{}},"body":{"classes/UserResolver.html":{},"classes/UserSchema.html":{},"coverage.html":{}}}],["userservice",{"_index":1212,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1464,"title":{},"body":{"index.html":{}}}],["utc",{"_index":978,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["validateboardcomment",{"_index":442,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["validateboardcomment(commentid",{"_index":462,"title":{},"body":{"injectables/BoardCommentService.html":{}}}],["validateboarddata",{"_index":646,"title":{},"body":{"controllers/BoardPasswordController.html":{},"injectables/BoardPasswordService.html":{}}}],["validateboarddata(boardid",{"_index":647,"title":{},"body":{"controllers/BoardPasswordController.html":{},"injectables/BoardPasswordService.html":{}}}],["validatenested",{"_index":925,"title":{},"body":{"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"classes/UpdateBoardInput.html":{}}}],["validatepassword",{"_index":161,"title":{},"body":{"injectables/BcryptService.html":{}}}],["validatepassword(password",{"_index":166,"title":{},"body":{"injectables/BcryptService.html":{}}}],["validation",{"_index":1094,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["validationerrors",{"_index":1104,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["validator",{"_index":196,"title":{},"body":{"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"classes/BoardPasswordDTO.html":{},"classes/CreateBoardCommentDTO.html":{},"classes/CreateBoardCommentInput.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"classes/PaginationDTO.html":{},"classes/UpdateBoardCommentDTO.html":{},"classes/UpdateBoardCommentInput.html":{},"classes/UpdateBoardInput.html":{},"dependencies.html":{},"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["value",{"_index":398,"title":{},"body":{"classes/BoardCommentResolver.html":{},"classes/BoardReactionSchema.html":{},"classes/BoardResolver.html":{},"classes/PaginationDTO.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":973,"title":{},"body":{"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"miscellaneous/typealiases.html":{}}}],["variable",{"_index":1335,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1553,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":482,"title":{},"body":{"injectables/BoardCommentService.html":{},"injectables/TransformBoardInterceptor.html":{}}}],["version",{"_index":1539,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1457,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1444,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1459,"title":{},"body":{"index.html":{}}}],["void",{"_index":454,"title":{},"body":{"injectables/BoardCommentService.html":{},"controllers/UserController.html":{},"classes/UserResolver.html":{}}}],["watch",{"_index":1426,"title":{},"body":{"index.html":{}}}],["website",{"_index":1496,"title":{},"body":{"index.html":{}}}],["working",{"_index":1442,"title":{},"body":{"index.html":{}}}],["world",{"_index":102,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1475,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1489,"title":{},"body":{"index.html":{}}}],["youtubeurl",{"_index":575,"title":{},"body":{"entities/BoardEntity.html":{},"injectables/BoardRepository.html":{},"classes/BoardSchema.html":{},"classes/CreateBoardDTO.html":{},"classes/CreateBoardInput.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{},"classes/UpdateBoardInput.html":{}}}],["z\\d!@#$%^&*()]{8",{"_index":1513,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["z])(?=.*[a",{"_index":1510,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["z])(?=.*\\d)(?=.*[!@#$%^&*()])[a",{"_index":1511,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["za",{"_index":1512,"title":{},"body":{"classes/loginDTO.html":{},"classes/loginUser.html":{},"classes/signUpDTO.html":{},"classes/signUpUser.html":{}}}],["zonecode",{"_index":186,"title":{},"body":{"classes/BoardAddressDTO.html":{},"classes/BoardAddressInput.html":{},"classes/BoardAddressOutput.html":{},"interfaces/DateTimeScalarConfig.html":{},"interfaces/SubscriptionResolverObject.html":{},"interfaces/SubscriptionSubscriberObject.html":{}}}],["zoom",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BcryptModule.html":{},"modules/BoardCommentModule.html":{},"modules/BoardModule.html":{},"modules/BoardPasswordModule.html":{},"modules/BoardReactionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n    constructor(private readonly appService: AppService) {}\n\n    @Get()\n    getHello(): string {\n        return this.appService.getHello();\n    }\n\n    // @Post()\n    // @UseInterceptors(FilesInterceptor('image'))\n    // createTestImage(@UploadedFiles() files, @Body() body) {\n    //     return files;\n    // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBcryptModule\n\nBcryptModule\n\nAppModule -->\n\nBcryptModule->AppModule\n\n\n\n\n\nBoardCommentModule\n\nBoardCommentModule\n\nAppModule -->\n\nBoardCommentModule->AppModule\n\n\n\n\n\nBoardModule\n\nBoardModule\n\nAppModule -->\n\nBoardModule->AppModule\n\n\n\n\n\nBoardPasswordModule\n\nBoardPasswordModule\n\nAppModule -->\n\nBoardPasswordModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            BcryptModule\n                        \n                        \n                            BoardCommentModule\n                        \n                        \n                            BoardModule\n                        \n                        \n                            BoardPasswordModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { BcryptModule } from './bcrypt/bcrypt.module';\nimport { BoardCommentModule } from './board/board-comment/board-comment.module';\nimport { BoardModule } from './board/board.module';\nimport { BoardPasswordModule } from './board/board-password/board-password.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserModule } from './user/user.module';\nimport { mongoDBConfig } from 'configs/mongoDB.config';\nimport { postgreSQLConfig } from 'configs/postgreSQL.config';\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            envFilePath: `.env.${process.env.NODE_ENV || 'local'}`,\n            isGlobal: true,\n        }),\n\n        TypeOrmModule.forRootAsync({\n            name: 'MongoDB',\n            useClass: mongoDBConfig,\n        }),\n        TypeOrmModule.forRootAsync({\n            name: 'PostgreSQL',\n            useClass: postgreSQLConfig,\n        }),\n\n        GraphQLModule.forRoot({\n            driver: ApolloDriver,\n            autoSchemaFile: 'src/graphql/schema.gql',\n            context: ({ req, res }) => ({ req, res }),\n        }),\n\n        BoardModule,\n        BoardPasswordModule,\n        BoardCommentModule,\n        AuthModule,\n        BcryptModule,\n        UserModule,\n    ],\n    controllers: [AppController],\n    providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n    getHello(): string {\n        return 'Hello World!';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AuthService } from './auth.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtConfigService } from 'configs/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\n\n@Module({\n    imports: [\n        PassportModule.register({ defaultStrategy: 'jwt' }),\n        JwtModule.registerAsync({\n            imports: [ConfigModule],\n            useClass: JwtConfigService,\n        }),\n    ],\n\n    providers: [AuthService],\n    exports: [PassportModule, AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                issueLoginToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        issueLoginToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    issueLoginToken(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        private readonly jwtService: JwtService,\n        private readonly configService: ConfigService,\n    ) {}\n\n    async issueLoginToken(email: string) {\n        // 여기에 role 넣기\n        // user 또는 counselor\n        const accessToken = await this.jwtService.signAsync(\n            {\n                email,\n                sub: 'accessToken',\n            },\n            {\n                secret: this.configService.get('JWT_ACCESS_SECRET'),\n                expiresIn: `${this.configService.get('JWT_ACCESS_EXPIRE')}s`,\n            },\n        );\n\n        // jti(jwt ID) -> redis\n        const refreshToken = await this.jwtService.signAsync(\n            {\n                email,\n                sub: 'refreshToken',\n            },\n            {\n                secret: this.configService.get('JWT_REFRESH_SECRET'),\n                expiresIn: `${this.configService.get('JWT_REFRESH_EXPIRE')}s`,\n            },\n        );\n\n        return { accessToken, refreshToken };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BcryptModule.html":{"url":"modules/BcryptModule.html","title":"module - BcryptModule","body":"\n                   \n\n\n\n\n    Modules\n    BcryptModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BcryptModule\n\n\n\ncluster_BcryptModule_providers\n\n\n\ncluster_BcryptModule_exports\n\n\n\n\nBcryptService \n\nBcryptService \n\n\n\nBcryptModule\n\nBcryptModule\n\nBcryptService  -->\n\nBcryptModule->BcryptService \n\n\n\n\n\nBcryptService\n\nBcryptService\n\nBcryptModule -->\n\nBcryptService->BcryptModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/bcrypt/bcrypt.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BcryptService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BcryptService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BcryptService } from './bcrypt.service';\nimport { Module } from '@nestjs/common';\n\n@Module({\n    providers: [BcryptService],\n    exports: [BcryptService],\n})\nexport class BcryptModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptService.html":{"url":"injectables/BcryptService.html","title":"injectable - BcryptService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bcrypt/bcrypt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transformPassword\n                            \n                            \n                                    Async\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        transformPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    transformPassword(password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bcrypt/bcrypt.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validatePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    validatePassword(password: string, encryptedPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bcrypt/bcrypt.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encryptedPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt';\n\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\n\n@Injectable()\nexport class BcryptService {\n    async transformPassword(password: string): Promise {\n        const salt = await bcrypt.genSalt();\n\n        return await bcrypt.hash(password, salt);\n    }\n\n    async validatePassword(password: string, encryptedPassword: string) {\n        const validatePassword = await bcrypt.compare(\n            password,\n            encryptedPassword,\n        );\n\n        if (!validatePassword) {\n            throw new UnauthorizedException(`password is invalid`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BoardAddressDTO.html":{"url":"classes/BoardAddressDTO.html","title":"class - BoardAddressDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BoardAddressDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/dto/board-addresss.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                detailAddress\n                            \n                            \n                                    \n                                    \n                                zoneCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/dto/board-addresss.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        detailAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/dto/board-addresss.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        zoneCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/dto/board-addresss.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsNumber, IsString } from 'class-validator';\n\nexport class BoardAddressDTO {\n    @IsNumber()\n    @IsNotEmpty()\n    zoneCode: number;\n\n    @IsString()\n    @IsNotEmpty()\n    address: string;\n\n    @IsString()\n    @IsNotEmpty()\n    detailAddress: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BoardAddressInput.html":{"url":"classes/BoardAddressInput.html","title":"class - BoardAddressInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BoardAddressInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/schema/board-address-input.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                detailAddress\n                            \n                            \n                                    \n                                    \n                                    \n                                zoneCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/board-address-input.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        detailAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/board-address-input.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        zoneCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/board-address-input.schema.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, Int, ObjectType, OmitType } from '@nestjs/graphql';\nimport { IsNotEmpty, IsNumber, IsString } from 'class-validator';\n\n@InputType()\nexport class BoardAddressInput {\n    @Field(() => Int)\n    @IsNumber()\n    @IsNotEmpty()\n    zoneCode: number;\n\n    @Field()\n    @IsString()\n    @IsNotEmpty()\n    address: string;\n\n    @Field()\n    @IsString()\n    @IsNotEmpty()\n    detailAddress: string;\n}\n\n@ObjectType()\nexport class BoardAddressOutput extends OmitType(\n    BoardAddressInput,\n    [],\n    ObjectType,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BoardAddressOutput.html":{"url":"classes/BoardAddressOutput.html","title":"class - BoardAddressOutput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BoardAddressOutput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/schema/board-address-input.schema.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, Int, ObjectType, OmitType } from '@nestjs/graphql';\nimport { IsNotEmpty, IsNumber, IsString } from 'class-validator';\n\n@InputType()\nexport class BoardAddressInput {\n    @Field(() => Int)\n    @IsNumber()\n    @IsNotEmpty()\n    zoneCode: number;\n\n    @Field()\n    @IsString()\n    @IsNotEmpty()\n    address: string;\n\n    @Field()\n    @IsString()\n    @IsNotEmpty()\n    detailAddress: string;\n}\n\n@ObjectType()\nexport class BoardAddressOutput extends OmitType(\n    BoardAddressInput,\n    [],\n    ObjectType,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BoardCommentController.html":{"url":"controllers/BoardCommentController.html","title":"controller - BoardCommentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BoardCommentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-comment/board-comment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/board/:boardId/comment\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(boardId: number, createBoardComment: CreateBoardCommentDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ResponseMessage('comment가 성공적으로 생성되었습니다.')@HttpCode(HttpStatus.CREATED)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board-comment/board-comment.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createBoardComment\n                                            \n                                                            CreateBoardCommentDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(boardId: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ResponseMessage('comment 전체가 성공적으로 가져왔습니다.')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board-comment/board-comment.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(boardId: number, commentId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':commentId')@ResponseMessage('comment를 성공적으로 삭제했습니다.')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board-comment/board-comment.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                commentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(boardId: number, commentId: string, updateBoardComment: UpdateBoardCommentDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':commentId')@ResponseMessage('comment가 성공적으로 수정했습니다.')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board-comment/board-comment.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                commentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateBoardComment\n                                            \n                                                            UpdateBoardCommentDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Post,\n    Body,\n    Param,\n    Delete,\n    HttpCode,\n    HttpStatus,\n    ParseIntPipe,\n    Put,\n    Query,\n    DefaultValuePipe,\n} from '@nestjs/common';\nimport { BoardCommentService } from './board-comment.service';\nimport { CreateBoardCommentDTO } from './dto/create-board-comment.dto';\nimport { UpdateBoardCommentDTO } from './dto/update-board-comment.dto';\nimport { ResponseMessage } from '../../common/decorators/response-message.decorator';\n\n@Controller('/api/board/:boardId/comment')\nexport class BoardCommentController {\n    constructor(private readonly boardCommentService: BoardCommentService) {}\n\n    @Post()\n    @ResponseMessage('comment가 성공적으로 생성되었습니다.')\n    @HttpCode(HttpStatus.CREATED)\n    create(\n        @Param('boardId', ParseIntPipe) boardId: number,\n        @Body() createBoardComment: CreateBoardCommentDTO,\n    ) {\n        return this.boardCommentService.createComment(\n            boardId,\n            createBoardComment,\n        );\n    }\n\n    @Get()\n    @ResponseMessage('comment 전체가 성공적으로 가져왔습니다.')\n    @HttpCode(HttpStatus.OK)\n    findAll(\n        @Param('boardId', ParseIntPipe) boardId: number,\n        @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n    ) {\n        return this.boardCommentService.findAllComment(boardId, page);\n    }\n\n    @Put(':commentId')\n    @ResponseMessage('comment가 성공적으로 수정했습니다.')\n    @HttpCode(HttpStatus.OK)\n    update(\n        @Param('boardId', ParseIntPipe) boardId: number,\n        @Param('commentId') commentId: string,\n        @Body() updateBoardComment: UpdateBoardCommentDTO,\n    ) {\n        const { password, ...restUpdateBoardComment } = updateBoardComment;\n        return this.boardCommentService.updateComment(\n            boardId,\n            restUpdateBoardComment,\n            password,\n            commentId,\n        );\n    }\n\n    @Delete(':commentId')\n    @ResponseMessage('comment를 성공적으로 삭제했습니다.')\n    @HttpCode(HttpStatus.OK)\n    remove(\n        @Param('boardId', ParseIntPipe) boardId: number,\n        @Param('commentId') commentId: string,\n    ) {\n        return this.boardCommentService.removeComment(boardId, commentId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/BoardCommentEntity.html":{"url":"entities/BoardCommentEntity.html","title":"entity - BoardCommentEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  BoardCommentEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-comment/entity/board-comment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                boardId\n                            \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                parentId\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    Optional\n                                rating\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ObjectIdColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/entity/board-comment.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/entity/board-comment.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        boardId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/entity/board-comment.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/entity/board-comment.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/entity/board-comment.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        parentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/entity/board-comment.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/entity/board-comment.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/entity/board-comment.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/entity/board-comment.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ObjectIdColumn,\n    UpdateDateColumn,\n} from 'typeorm';\n\nimport { Exclude } from 'class-transformer';\nimport { ObjectId } from 'mongodb';\n\n@Entity('board_comment')\nexport class BoardCommentEntity {\n    @ObjectIdColumn()\n    _id: ObjectId;\n\n    @Column()\n    author: string;\n\n    @Column()\n    content: string;\n\n    @Column({ nullable: true })\n    rating?: number;\n\n    @Column({ nullable: true })\n    parentId?: string;\n\n    @Column()\n    @Exclude()\n    password: string;\n\n    @Column()\n    boardId: number;\n\n    @CreateDateColumn()\n    createdAt: Date;\n\n    @UpdateDateColumn()\n    updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BoardCommentModule.html":{"url":"modules/BoardCommentModule.html","title":"module - BoardCommentModule","body":"\n                   \n\n\n\n\n    Modules\n    BoardCommentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BoardCommentModule\n\n\n\ncluster_BoardCommentModule_imports\n\n\n\ncluster_BoardCommentModule_providers\n\n\n\ncluster_BoardCommentModule_exports\n\n\n\n\nBcryptModule\n\nBcryptModule\n\n\n\nBoardCommentModule\n\nBoardCommentModule\n\nBoardCommentModule -->\n\nBcryptModule->BoardCommentModule\n\n\n\n\n\nBoardCommentRepository \n\nBoardCommentRepository \n\nBoardCommentRepository  -->\n\nBoardCommentModule->BoardCommentRepository \n\n\n\n\n\nBoardCommentRepository\n\nBoardCommentRepository\n\nBoardCommentModule -->\n\nBoardCommentRepository->BoardCommentModule\n\n\n\n\n\nBoardCommentService\n\nBoardCommentService\n\nBoardCommentModule -->\n\nBoardCommentService->BoardCommentModule\n\n\n\n\n\nBoardRepository\n\nBoardRepository\n\nBoardCommentModule -->\n\nBoardRepository->BoardCommentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/board/board-comment/board-comment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BoardCommentRepository\n                        \n                        \n                            BoardCommentService\n                        \n                        \n                            BoardRepository\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BoardCommentController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BcryptModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BoardCommentRepository\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BcryptModule } from 'src/bcrypt/bcrypt.module';\nimport { BoardCommentController } from './board-comment.controller';\nimport { BoardCommentEntity } from './entity/board-comment.entity';\nimport { BoardCommentRepository } from './repository/board-comment.repository';\nimport { BoardCommentResolver } from './board-comment.resolver';\nimport { BoardCommentService } from './board-comment.service';\nimport { BoardEntity } from '../entity/board.entity';\nimport { BoardRepository } from '../repository/board.repository';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n    imports: [\n        TypeOrmModule.forFeature([BoardCommentEntity, BoardEntity], 'MongoDB'),\n        BcryptModule,\n    ],\n    controllers: [BoardCommentController],\n    providers: [\n        BoardCommentService,\n        BoardCommentRepository,\n        BoardRepository,\n        BoardCommentResolver,\n    ],\n    exports: [BoardCommentRepository],\n})\nexport class BoardCommentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BoardCommentRepository.html":{"url":"injectables/BoardCommentRepository.html","title":"injectable - BoardCommentRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BoardCommentRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-comment/repository/board-comment.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearComment\n                            \n                            \n                                createComment\n                            \n                            \n                                    Async\n                                deleteAllComment\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                findAllComment\n                            \n                            \n                                    Async\n                                findComment\n                            \n                            \n                                    Async\n                                saveComment\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boardCommentRepository: MongoRepository)\n                    \n                \n                        \n                            \n                                Defined in src/board/board-comment/repository/board-comment.repository.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boardCommentRepository\n                                                  \n                                                        \n                                                                        MongoRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        clearComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearComment()\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-comment/repository/board-comment.repository.ts:97\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createComment\n                        \n                    \n                \n            \n            \n                \ncreateComment(boardId: number, undefined: CreateBoardCommentDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-comment/repository/board-comment.repository.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            CreateBoardCommentDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         BoardCommentEntity\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteAllComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteAllComment(boardId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-comment/repository/board-comment.repository.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteComment(parentId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-comment/repository/board-comment.repository.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllComment(boardId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-comment/repository/board-comment.repository.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    findComment(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-comment/repository/board-comment.repository.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveComment(comment: BoardCommentEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-comment/repository/board-comment.repository.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                comment\n                                            \n                                                            BoardCommentEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateComment(commentId: string, updateBoardCommentDto: UpdateBoardCommentExceptPasswordDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-comment/repository/board-comment.repository.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                commentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateBoardCommentDto\n                                            \n                                                            UpdateBoardCommentExceptPasswordDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectRepository } from '@nestjs/typeorm';\nimport { BoardCommentEntity } from '../entity/board-comment.entity';\nimport { Injectable, NotFoundException } from '@nestjs/common';\nimport { MongoRepository } from 'typeorm';\nimport { CreateBoardCommentDTO } from '../dto/create-board-comment.dto';\nimport { ObjectId } from 'mongodb';\nimport { BoardCommentResponseDTO } from '../dto/board-comment-response.dto';\nimport { UpdateBoardCommentExceptPasswordDTO } from '../dto/update-board-except-password-comment.dto';\n\n@Injectable()\nexport class BoardCommentRepository {\n    constructor(\n        @InjectRepository(BoardCommentEntity, 'MongoDB')\n        private readonly boardCommentRepository: MongoRepository,\n    ) {}\n\n    async findComment(id: string) {\n        return await this.boardCommentRepository.findOne({\n            where: { _id: new ObjectId(id) },\n        });\n    }\n\n    createComment(\n        boardId: number,\n        {\n            author,\n            password,\n            content,\n            rating,\n            parentId = null,\n        }: CreateBoardCommentDTO,\n    ): BoardCommentEntity {\n        return this.boardCommentRepository.create({\n            author,\n            password,\n            content,\n            rating,\n            boardId,\n            parentId,\n        });\n    }\n\n    async saveComment(\n        comment: BoardCommentEntity,\n    ): Promise {\n        return await this.boardCommentRepository.save(comment);\n    }\n\n    async findAllComment(boardId: number): Promise {\n        return await this.boardCommentRepository.find({\n            where: { boardId },\n            order: { createdAt: 'ASC' },\n        });\n    }\n\n    async updateComment(\n        commentId: string,\n        updateBoardCommentDto: UpdateBoardCommentExceptPasswordDTO,\n    ): Promise {\n        const updateBoardDB = await this.boardCommentRepository.update(\n            new ObjectId(commentId),\n            updateBoardCommentDto,\n        );\n\n        if (updateBoardDB.affected === 0) {\n            throw new NotFoundException(\n                `commentId: ${commentId} is not update`,\n            );\n        }\n\n        return await this.boardCommentRepository.findOneBy({\n            _id: new ObjectId(commentId),\n        });\n    }\n\n    async deleteComment(parentId: string): Promise {\n        const deleteComment = await this.findComment(parentId);\n\n        await this.boardCommentRepository.remove(deleteComment);\n        await this.boardCommentRepository.delete({\n            parentId,\n        });\n    }\n\n    async deleteAllComment(boardId: number): Promise {\n        const deleteAllComment = await this.boardCommentRepository.delete({\n            boardId,\n        });\n\n        if (!deleteAllComment) {\n            throw new NotFoundException(`boardId: ${boardId} is not found`);\n        }\n\n        return true;\n    }\n\n    async clearComment(): Promise {\n        await this.boardCommentRepository.clear();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BoardCommentResolver.html":{"url":"classes/BoardCommentResolver.html","title":"class - BoardCommentResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BoardCommentResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-comment/board-comment.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createBoardComment\n                            \n                            \n                                    \n                                deleteBoardComment\n                            \n                            \n                                    \n                                getBoardComment\n                            \n                            \n                                    \n                                updateBoardComment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boardCommentService: BoardCommentService)\n                    \n                \n                        \n                            \n                                Defined in src/board/board-comment/board-comment.resolver.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boardCommentService\n                                                  \n                                                        \n                                                                        BoardCommentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createBoardComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createBoardComment(boardId: number, createBoardComment: CreateBoardCommentInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board-comment/board-comment.resolver.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createBoardComment\n                                            \n                                                            CreateBoardCommentInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteBoardComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteBoardComment(boardId: number, commentId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board-comment/board-comment.resolver.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                commentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getBoardComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBoardComment(boardId: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board-comment/board-comment.resolver.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateBoardComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateBoardComment(boardId: number, updateBoardComment: UpdateBoardCommentInput, commentId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board-comment/board-comment.resolver.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateBoardComment\n                                            \n                                                            UpdateBoardCommentInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                commentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Args, Int, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { BoardCommentService } from './board-comment.service';\n\nimport { BoardCommentResponseDTO } from './dto/board-comment-response.dto';\n\nimport { BoardCommentSchema } from './schema/board-comment.schema';\nimport { CreateBoardCommentInput } from './schema/create-board-comment-input.schema';\nimport { UpdateBoardCommentInput } from './schema/update-board-comment-input.schema';\n\n@Resolver(() => BoardCommentSchema)\nexport class BoardCommentResolver {\n    constructor(private readonly boardCommentService: BoardCommentService) {}\n\n    @Query(() => [BoardCommentResponseDTO])\n    getBoardComment(\n        @Args('boardId', { type: () => Int }) boardId: number,\n        @Args('page', { type: () => Int, nullable: true }) page: number = 1,\n    ) {\n        return this.boardCommentService.findAllComment(boardId, page);\n    }\n\n    @Mutation(() => BoardCommentResponseDTO)\n    createBoardComment(\n        @Args('boardId', { type: () => Int }) boardId: number,\n        @Args('createBoardComment')\n        createBoardComment: CreateBoardCommentInput,\n    ) {\n        return this.boardCommentService.createComment(\n            boardId,\n            createBoardComment,\n        );\n    }\n\n    @Mutation(() => BoardCommentResponseDTO)\n    updateBoardComment(\n        @Args('boardId', { type: () => Int }) boardId: number,\n        @Args('updateBoardComment')\n        updateBoardComment: UpdateBoardCommentInput,\n        @Args('commentId') commentId: string,\n    ) {\n        const { password, ...restUpdateBoardComment } = updateBoardComment;\n        return this.boardCommentService.updateComment(\n            boardId,\n            restUpdateBoardComment,\n            password,\n            commentId,\n        );\n    }\n\n    @Mutation(() => Boolean)\n    deleteBoardComment(\n        @Args('boardId', { type: () => Int }) boardId: number,\n        @Args('commentId') commentId: string,\n    ) {\n        return this.boardCommentService.removeComment(boardId, commentId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BoardCommentResponseDTO.html":{"url":"classes/BoardCommentResponseDTO.html","title":"class - BoardCommentResponseDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BoardCommentResponseDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-comment/dto/board-comment-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                replies\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        replies\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BoardCommentResponseDTO[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/dto/board-comment-response.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType, OmitType } from '@nestjs/graphql';\n\nimport { BoardCommentSchema } from '../schema/board-comment.schema';\n\n@ObjectType()\nexport class BoardCommentResponseDTO extends OmitType(BoardCommentSchema, [\n    'password',\n]) {\n    @Field(() => [BoardCommentResponseDTO], { nullable: true })\n    replies?: BoardCommentResponseDTO[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BoardCommentSchema.html":{"url":"classes/BoardCommentSchema.html","title":"class - BoardCommentSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BoardCommentSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-comment/schema/board-comment.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                boardId\n                            \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                parentId\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    Optional\n                                rating\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/schema/board-comment.schema.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/schema/board-comment.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        boardId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/schema/board-comment.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/schema/board-comment.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/schema/board-comment.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        parentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/schema/board-comment.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/schema/board-comment.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/schema/board-comment.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/schema/board-comment.schema.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, Int, ObjectType } from '@nestjs/graphql';\n\nimport { ObjectId } from 'typeorm';\n\n@ObjectType()\nexport class BoardCommentSchema {\n    @Field(() => ID)\n    _id: ObjectId;\n\n    @Field()\n    author: string;\n\n    @Field()\n    content: string;\n\n    @Field(() => Int, { nullable: true })\n    rating?: number;\n\n    @Field({ nullable: true })\n    parentId?: string;\n\n    @Field()\n    password: string;\n\n    @Field(() => Int)\n    boardId: number;\n\n    @Field(() => Date)\n    createdAt: Date;\n\n    @Field(() => Date)\n    updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BoardCommentService.html":{"url":"injectables/BoardCommentService.html","title":"injectable - BoardCommentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BoardCommentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-comment/board-comment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                findAllComment\n                            \n                            \n                                    Async\n                                isExistBoard\n                            \n                            \n                                    Async\n                                isExistParentComment\n                            \n                            \n                                isInvalidPage\n                            \n                            \n                                makeCommentMap\n                            \n                            \n                                    Async\n                                removeComment\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                validateBoardComment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boardCommentRepository: BoardCommentRepository, boardRepsitory: BoardRepository, bcryptService: BcryptService)\n                    \n                \n                        \n                            \n                                Defined in src/board/board-comment/board-comment.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boardCommentRepository\n                                                  \n                                                        \n                                                                        BoardCommentRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        boardRepsitory\n                                                  \n                                                        \n                                                                        BoardRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        bcryptService\n                                                  \n                                                        \n                                                                        BcryptService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createComment(boardId: number, createBoardCommentDto: CreateBoardCommentDTO | CreateBoardCommentInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-comment/board-comment.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createBoardCommentDto\n                                            \n                                                            CreateBoardCommentDTO | CreateBoardCommentInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllComment(boardId: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-comment/board-comment.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isExistBoard\n                        \n                    \n                \n            \n            \n                \n                        \n                    isExistBoard(boardId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-comment/board-comment.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isExistParentComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    isExistParentComment(parentId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-comment/board-comment.service.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isInvalidPage\n                        \n                    \n                \n            \n            \n                \nisInvalidPage(length: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-comment/board-comment.service.ts:158\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                length\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        makeCommentMap\n                        \n                    \n                \n            \n            \n                \nmakeCommentMap(boardComments: BoardCommentResponseDTO[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-comment/board-comment.service.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardComments\n                                            \n                                                            BoardCommentResponseDTO[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeComment(boardId: number, commentId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-comment/board-comment.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                commentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateComment(boardId: number, updateBoardCommentDto: UpdateBoardCommentExceptPasswordDTO | UpdateBoardCommentInput, password: string, commentId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-comment/board-comment.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateBoardCommentDto\n                                            \n                                                            UpdateBoardCommentExceptPasswordDTO | UpdateBoardCommentInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                commentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateBoardComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateBoardComment(commentId: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-comment/board-comment.service.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                commentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    Injectable,\n    NotFoundException,\n} from '@nestjs/common';\n\nimport { BcryptService } from 'src/bcrypt/bcrypt.service';\nimport { BoardCommentEntity } from './entity/board-comment.entity';\nimport { BoardCommentRepository } from './repository/board-comment.repository';\nimport { BoardCommentResponseDTO } from './dto/board-comment-response.dto';\nimport { BoardRepository } from '../repository/board.repository';\nimport { CreateBoardCommentDTO } from './dto/create-board-comment.dto';\nimport { CreateBoardCommentInput } from './schema/create-board-comment-input.schema';\nimport { UpdateBoardCommentExceptPasswordDTO } from './dto/update-board-except-password-comment.dto';\nimport { UpdateBoardCommentInput } from './schema/update-board-comment-input.schema';\n\n@Injectable()\nexport class BoardCommentService {\n    constructor(\n        private readonly boardCommentRepository: BoardCommentRepository,\n        private readonly boardRepsitory: BoardRepository,\n        private readonly bcryptService: BcryptService,\n    ) {}\n    async createComment(\n        boardId: number,\n        createBoardCommentDto: CreateBoardCommentDTO | CreateBoardCommentInput,\n    ): Promise {\n        await this.isExistBoard(boardId);\n\n        const { parentId } = createBoardCommentDto;\n\n        if (parentId) {\n            await this.isExistParentComment(parentId);\n        }\n\n        const password: string = await this.bcryptService.transformPassword(\n            createBoardCommentDto.password,\n        );\n\n        const comment: BoardCommentEntity =\n            this.boardCommentRepository.createComment(boardId, {\n                ...createBoardCommentDto,\n                password,\n            });\n\n        return await this.boardCommentRepository.saveComment(comment);\n    }\n\n    async findAllComment(\n        boardId: number,\n        page: number,\n    ): Promise {\n        await this.isExistBoard(boardId);\n\n        const boardComments =\n            await this.boardCommentRepository.findAllComment(boardId);\n\n        const restBoardComments = boardComments.map((item) => {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const { password, ...rest } = item;\n            return rest;\n        });\n\n        const commentBoardList = this.makeCommentMap(restBoardComments);\n\n        if (commentBoardList.length === 0) return [];\n        this.isInvalidPage(commentBoardList.length, page);\n\n        return commentBoardList.filter(\n            (_, index) => index >= 3 * (page - 1) && index  {\n        await this.isExistBoard(boardId);\n\n        if (updateBoardCommentDto.parentId) {\n            await this.isExistParentComment(updateBoardCommentDto.parentId);\n        }\n\n        await this.validateBoardComment(commentId, password);\n        return this.boardCommentRepository.updateComment(\n            commentId,\n            updateBoardCommentDto,\n        );\n    }\n\n    async removeComment(boardId: number, commentId: string): Promise {\n        await this.isExistBoard(boardId);\n        await this.boardCommentRepository.deleteComment(commentId);\n        return true;\n    }\n\n    async isExistBoard(boardId: number): Promise {\n        const isExist = await this.boardRepsitory.findBoard(boardId);\n\n        if (!isExist) {\n            throw new NotFoundException(\n                `boardID: ${boardId} is not found in Board`,\n            );\n        }\n    }\n\n    async isExistParentComment(parentId: string): Promise {\n        const isExistParentComment =\n            await this.boardCommentRepository.findComment(parentId);\n        if (!isExistParentComment) {\n            throw new BadRequestException(\n                `Parent ID ${parentId} comment not found`,\n            );\n        } else if (isExistParentComment.parentId) {\n            throw new NotFoundException(`commnetId ${parentId} have parentId`);\n        }\n    }\n\n    async validateBoardComment(\n        commentId: string,\n        password: string,\n    ): Promise {\n        const comment =\n            await this.boardCommentRepository.findComment(commentId);\n\n        if (!comment) {\n            throw new NotFoundException(`commentId ${commentId} is not found`);\n        }\n\n        await this.bcryptService.validatePassword(password, comment.password);\n    }\n\n    makeCommentMap(boardComments: BoardCommentResponseDTO[]) {\n        const commentMap = new Map();\n\n        boardComments.forEach((comment) => {\n            if (!comment.parentId) {\n                commentMap.set(comment._id.toString(), {\n                    ...comment,\n                    replies: [],\n                });\n            } else {\n                const parentComment = commentMap.get(\n                    comment.parentId.toString(),\n                );\n                if (parentComment) {\n                    parentComment.replies.push(comment);\n                }\n            }\n        });\n        return Array.from(commentMap.values());\n    }\n\n    isInvalidPage(length: number, page: number) {\n        if (page === 1) return;\n        if (3 * page > length) {\n            throw new BadRequestException(\n                `page: ${page} is over. max length: ${length}`,\n            );\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BoardController.html":{"url":"controllers/BoardController.html","title":"controller - BoardController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BoardController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/board\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                clearBoard\n                            \n                            \n                                    \n                                    \n                                    \n                                createBoard\n                            \n                            \n                                    \n                                    \n                                    \n                                getBoard\n                            \n                            \n                                    \n                                    \n                                    \n                                getBoards\n                            \n                            \n                                    \n                                    \n                                    \n                                removeBoard\n                            \n                            \n                                    \n                                    \n                                    \n                                updateBoard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        clearBoard\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearBoard()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()@ResponseMessage('board 전체를 성공적으로 삭제했습니다.')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        createBoard\n                        \n                    \n                \n            \n            \n                \n                        \n                    createBoard(createBoardDTO: CreateBoardDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ResponseMessage('board가 성공적으로 생성되었습니다.')@HttpCode(HttpStatus.CREATED)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createBoardDTO\n                                            \n                                                            CreateBoardDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getBoard\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBoard(boardId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':boardId')@ResponseMessage('board를 성공적으로 가져왔습니다.')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getBoards\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBoards(query: PaginationDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ResponseMessage('board 전체를 성공적으로 가져왔습니다.')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PaginationDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        removeBoard\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeBoard(boardId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':boardId')@ResponseMessage('board를 성공적으로 삭제했습니다.')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updateBoard\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateBoard(boardId: number, updateBoardDTO: UpdateBoardDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':boardId')@ResponseMessage('board 전체를 성공적으로 수정했습니다.')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateBoardDTO\n                                            \n                                                            UpdateBoardDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Post,\n    Body,\n    Param,\n    Delete,\n    HttpCode,\n    Put,\n    HttpStatus,\n    ParseIntPipe,\n    Query,\n    UseInterceptors,\n} from '@nestjs/common';\nimport { BoardService } from './board.service';\nimport { CreateBoardDTO } from './dto/create-board.dto';\nimport { UpdateBoardDTO } from './dto/update-board.dto';\nimport { ResponseMessage } from '../common/decorators/response-message.decorator';\nimport { BoardEntity } from './entity/board.entity';\nimport { PaginationDTO } from './dto/pagination.dto';\nimport { PaginationResponseDTO } from './dto/pagination-response.dto';\nimport { TransformBoardInterceptor } from 'src/common/interceptors/transform-board.interceptor';\n@UseInterceptors(TransformBoardInterceptor)\n@Controller('/api/board')\nexport class BoardController {\n    constructor(private readonly boardService: BoardService) {}\n\n    @Post()\n    @ResponseMessage('board가 성공적으로 생성되었습니다.')\n    @HttpCode(HttpStatus.CREATED)\n    createBoard(@Body() createBoardDTO: CreateBoardDTO): Promise {\n        return this.boardService.create(createBoardDTO);\n    }\n\n    @Get()\n    @ResponseMessage('board 전체를 성공적으로 가져왔습니다.')\n    @HttpCode(HttpStatus.OK)\n    getBoards(@Query() query: PaginationDTO): Promise {\n        return this.boardService.findAll(query);\n    }\n\n    @Get(':boardId')\n    @ResponseMessage('board를 성공적으로 가져왔습니다.')\n    @HttpCode(HttpStatus.OK)\n    getBoard(\n        @Param('boardId', ParseIntPipe) boardId: number,\n    ): Promise {\n        return this.boardService.findOne(boardId);\n    }\n\n    @Put(':boardId')\n    @ResponseMessage('board 전체를 성공적으로 수정했습니다.')\n    @HttpCode(HttpStatus.OK)\n    updateBoard(\n        @Param('boardId', ParseIntPipe) boardId: number,\n        @Body() updateBoardDTO: UpdateBoardDTO,\n    ): Promise {\n        return this.boardService.updateAll(boardId, updateBoardDTO);\n    }\n\n    @Delete(':boardId')\n    @ResponseMessage('board를 성공적으로 삭제했습니다.')\n    @HttpCode(HttpStatus.OK)\n    removeBoard(\n        @Param('boardId', ParseIntPipe) boardId: number,\n    ): Promise {\n        return this.boardService.remove(boardId);\n    }\n\n    @Delete()\n    @ResponseMessage('board 전체를 성공적으로 삭제했습니다.')\n    @HttpCode(HttpStatus.OK)\n    clearBoard(): Promise {\n        return this.boardService.clear();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/BoardEntity.html":{"url":"entities/BoardEntity.html","title":"entity - BoardEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  BoardEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/entity/board.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                boardAddressOutput\n                            \n                            \n                                    \n                                boardId\n                            \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    Optional\n                                youtubeUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ObjectIdColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/entity/board.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/entity/board.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        boardAddressOutput\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BoardAddressDTO\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/entity/board.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        boardId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/entity/board.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/entity/board.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/entity/board.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('array', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/entity/board.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/entity/board.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/entity/board.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/entity/board.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        youtubeUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/entity/board.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ObjectId,\n    ObjectIdColumn,\n    UpdateDateColumn,\n} from 'typeorm';\n\nimport { BoardAddressDTO } from '../dto/board-addresss.dto';\nimport { Exclude } from 'class-transformer';\n\n@Entity('board')\nexport class BoardEntity {\n    @ObjectIdColumn()\n    _id: ObjectId;\n\n    @Column()\n    author: string;\n\n    @Column()\n    @Exclude()\n    password: string;\n\n    @Column()\n    title: string;\n\n    @Column()\n    content: string;\n\n    @Column('array', { nullable: true })\n    imageUrl?: string[];\n\n    @Column({ nullable: true })\n    youtubeUrl?: string;\n\n    @Column({ type: 'json', nullable: true })\n    boardAddressOutput?: BoardAddressDTO;\n\n    @Column()\n    boardId: number;\n\n    @CreateDateColumn()\n    createdAt: Date;\n\n    @UpdateDateColumn()\n    updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/BoardIdCounterEntity.html":{"url":"entities/BoardIdCounterEntity.html","title":"entity - BoardIdCounterEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  BoardIdCounterEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/entity/board-boardId.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                boardId\n                            \n                            \n                                    \n                                collection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ObjectIdColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/entity/board-boardId.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        boardId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/entity/board-boardId.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        collection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/entity/board-boardId.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ObjectIdColumn } from 'typeorm';\n\nimport { ObjectId } from 'mongodb';\n\n@Entity('board_id_counter')\nexport class BoardIdCounterEntity {\n    @ObjectIdColumn()\n    _id: ObjectId;\n\n    @Column()\n    collection: string;\n\n    @Column()\n    boardId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BoardIdCounterRepository.html":{"url":"injectables/BoardIdCounterRepository.html","title":"injectable - BoardIdCounterRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BoardIdCounterRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/repository/board-id-counter.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                incrementBoardId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boardIdCounterRepository: MongoRepository)\n                    \n                \n                        \n                            \n                                Defined in src/board/repository/board-id-counter.repository.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boardIdCounterRepository\n                                                  \n                                                        \n                                                                        MongoRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        incrementBoardId\n                        \n                    \n                \n            \n            \n                \n                        \n                    incrementBoardId(board: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/repository/board-id-counter.repository.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                board\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MongoRepository } from 'typeorm';\nimport { BoardIdCounterEntity } from '../entity/board-boardId.entity';\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class BoardIdCounterRepository {\n    constructor(\n        @InjectRepository(BoardIdCounterEntity, 'MongoDB')\n        private readonly boardIdCounterRepository: MongoRepository,\n    ) {}\n    async incrementBoardId(board: string): Promise {\n        const counter = await this.boardIdCounterRepository.findOneAndUpdate(\n            { collection: board },\n            { $inc: { boardId: 1 } },\n            { upsert: true, returnDocument: 'after' },\n        );\n        return counter.value.boardId;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BoardModule.html":{"url":"modules/BoardModule.html","title":"module - BoardModule","body":"\n                   \n\n\n\n\n    Modules\n    BoardModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BoardModule\n\n\n\ncluster_BoardModule_imports\n\n\n\ncluster_BoardModule_exports\n\n\n\ncluster_BoardModule_providers\n\n\n\n\nBcryptModule\n\nBcryptModule\n\n\n\nBoardModule\n\nBoardModule\n\nBoardModule -->\n\nBcryptModule->BoardModule\n\n\n\n\n\nBoardReactionModule\n\nBoardReactionModule\n\nBoardModule -->\n\nBoardReactionModule->BoardModule\n\n\n\n\n\nBoardRepository \n\nBoardRepository \n\nBoardRepository  -->\n\nBoardModule->BoardRepository \n\n\n\n\n\nBoardService \n\nBoardService \n\nBoardService  -->\n\nBoardModule->BoardService \n\n\n\n\n\nBoardCommentRepository\n\nBoardCommentRepository\n\nBoardModule -->\n\nBoardCommentRepository->BoardModule\n\n\n\n\n\nBoardIdCounterRepository\n\nBoardIdCounterRepository\n\nBoardModule -->\n\nBoardIdCounterRepository->BoardModule\n\n\n\n\n\nBoardReactionRepository\n\nBoardReactionRepository\n\nBoardModule -->\n\nBoardReactionRepository->BoardModule\n\n\n\n\n\nBoardRepository\n\nBoardRepository\n\nBoardModule -->\n\nBoardRepository->BoardModule\n\n\n\n\n\nBoardService\n\nBoardService\n\nBoardModule -->\n\nBoardService->BoardModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/board/board.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BoardCommentRepository\n                        \n                        \n                            BoardIdCounterRepository\n                        \n                        \n                            BoardReactionRepository\n                        \n                        \n                            BoardRepository\n                        \n                        \n                            BoardService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BoardController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BcryptModule\n                        \n                        \n                            BoardReactionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BoardRepository\n                        \n                        \n                            BoardService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BcryptModule } from 'src/bcrypt/bcrypt.module';\nimport { BoardCommentEntity } from './board-comment/entity/board-comment.entity';\nimport { BoardCommentRepository } from './board-comment/repository/board-comment.repository';\nimport { BoardController } from './board.controller';\nimport { BoardEntity } from './entity/board.entity';\nimport { BoardIdCounterEntity } from './entity/board-boardId.entity';\nimport { BoardIdCounterRepository } from './repository/board-id-counter.repository';\nimport { BoardReactionEntity } from './board-reaction/entity/board-reaction.entity';\nimport { BoardReactionModule } from './board-reaction/board-reaction.module';\nimport { BoardReactionRepository } from './board-reaction/repository/boardReactionRepository';\nimport { BoardRepository } from './repository/board.repository';\nimport { BoardResolver } from './board.resolver';\nimport { BoardService } from './board.service';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n    imports: [\n        TypeOrmModule.forFeature(\n            [\n                BoardEntity,\n                BoardIdCounterEntity,\n                BoardReactionEntity,\n                BoardCommentEntity,\n            ],\n            'MongoDB',\n        ),\n        BoardReactionModule,\n        BcryptModule,\n    ],\n    controllers: [BoardController],\n    providers: [\n        BoardService,\n        BoardRepository,\n        BoardIdCounterRepository,\n        BoardReactionRepository,\n        BoardCommentRepository,\n        BoardResolver,\n    ],\n    exports: [BoardService, BoardRepository],\n})\nexport class BoardModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BoardPaginationResponse.html":{"url":"classes/BoardPaginationResponse.html","title":"class - BoardPaginationResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BoardPaginationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/schema/board-pagination-response.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                result\n                            \n                            \n                                    \n                                totalCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        result\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BoardSchema[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/board-pagination-response.schema.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/board-pagination-response.schema.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\n\nimport { BoardSchema } from './board.schema';\n\n@ObjectType()\nexport class BoardPaginationResponse {\n    @Field(() => [BoardSchema])\n    result: BoardSchema[];\n\n    @Field(() => Int)\n    totalCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BoardPasswordController.html":{"url":"controllers/BoardPasswordController.html","title":"controller - BoardPasswordController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BoardPasswordController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-password/board-password.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/board/:boardId/password\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                validateBoardData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        validateBoardData\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateBoardData(boardId: number, body: BoardPasswordDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ResponseMessage('password가 일치합니다.')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board-password/board-password.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            BoardPasswordDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    HttpCode,\n    HttpStatus,\n    Param,\n    ParseIntPipe,\n    Post,\n} from '@nestjs/common';\nimport { ResponseMessage } from '../../common/decorators/response-message.decorator';\nimport { BoardPasswordService } from './board-password.service';\nimport { BoardPasswordDTO } from './dto/board-password.dto';\n\n@Controller('/api/board/:boardId/password')\nexport class BoardPasswordController {\n    constructor(private readonly boardPasswordService: BoardPasswordService) {}\n\n    @Post()\n    @ResponseMessage('password가 일치합니다.')\n    @HttpCode(HttpStatus.OK)\n    validateBoardData(\n        @Param('boardId', ParseIntPipe) boardId: number,\n        @Body() body: BoardPasswordDTO,\n    ): Promise {\n        return this.boardPasswordService.validateBoardData(\n            boardId,\n            body.password,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BoardPasswordDTO.html":{"url":"classes/BoardPasswordDTO.html","title":"class - BoardPasswordDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BoardPasswordDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-password/dto/board-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-password/dto/board-password.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class BoardPasswordDTO {\n    @IsString()\n    @IsNotEmpty()\n    password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BoardPasswordModule.html":{"url":"modules/BoardPasswordModule.html","title":"module - BoardPasswordModule","body":"\n                   \n\n\n\n\n    Modules\n    BoardPasswordModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BoardPasswordModule\n\n\n\ncluster_BoardPasswordModule_providers\n\n\n\ncluster_BoardPasswordModule_imports\n\n\n\n\nBcryptModule\n\nBcryptModule\n\n\n\nBoardPasswordModule\n\nBoardPasswordModule\n\nBoardPasswordModule -->\n\nBcryptModule->BoardPasswordModule\n\n\n\n\n\nBoardPasswordService\n\nBoardPasswordService\n\nBoardPasswordModule -->\n\nBoardPasswordService->BoardPasswordModule\n\n\n\n\n\nBoardRepository\n\nBoardRepository\n\nBoardPasswordModule -->\n\nBoardRepository->BoardPasswordModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/board/board-password/board-password.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BoardPasswordService\n                        \n                        \n                            BoardRepository\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BoardPasswordController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BcryptModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BcryptModule } from 'src/bcrypt/bcrypt.module';\nimport { BoardEntity } from '../entity/board.entity';\nimport { BoardPasswordController } from './board-password.controller';\nimport { BoardPasswordResolver } from './board-password.resolver';\nimport { BoardPasswordService } from './board-password.service';\nimport { BoardRepository } from '../repository/board.repository';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n    imports: [TypeOrmModule.forFeature([BoardEntity], 'MongoDB'), BcryptModule],\n    controllers: [BoardPasswordController],\n    providers: [BoardPasswordService, BoardRepository, BoardPasswordResolver],\n})\nexport class BoardPasswordModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BoardPasswordResolver.html":{"url":"classes/BoardPasswordResolver.html","title":"class - BoardPasswordResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BoardPasswordResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-password/board-password.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                isPasswordCorrect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boardPasswordService: BoardPasswordService)\n                    \n                \n                        \n                            \n                                Defined in src/board/board-password/board-password.resolver.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boardPasswordService\n                                                  \n                                                        \n                                                                        BoardPasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isPasswordCorrect\n                        \n                    \n                \n            \n            \n                \n                        \n                    isPasswordCorrect(boardId: number, password: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board-password/board-password.resolver.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BoardPasswordService } from './board-password.service';\nimport { Args, Int, Mutation, Resolver } from '@nestjs/graphql';\n\n@Resolver(() => Boolean)\nexport class BoardPasswordResolver {\n    constructor(private readonly boardPasswordService: BoardPasswordService) {}\n\n    @Mutation(() => Boolean)\n    isPasswordCorrect(\n        @Args('boardId', { type: () => Int }) boardId: number,\n        @Args('password') password: string,\n    ) {\n        return this.boardPasswordService.validateBoardData(boardId, password);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BoardPasswordService.html":{"url":"injectables/BoardPasswordService.html","title":"injectable - BoardPasswordService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BoardPasswordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-password/board-password.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validateBoardData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boardRepository: BoardRepository, bcryptService: BcryptService)\n                    \n                \n                        \n                            \n                                Defined in src/board/board-password/board-password.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boardRepository\n                                                  \n                                                        \n                                                                        BoardRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        bcryptService\n                                                  \n                                                        \n                                                                        BcryptService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateBoardData\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateBoardData(boardId: number, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-password/board-password.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\n\nimport { BcryptService } from 'src/bcrypt/bcrypt.service';\nimport { BoardRepository } from '../repository/board.repository';\n\n@Injectable()\nexport class BoardPasswordService {\n    constructor(\n        private readonly boardRepository: BoardRepository,\n        private readonly bcryptService: BcryptService,\n    ) {}\n\n    async validateBoardData(\n        boardId: number,\n        password: string,\n    ): Promise {\n        const findBoard = await this.boardRepository.findBoard(boardId);\n\n        if (!findBoard) {\n            throw new NotFoundException(`boardId ${boardId} is not found`);\n        }\n\n        await this.bcryptService.validatePassword(password, findBoard.password);\n\n        return true;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BoardReactionController.html":{"url":"controllers/BoardReactionController.html","title":"controller - BoardReactionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BoardReactionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-reaction/board-reaction.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/board/:boardId/reaction\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                getBoardReaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getBoardReaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBoardReaction(BoardId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ResponseMessage(board의 reaction을 성공적으로 가져왔습니다.)@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board-reaction/board-reaction.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                BoardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Param,\n    HttpCode,\n    HttpStatus,\n    ParseIntPipe,\n} from '@nestjs/common';\nimport { BoardReactionService } from './board-reaction.service';\nimport { ResponseMessage } from '../../common/decorators/response-message.decorator';\n\n@Controller('/api/board/:boardId/reaction')\nexport class BoardReactionController {\n    constructor(private readonly boardReactionService: BoardReactionService) {}\n\n    @Get()\n    @ResponseMessage(`board의 reaction을 성공적으로 가져왔습니다.`)\n    @HttpCode(HttpStatus.OK)\n    getBoardReaction(@Param('boardId', ParseIntPipe) BoardId: number) {\n        return this.boardReactionService.getBoardReaction(BoardId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/BoardReactionEntity.html":{"url":"entities/BoardReactionEntity.html","title":"entity - BoardReactionEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  BoardReactionEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-reaction/entity/board-reaction.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                boardId\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                hate\n                            \n                            \n                                    \n                                like\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ObjectIdColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-reaction/entity/board-reaction.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        boardId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-reaction/entity/board-reaction.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-reaction/entity/board-reaction.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        hate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-reaction/entity/board-reaction.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        like\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-reaction/entity/board-reaction.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-reaction/entity/board-reaction.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ObjectIdColumn,\n    UpdateDateColumn,\n} from 'typeorm';\n\nimport { ObjectId } from 'mongodb';\n\n@Entity('board_reaction')\nexport class BoardReactionEntity {\n    @ObjectIdColumn()\n    _id: ObjectId;\n\n    @Column()\n    boardId: number;\n\n    @Column({ default: 0 })\n    like: number;\n\n    @Column({ default: 0 })\n    hate: number;\n\n    @CreateDateColumn()\n    createdAt: Date;\n\n    @UpdateDateColumn()\n    updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BoardReactionModule.html":{"url":"modules/BoardReactionModule.html","title":"module - BoardReactionModule","body":"\n                   \n\n\n\n\n    Modules\n    BoardReactionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BoardReactionModule\n\n\n\ncluster_BoardReactionModule_providers\n\n\n\n\nBoardReactionRepository\n\nBoardReactionRepository\n\n\n\nBoardReactionModule\n\nBoardReactionModule\n\nBoardReactionModule -->\n\nBoardReactionRepository->BoardReactionModule\n\n\n\n\n\nBoardReactionService\n\nBoardReactionService\n\nBoardReactionModule -->\n\nBoardReactionService->BoardReactionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/board/board-reaction/board-reaction.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BoardReactionRepository\n                        \n                        \n                            BoardReactionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BoardReactionController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BoardReactionController } from './board-reaction.controller';\nimport { BoardReactionEntity } from './entity/board-reaction.entity';\nimport { BoardReactionRepository } from './repository/boardReactionRepository';\nimport { BoardReactionResolver } from './board-reaction.resolver';\nimport { BoardReactionService } from './board-reaction.service';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n    imports: [TypeOrmModule.forFeature([BoardReactionEntity], 'MongoDB')],\n    controllers: [BoardReactionController],\n    providers: [\n        BoardReactionService,\n        BoardReactionRepository,\n        BoardReactionResolver,\n    ],\n})\nexport class BoardReactionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BoardReactionRepository.html":{"url":"injectables/BoardReactionRepository.html","title":"injectable - BoardReactionRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BoardReactionRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-reaction/repository/boardReactionRepository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearBoardReaction\n                            \n                            \n                                    Async\n                                deleteBoardReaction\n                            \n                            \n                                    Async\n                                findBoardReaction\n                            \n                            \n                                    Async\n                                initializatedBoardReaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boardReactionRepository: MongoRepository)\n                    \n                \n                        \n                            \n                                Defined in src/board/board-reaction/repository/boardReactionRepository.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boardReactionRepository\n                                                  \n                                                        \n                                                                        MongoRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        clearBoardReaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearBoardReaction()\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-reaction/repository/boardReactionRepository.ts:54\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteBoardReaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteBoardReaction(boardId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-reaction/repository/boardReactionRepository.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findBoardReaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    findBoardReaction(boardId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-reaction/repository/boardReactionRepository.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        initializatedBoardReaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializatedBoardReaction(boardId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-reaction/repository/boardReactionRepository.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MongoRepository } from 'typeorm';\nimport { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { BoardReactionEntity } from '../entity/board-reaction.entity';\n\n@Injectable()\nexport class BoardReactionRepository {\n    constructor(\n        @InjectRepository(BoardReactionEntity, 'MongoDB')\n        private readonly boardReactionRepository: MongoRepository,\n    ) {}\n    async initializatedBoardReaction(\n        boardId: number,\n    ): Promise {\n        const boardReaction = this.boardReactionRepository.create({\n            boardId,\n            like: 0,\n            hate: 0,\n        });\n\n        return await this.boardReactionRepository.save(boardReaction);\n    }\n\n    async findBoardReaction(boardId: number): Promise {\n        const findReaction = await this.boardReactionRepository.findOneBy({\n            boardId,\n        });\n\n        if (!findReaction) {\n            throw new HttpException(\n                `boardID: ${boardId} is not found`,\n                HttpStatus.NOT_FOUND,\n            );\n        }\n\n        return findReaction;\n    }\n\n    async deleteBoardReaction(boardId: number): Promise {\n        const deleteBoardReaction =\n            await this.boardReactionRepository.deleteOne({\n                boardId,\n            });\n\n        if (deleteBoardReaction.deletedCount === 0) {\n            throw new HttpException(\n                `boardID: ${boardId} is not found in boardReaction`,\n                HttpStatus.NOT_FOUND,\n            );\n        }\n        return true;\n    }\n\n    async clearBoardReaction(): Promise {\n        await this.boardReactionRepository.clear();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BoardReactionResolver.html":{"url":"classes/BoardReactionResolver.html","title":"class - BoardReactionResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BoardReactionResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-reaction/board-reaction.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getBoardReaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boardReactionService: BoardReactionService)\n                    \n                \n                        \n                            \n                                Defined in src/board/board-reaction/board-reaction.resolver.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boardReactionService\n                                                  \n                                                        \n                                                                        BoardReactionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getBoardReaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBoardReaction(boardId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board-reaction/board-reaction.resolver.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BoardReactionService } from './board-reaction.service';\nimport { Args, Int, Query, Resolver } from '@nestjs/graphql';\nimport { BoardReactionSchema } from './schema/board-reaction.schema';\n\n@Resolver(() => BoardReactionSchema)\nexport class BoardReactionResolver {\n    constructor(private readonly boardReactionService: BoardReactionService) {}\n\n    @Query(() => BoardReactionSchema)\n    getBoardReaction(@Args('boardId', { type: () => Int }) boardId: number) {\n        return this.boardReactionService.getBoardReaction(boardId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BoardReactionSchema.html":{"url":"classes/BoardReactionSchema.html","title":"class - BoardReactionSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BoardReactionSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-reaction/schema/board-reaction.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                boardId\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                hate\n                            \n                            \n                                    \n                                like\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-reaction/schema/board-reaction.schema.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        boardId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-reaction/schema/board-reaction.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-reaction/schema/board-reaction.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        hate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-reaction/schema/board-reaction.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        like\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-reaction/schema/board-reaction.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-reaction/schema/board-reaction.schema.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, Int, ObjectType } from '@nestjs/graphql';\n\nimport { ObjectId } from 'typeorm';\n\n@ObjectType()\nexport class BoardReactionSchema {\n    @Field(() => ID)\n    _id: ObjectId;\n\n    @Field(() => Int)\n    boardId: number;\n\n    @Field(() => Int)\n    like: number = 0;\n\n    @Field(() => Int)\n    hate: number = 0;\n\n    @Field(() => Date)\n    createdAt: Date;\n\n    @Field(() => Date)\n    updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BoardReactionService.html":{"url":"injectables/BoardReactionService.html","title":"injectable - BoardReactionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BoardReactionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-reaction/board-reaction.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getBoardReaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boardReactionRepository: BoardReactionRepository)\n                    \n                \n                        \n                            \n                                Defined in src/board/board-reaction/board-reaction.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boardReactionRepository\n                                                  \n                                                        \n                                                                        BoardReactionRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getBoardReaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBoardReaction(boardId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board-reaction/board-reaction.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BoardReactionEntity } from './entity/board-reaction.entity';\nimport { BoardReactionRepository } from './repository/boardReactionRepository';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class BoardReactionService {\n    constructor(\n        private readonly boardReactionRepository: BoardReactionRepository,\n    ) {}\n\n    async getBoardReaction(boardId: number): Promise {\n        return this.boardReactionRepository.findBoardReaction(boardId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BoardRepository.html":{"url":"injectables/BoardRepository.html","title":"injectable - BoardRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BoardRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/repository/board.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearBoard\n                            \n                            \n                                    Async\n                                countBoard\n                            \n                            \n                                createBoard\n                            \n                            \n                                    Async\n                                deleteBoard\n                            \n                            \n                                    Async\n                                findAllBoard\n                            \n                            \n                                    Async\n                                findBoard\n                            \n                            \n                                    Async\n                                saveBoard\n                            \n                            \n                                    Async\n                                updateAll\n                            \n                            \n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boardRepository: MongoRepository)\n                    \n                \n                        \n                            \n                                Defined in src/board/repository/board.repository.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boardRepository\n                                                  \n                                                        \n                                                                        MongoRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        clearBoard\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearBoard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/repository/board.repository.ts:125\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        countBoard\n                        \n                    \n                \n            \n            \n                \n                        \n                    countBoard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/repository/board.repository.ts:129\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createBoard\n                        \n                    \n                \n            \n            \n                \ncreateBoard(createBoard: CreateBoardDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/repository/board.repository.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createBoard\n                                            \n                                                            CreateBoardDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         BoardEntity\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteBoard\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteBoard(boardId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/repository/board.repository.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllBoard\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllBoard(page: number, take: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/repository/board.repository.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                take\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findBoard\n                        \n                    \n                \n            \n            \n                \n                        \n                    findBoard(boardId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/repository/board.repository.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveBoard\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveBoard(board: BoardEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/repository/board.repository.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                board\n                                            \n                                                            BoardEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateAll(boardId: number, updateBoard: UpdateBoardDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/repository/board.repository.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateBoard\n                                            \n                                                            UpdateBoardDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateOne(boardId: number, updateBoard: UpdateBoardDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/repository/board.repository.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateBoard\n                                            \n                                                            UpdateBoardDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MongoRepository } from 'typeorm';\nimport { BoardEntity } from '../entity/board.entity';\nimport {\n    BadRequestException,\n    HttpException,\n    HttpStatus,\n    Injectable,\n    NotFoundException,\n} from '@nestjs/common';\nimport { CreateBoardDTO } from '../dto/create-board.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UpdateBoardDTO } from '../dto/update-board.dto';\nimport { PaginationResponseDTO } from '../dto/pagination-response.dto';\n\n@Injectable()\nexport class BoardRepository {\n    constructor(\n        @InjectRepository(BoardEntity, 'MongoDB')\n        private readonly boardRepository: MongoRepository,\n    ) {}\n\n    createBoard(createBoard: CreateBoardDTO): BoardEntity {\n        const {\n            author,\n            title,\n            content,\n            imageUrl,\n            youtubeUrl,\n            password,\n            boardAddressInput,\n        } = createBoard;\n\n        return this.boardRepository.create({\n            author,\n            title,\n            content,\n            password,\n            ...(imageUrl?.length > 0 && { imageUrl }),\n            ...(youtubeUrl && { youtubeUrl }),\n            ...(boardAddressInput && { boardAddressOutput: boardAddressInput }),\n        });\n    }\n\n    async saveBoard(board: BoardEntity): Promise {\n        const saveBoard = await this.boardRepository.save(board);\n        if (!saveBoard) {\n            throw new BadRequestException(\n                `Failed to save the board in database`,\n            );\n        }\n\n        return saveBoard;\n    }\n\n    async findAllBoard(\n        page: number,\n        take: number,\n    ): Promise {\n        const [result, totalCount] = await this.boardRepository.findAndCount({\n            skip: (page - 1) * take,\n            take,\n            select: ['boardId', 'title', 'author', 'createdAt'],\n        });\n\n        return { result, totalCount };\n    }\n\n    async findBoard(boardId: number): Promise {\n        const findBoard = await this.boardRepository.findOne({\n            where: { boardId },\n        });\n\n        if (!findBoard) {\n            throw new NotFoundException(`boardID: ${boardId} is not found`);\n        }\n\n        return findBoard;\n    }\n\n    async updateOne(\n        boardId: number,\n        updateBoard: UpdateBoardDTO,\n    ): Promise {\n        const updateBoardDB = await this.boardRepository.update(\n            { boardId },\n            updateBoard,\n        );\n\n        if (updateBoardDB.affected === 0) {\n            throw new HttpException(\n                `boardID: ${boardId} is not update`,\n                HttpStatus.NOT_FOUND,\n            );\n        }\n\n        return await this.boardRepository.findOneBy({ boardId });\n    }\n\n    async updateAll(\n        boardId: number,\n        updateBoard: UpdateBoardDTO,\n    ): Promise {\n        const updateBoardDB = await this.findBoard(boardId);\n\n        Object.assign(updateBoardDB, updateBoard);\n\n        await this.saveBoard(updateBoardDB);\n\n        return await this.boardRepository.findOneBy({ boardId });\n    }\n\n    async deleteBoard(boardId: number): Promise {\n        const deleteBoardDB = await this.boardRepository.deleteOne({\n            boardId,\n        });\n\n        if (deleteBoardDB.deletedCount === 0) {\n            throw new NotFoundException(\n                `boardID: ${boardId} is not found in board`,\n            );\n        }\n        return true;\n    }\n\n    async clearBoard(): Promise {\n        await this.boardRepository.clear();\n    }\n\n    async countBoard(): Promise {\n        return await this.boardRepository.count();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BoardResolver.html":{"url":"classes/BoardResolver.html","title":"class - BoardResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BoardResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                clearBoard\n                            \n                            \n                                    \n                                createBoard\n                            \n                            \n                                    \n                                deleteBoard\n                            \n                            \n                                    \n                                getBoard\n                            \n                            \n                                    \n                                getBoards\n                            \n                            \n                                    \n                                updateBoard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boardService: BoardService)\n                    \n                \n                        \n                            \n                                Defined in src/board/board.resolver.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boardService\n                                                  \n                                                        \n                                                                        BoardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        clearBoard\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearBoard()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board.resolver.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createBoard\n                        \n                    \n                \n            \n            \n                \n                        \n                    createBoard(createBoard: CreateBoardInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board.resolver.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createBoard\n                                            \n                                                            CreateBoardInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteBoard\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteBoard(boardId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board.resolver.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getBoard\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBoard(boardId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board.resolver.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getBoards\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBoards(page: number, take: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board.resolver.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                take\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    5\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateBoard\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateBoard(boardId: number, updateBoard: UpdateBoardInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/board/board.resolver.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateBoard\n                                            \n                                                            UpdateBoardInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Resolver, Query, Mutation, Args, Int } from '@nestjs/graphql';\nimport { BoardService } from './board.service';\nimport { BoardSchema } from './schema/board.schema';\nimport { CreateBoardInput } from './schema/create-board-input.schema';\nimport { UpdateBoardInput } from './schema/update-board-input.schema';\nimport { BoardPaginationResponse } from './schema/board-pagination-response.schema';\n\n@Resolver(() => BoardSchema)\nexport class BoardResolver {\n    constructor(private readonly boardService: BoardService) {}\n\n    @Query(() => BoardPaginationResponse)\n    getBoards(\n        @Args('page', { type: () => Int, nullable: true }) page: number = 1,\n        @Args('take', { type: () => Int, nullable: true }) take: number = 5,\n    ) {\n        return this.boardService.findAll({ page, take });\n    }\n\n    @Query(() => BoardSchema)\n    getBoard(@Args('boardId', { type: () => Int }) boardId: number) {\n        return this.boardService.findOne(boardId);\n    }\n\n    @Mutation(() => BoardSchema)\n    createBoard(\n        @Args('createBoardInput')\n        createBoard: CreateBoardInput,\n    ) {\n        return this.boardService.create(createBoard);\n    }\n\n    @Mutation(() => BoardSchema)\n    updateBoard(\n        @Args('boardId', { type: () => Int }) boardId: number,\n        @Args('updateBoardInput') updateBoard: UpdateBoardInput,\n    ) {\n        return this.boardService.updateAll(boardId, updateBoard);\n    }\n\n    @Mutation(() => Boolean)\n    deleteBoard(@Args('boardId', { type: () => Int }) boardId: number) {\n        return this.boardService.remove(boardId);\n    }\n\n    @Mutation(() => Boolean)\n    clearBoard() {\n        return this.boardService.clear();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BoardSchema.html":{"url":"classes/BoardSchema.html","title":"class - BoardSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BoardSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/schema/board.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                boardAddressOutput\n                            \n                            \n                                    \n                                boardId\n                            \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    Optional\n                                youtubeUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/board.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/board.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        boardAddressOutput\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BoardAddressOutput\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/board.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        boardId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/board.schema.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/board.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/board.schema.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/board.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/board.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/board.schema.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        youtubeUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/board.schema.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, Int, ObjectType } from '@nestjs/graphql';\n\nimport { BoardAddressOutput } from './board-address-input.schema';\nimport { ObjectId } from 'typeorm';\n\n@ObjectType()\nexport class BoardSchema {\n    @Field(() => ID)\n    _id: ObjectId;\n\n    @Field()\n    author: string;\n\n    @Field()\n    title: string;\n\n    @Field()\n    content: string;\n\n    @Field(() => [String], { nullable: true })\n    imageUrl?: string[];\n\n    @Field({ nullable: true })\n    youtubeUrl?: string;\n\n    @Field(() => BoardAddressOutput, { nullable: true })\n    boardAddressOutput?: BoardAddressOutput;\n\n    @Field(() => Int)\n    boardId: number;\n\n    @Field(() => Date)\n    createdAt: Date;\n\n    @Field(() => Date)\n    updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BoardService.html":{"url":"injectables/BoardService.html","title":"injectable - BoardService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BoardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkBoardEntityCount\n                            \n                            \n                                    Async\n                                clear\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getBoardCount\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                updateAll\n                            \n                            \n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boardRepository: BoardRepository, boardIdCounterRepository: BoardIdCounterRepository, boardReactionRepository: BoardReactionRepository, boardCommentRepository: BoardCommentRepository, bcryptService: BcryptService)\n                    \n                \n                        \n                            \n                                Defined in src/board/board.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boardRepository\n                                                  \n                                                        \n                                                                        BoardRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        boardIdCounterRepository\n                                                  \n                                                        \n                                                                        BoardIdCounterRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        boardReactionRepository\n                                                  \n                                                        \n                                                                        BoardReactionRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        boardCommentRepository\n                                                  \n                                                        \n                                                                        BoardCommentRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        bcryptService\n                                                  \n                                                        \n                                                                        BcryptService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkBoardEntityCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkBoardEntityCount(page: number, take: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board.service.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                take\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        clear\n                        \n                    \n                \n            \n            \n                \n                        \n                    clear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createBoard: CreateBoardDTO | CreateBoardInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createBoard\n                                            \n                                                            CreateBoardDTO | CreateBoardInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: PaginationDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            PaginationDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(boardId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getBoardCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBoardCount()\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(boardId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateAll(boardId: number, updateBoard: UpdateBoardDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateBoard\n                                            \n                                                            UpdateBoardDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateOne(boardId: number, updateBoard: UpdateBoardDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/board/board.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateBoard\n                                            \n                                                            UpdateBoardDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    Injectable,\n    NotFoundException,\n} from '@nestjs/common';\n\nimport { BcryptService } from 'src/bcrypt/bcrypt.service';\nimport { BoardCommentRepository } from './board-comment/repository/board-comment.repository';\nimport { BoardEntity } from './entity/board.entity';\nimport { BoardIdCounterRepository } from './repository/board-id-counter.repository';\nimport { BoardReactionRepository } from './board-reaction/repository/boardReactionRepository';\nimport { BoardRepository } from './repository/board.repository';\nimport { CreateBoardDTO } from './dto/create-board.dto';\nimport { CreateBoardInput } from './schema/create-board-input.schema';\nimport { PaginationDTO } from './dto/pagination.dto';\nimport { PaginationResponseDTO } from './dto/pagination-response.dto';\nimport { UpdateBoardDTO } from './dto/update-board.dto';\n\n@Injectable()\nexport class BoardService {\n    constructor(\n        private readonly boardRepository: BoardRepository,\n        private readonly boardIdCounterRepository: BoardIdCounterRepository,\n        private readonly boardReactionRepository: BoardReactionRepository,\n        private readonly boardCommentRepository: BoardCommentRepository,\n        private readonly bcryptService: BcryptService,\n    ) {}\n    async create(\n        createBoard: CreateBoardDTO | CreateBoardInput,\n    ): Promise {\n        const password = await this.bcryptService.transformPassword(\n            createBoard.password,\n        );\n\n        const board = this.boardRepository.createBoard({\n            ...createBoard,\n            password,\n        });\n\n        const boardId =\n            await this.boardIdCounterRepository.incrementBoardId('board');\n        board.boardId = boardId;\n\n        this.boardReactionRepository.initializatedBoardReaction(boardId);\n\n        return await this.boardRepository.saveBoard(board);\n    }\n\n    async findAll({\n        page,\n        take,\n    }: PaginationDTO): Promise {\n        await this.checkBoardEntityCount(page, take);\n        return await this.boardRepository.findAllBoard(page, take);\n    }\n\n    async findOne(boardId: number): Promise {\n        return await this.boardRepository.findBoard(boardId);\n    }\n\n    async getBoardCount(): Promise {\n        return await this.boardRepository.countBoard();\n    }\n\n    async updateOne(\n        boardId: number,\n        updateBoard: UpdateBoardDTO,\n    ): Promise {\n        return await this.boardRepository.updateOne(boardId, updateBoard);\n    }\n\n    async updateAll(\n        boardId: number,\n        updateBoard: UpdateBoardDTO,\n    ): Promise {\n        return await this.boardRepository.updateAll(boardId, updateBoard);\n    }\n\n    async remove(boardId: number): Promise {\n        const responseBoard = await this.boardRepository.deleteBoard(boardId);\n        const responseBoardReaction =\n            await this.boardReactionRepository.deleteBoardReaction(boardId);\n\n        const responseBoardComment =\n            await this.boardCommentRepository.deleteAllComment(boardId);\n\n        if (!responseBoard || !responseBoardReaction || !responseBoardComment) {\n            throw new NotFoundException(\n                `boardID: ${boardId} is not found in Board`,\n            );\n        }\n        return true;\n    }\n\n    async clear(): Promise {\n        await this.boardRepository.clearBoard();\n\n        await this.boardReactionRepository.clearBoardReaction();\n\n        await this.boardCommentRepository.clearComment();\n\n        return true;\n    }\n\n    async checkBoardEntityCount(page: number, take: number) {\n        const maxCount = await this.boardRepository.countBoard();\n        const maxPage = Math.ceil(maxCount / take);\n\n        if (page > maxPage) {\n            throw new BadRequestException(\n                `Entity count exceeds the limit of ${page}. Current count: ${maxPage}`,\n            );\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBoardCommentDTO.html":{"url":"classes/CreateBoardCommentDTO.html","title":"class - CreateBoardCommentDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBoardCommentDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-comment/dto/create-board-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                author\n                            \n                            \n                                    \n                                    \n                                    \n                                content\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                parentId\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                rating\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/dto/create-board-comment.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Length(1, 100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/dto/create-board-comment.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        parentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/dto/create-board-comment.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/dto/create-board-comment.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Min(1)@Max(5)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/dto/create-board-comment.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsNotEmpty,\n    IsNumber,\n    IsOptional,\n    IsString,\n    Length,\n    Max,\n    Min,\n} from 'class-validator';\n\nexport class CreateBoardCommentDTO {\n    @IsString()\n    @IsNotEmpty()\n    author: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @Length(1, 100)\n    content: string;\n\n    @IsNumber()\n    @IsOptional()\n    @Min(1)\n    @Max(5)\n    rating?: number;\n\n    @IsString()\n    @IsOptional()\n    parentId?: string;\n\n    @IsString()\n    @IsNotEmpty()\n    password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBoardCommentInput.html":{"url":"classes/CreateBoardCommentInput.html","title":"class - CreateBoardCommentInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBoardCommentInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-comment/schema/create-board-comment-input.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                author\n                            \n                            \n                                    \n                                    \n                                    \n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                parentId\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                rating\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/schema/create-board-comment-input.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/schema/create-board-comment-input.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        parentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/schema/create-board-comment-input.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/schema/create-board-comment-input.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/schema/create-board-comment-input.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, Int } from '@nestjs/graphql';\nimport { IsNotEmpty, IsNumber, IsOptional, IsString } from 'class-validator';\n\n@InputType()\nexport class CreateBoardCommentInput {\n    @Field()\n    @IsString()\n    @IsNotEmpty()\n    author: string;\n\n    @Field()\n    @IsString()\n    @IsNotEmpty()\n    content: string;\n\n    @Field(() => Int, { nullable: true })\n    @IsNumber()\n    @IsOptional()\n    rating?: number;\n\n    @Field({ nullable: true })\n    @IsString()\n    @IsOptional()\n    parentId?: string;\n\n    @Field()\n    @IsString()\n    @IsNotEmpty()\n    password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBoardDTO.html":{"url":"classes/CreateBoardDTO.html","title":"class - CreateBoardDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBoardDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/dto/create-board.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                author\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                boardAddressInput\n                            \n                            \n                                    \n                                    \n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                youtubeUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/dto/create-board.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        boardAddressInput\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BoardAddressDTO\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested({each: true})@Type(undefined)@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/dto/create-board.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/dto/create-board.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@ArrayMaxSize(3)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/dto/create-board.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/dto/create-board.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/dto/create-board.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        youtubeUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/dto/create-board.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ArrayMaxSize,\n    IsArray,\n    IsNotEmpty,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from 'class-validator';\n\nimport { BoardAddressDTO } from './board-addresss.dto';\nimport { Type } from 'class-transformer';\n\nexport class CreateBoardDTO {\n    @IsString()\n    @IsNotEmpty()\n    author: string;\n\n    @IsString()\n    @IsNotEmpty()\n    title: string;\n\n    @IsString()\n    @IsNotEmpty()\n    content: string;\n\n    @IsArray()\n    @IsOptional()\n    @IsString({ each: true })\n    @ArrayMaxSize(3)\n    imageUrl?: string[];\n\n    @IsString()\n    @IsOptional()\n    youtubeUrl?: string;\n\n    @IsString()\n    @IsNotEmpty()\n    password: string;\n\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => BoardAddressDTO)\n    @IsObject()\n    boardAddressInput?: BoardAddressDTO;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBoardInput.html":{"url":"classes/CreateBoardInput.html","title":"class - CreateBoardInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBoardInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/schema/create-board-input.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                author\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                boardAddressInput\n                            \n                            \n                                    \n                                    \n                                    \n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                youtubeUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/create-board-input.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        boardAddressInput\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BoardAddressInput\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/create-board-input.schema.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/create-board-input.schema.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})@IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/create-board-input.schema.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/create-board-input.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/create-board-input.schema.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        youtubeUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/create-board-input.schema.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\nimport {\n    IsArray,\n    IsNotEmpty,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from 'class-validator';\n\nimport { BoardAddressInput } from './board-address-input.schema';\nimport { Type } from 'class-transformer';\n\n@InputType()\nexport class CreateBoardInput {\n    @Field()\n    @IsString()\n    @IsNotEmpty()\n    author: string;\n\n    @Field()\n    @IsString()\n    @IsNotEmpty()\n    password: string;\n\n    @Field()\n    @IsString()\n    @IsNotEmpty()\n    title: string;\n\n    @Field()\n    @IsString()\n    @IsNotEmpty()\n    content: string;\n\n    @Field(() => [String], { nullable: true })\n    @IsOptional()\n    @IsArray()\n    imageUrl?: string[];\n\n    @Field({ nullable: true })\n    @IsOptional()\n    @IsString()\n    youtubeUrl?: string;\n\n    @Field(() => [BoardAddressInput], { nullable: true })\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => BoardAddressInput)\n    boardAddressInput?: BoardAddressInput;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DateTimeScalarConfig.html":{"url":"interfaces/DateTimeScalarConfig.html","title":"interface - DateTimeScalarConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DateTimeScalarConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/generated/graphql.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GraphQLScalarTypeConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    GraphQLResolveInfo,\n    GraphQLScalarType,\n    GraphQLScalarTypeConfig,\n} from 'graphql';\nexport type Maybe = T | null;\nexport type InputMaybe = Maybe;\nexport type Exact = {\n    [K in keyof T]: T[K];\n};\nexport type MakeOptional = Omit & {\n    [SubKey in K]?: Maybe;\n};\nexport type MakeMaybe = Omit & {\n    [SubKey in K]: Maybe;\n};\nexport type MakeEmpty = { [_ in K]?: never };\nexport type Incremental =\n    | T\n    | {\n          [P in keyof T]?: P extends ' $fragmentName' | '__typename'\n              ? T[P]\n              : never;\n      };\nexport type RequireFields = Omit & {\n    [P in K]-?: NonNullable;\n};\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n    ID: { input: string; output: string };\n    String: { input: string; output: string };\n    Boolean: { input: boolean; output: boolean };\n    Int: { input: number; output: number };\n    Float: { input: number; output: number };\n    /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */\n    DateTime: { input: any; output: any };\n};\n\nexport type BoardAddressInput = {\n    address: Scalars['String']['input'];\n    detailAddress: Scalars['String']['input'];\n    zoneCode: Scalars['Int']['input'];\n};\n\nexport type BoardAddressOutput = {\n    __typename?: 'BoardAddressOutput';\n    address: Scalars['String']['output'];\n    detailAddress: Scalars['String']['output'];\n    zoneCode: Scalars['Int']['output'];\n};\n\nexport type BoardCommentResponseDto = {\n    __typename?: 'BoardCommentResponseDTO';\n    _id: Scalars['ID']['output'];\n    author: Scalars['String']['output'];\n    boardId: Scalars['Int']['output'];\n    content: Scalars['String']['output'];\n    createdAt: Scalars['DateTime']['output'];\n    parentId?: Maybe;\n    rating?: Maybe;\n    replies?: Maybe>;\n    updatedAt: Scalars['DateTime']['output'];\n};\n\nexport type BoardPaginationResponse = {\n    __typename?: 'BoardPaginationResponse';\n    result: Array;\n    totalCount: Scalars['Int']['output'];\n};\n\nexport type BoardReactionSchema = {\n    __typename?: 'BoardReactionSchema';\n    _id: Scalars['ID']['output'];\n    boardId: Scalars['Int']['output'];\n    createdAt: Scalars['DateTime']['output'];\n    hate: Scalars['Int']['output'];\n    like: Scalars['Int']['output'];\n    updatedAt: Scalars['DateTime']['output'];\n};\n\nexport type BoardSchema = {\n    __typename?: 'BoardSchema';\n    _id: Scalars['ID']['output'];\n    author: Scalars['String']['output'];\n    boardAddressOutput?: Maybe;\n    boardId: Scalars['Int']['output'];\n    content: Scalars['String']['output'];\n    createdAt: Scalars['DateTime']['output'];\n    imageUrl?: Maybe>;\n    title: Scalars['String']['output'];\n    updatedAt: Scalars['DateTime']['output'];\n    youtubeUrl?: Maybe;\n};\n\nexport type CreateBoardCommentInput = {\n    author: Scalars['String']['input'];\n    content: Scalars['String']['input'];\n    parentId?: InputMaybe;\n    password: Scalars['String']['input'];\n    rating?: InputMaybe;\n};\n\nexport type CreateBoardInput = {\n    author: Scalars['String']['input'];\n    boardAddressInput?: InputMaybe>;\n    content: Scalars['String']['input'];\n    imageUrl?: InputMaybe>;\n    password: Scalars['String']['input'];\n    title: Scalars['String']['input'];\n    youtubeUrl?: InputMaybe;\n};\n\nexport type Mutation = {\n    __typename?: 'Mutation';\n    clearBoard: Scalars['Boolean']['output'];\n    createBoard: BoardSchema;\n    createBoardComment: BoardCommentResponseDto;\n    deleteBoard: Scalars['Boolean']['output'];\n    deleteBoardComment: Scalars['Boolean']['output'];\n    isPasswordCorrect: Scalars['Boolean']['output'];\n    updateBoard: BoardSchema;\n    updateBoardComment: BoardCommentResponseDto;\n};\n\nexport type MutationCreateBoardArgs = {\n    createBoardInput: CreateBoardInput;\n};\n\nexport type MutationCreateBoardCommentArgs = {\n    boardId: Scalars['Int']['input'];\n    createBoardComment: CreateBoardCommentInput;\n};\n\nexport type MutationDeleteBoardArgs = {\n    boardId: Scalars['Int']['input'];\n};\n\nexport type MutationDeleteBoardCommentArgs = {\n    boardId: Scalars['Int']['input'];\n    commentId: Scalars['String']['input'];\n};\n\nexport type MutationIsPasswordCorrectArgs = {\n    boardId: Scalars['Int']['input'];\n    password: Scalars['String']['input'];\n};\n\nexport type MutationUpdateBoardArgs = {\n    boardId: Scalars['Int']['input'];\n    updateBoardInput: UpdateBoardInput;\n};\n\nexport type MutationUpdateBoardCommentArgs = {\n    boardId: Scalars['Int']['input'];\n    commentId: Scalars['String']['input'];\n    updateBoardComment: UpdateBoardCommentInput;\n};\n\nexport type Query = {\n    __typename?: 'Query';\n    getBoard: BoardSchema;\n    getBoardComment: Array;\n    getBoardReaction: BoardReactionSchema;\n    getBoards: BoardPaginationResponse;\n};\n\nexport type QueryGetBoardArgs = {\n    boardId: Scalars['Int']['input'];\n};\n\nexport type QueryGetBoardCommentArgs = {\n    boardId: Scalars['Int']['input'];\n    page?: InputMaybe;\n};\n\nexport type QueryGetBoardReactionArgs = {\n    boardId: Scalars['Int']['input'];\n};\n\nexport type QueryGetBoardsArgs = {\n    page?: InputMaybe;\n    take?: InputMaybe;\n};\n\nexport type UpdateBoardCommentInput = {\n    content: Scalars['String']['input'];\n    parentId?: InputMaybe;\n    password: Scalars['String']['input'];\n    rating?: InputMaybe;\n};\n\nexport type UpdateBoardInput = {\n    boardAddressInput?: InputMaybe>;\n    content: Scalars['String']['input'];\n    imageUrl?: InputMaybe>;\n    title: Scalars['String']['input'];\n    youtubeUrl?: InputMaybe;\n};\n\nexport type CreateBoardCommentMutationVariables = Exact;\n\nexport type CreateBoardCommentMutation = {\n    __typename?: 'Mutation';\n    createBoardComment: {\n        __typename?: 'BoardCommentResponseDTO';\n        author: string;\n        content: string;\n        rating?: number | null;\n        parentId?: string | null;\n        _id: string;\n        createdAt: any;\n        replies?: Array | null;\n    };\n};\n\nexport type UpdateBoardCommentMutationVariables = Exact;\n\nexport type UpdateBoardCommentMutation = {\n    __typename?: 'Mutation';\n    updateBoardComment: {\n        __typename?: 'BoardCommentResponseDTO';\n        author: string;\n        content: string;\n        rating?: number | null;\n        parentId?: string | null;\n        _id: string;\n        createdAt: any;\n        replies?: Array | null;\n    };\n};\n\nexport type DeleteBoardCommentMutationVariables = Exact;\n\nexport type DeleteBoardCommentMutation = {\n    __typename?: 'Mutation';\n    deleteBoardComment: boolean;\n};\n\nexport type IsPasswordCorrectMutationVariables = Exact;\n\nexport type IsPasswordCorrectMutation = {\n    __typename?: 'Mutation';\n    isPasswordCorrect: boolean;\n};\n\nexport type CreateBoardMutationVariables = Exact;\n\nexport type CreateBoardMutation = {\n    __typename?: 'Mutation';\n    createBoard: {\n        __typename?: 'BoardSchema';\n        author: string;\n        title: string;\n        content: string;\n        imageUrl?: Array | null;\n        youtubeUrl?: string | null;\n        createdAt: any;\n        boardAddressOutput?: {\n            __typename?: 'BoardAddressOutput';\n            zoneCode: number;\n            address: string;\n            detailAddress: string;\n        } | null;\n    };\n};\n\nexport type UpdateBoardMutationVariables = Exact;\n\nexport type UpdateBoardMutation = {\n    __typename?: 'Mutation';\n    updateBoard: {\n        __typename?: 'BoardSchema';\n        author: string;\n        title: string;\n        content: string;\n        imageUrl?: Array | null;\n        youtubeUrl?: string | null;\n        createdAt: any;\n        boardAddressOutput?: {\n            __typename?: 'BoardAddressOutput';\n            zoneCode: number;\n            address: string;\n            detailAddress: string;\n        } | null;\n    };\n};\n\nexport type DeleteBoardMutationVariables = Exact;\n\nexport type DeleteBoardMutation = {\n    __typename?: 'Mutation';\n    deleteBoard: boolean;\n};\n\nexport type ClearBoardMutationVariables = Exact;\n\nexport type ClearBoardMutation = {\n    __typename?: 'Mutation';\n    clearBoard: boolean;\n};\n\nexport type GetBoardCommentQueryVariables = Exact;\n}>;\n\nexport type GetBoardCommentQuery = {\n    __typename?: 'Query';\n    getBoardComment: Array | null;\n    }>;\n};\n\nexport type GetBoardReactionQueryVariables = Exact;\n\nexport type GetBoardReactionQuery = {\n    __typename?: 'Query';\n    getBoardReaction: {\n        __typename?: 'BoardReactionSchema';\n        like: number;\n        hate: number;\n    };\n};\n\nexport type GetBoardsQueryVariables = Exact;\n    take?: InputMaybe;\n}>;\n\nexport type GetBoardsQuery = {\n    __typename?: 'Query';\n    getBoards: {\n        __typename?: 'BoardPaginationResponse';\n        totalCount: number;\n        result: Array;\n    };\n};\n\nexport type GetBoardQueryVariables = Exact;\n\nexport type GetBoardQuery = {\n    __typename?: 'Query';\n    getBoard: {\n        __typename?: 'BoardSchema';\n        author: string;\n        title: string;\n        content: string;\n        imageUrl?: Array | null;\n        youtubeUrl?: string | null;\n        createdAt: any;\n        boardAddressOutput?: {\n            __typename?: 'BoardAddressOutput';\n            zoneCode: number;\n            address: string;\n            detailAddress: string;\n        } | null;\n    };\n};\n\nexport type ResolverTypeWrapper = Promise | T;\n\nexport type ResolverWithResolve = {\n    resolve: ResolverFn;\n};\nexport type Resolver =\n    | ResolverFn\n    | ResolverWithResolve;\n\nexport type ResolverFn = (\n    parent: TParent,\n    args: TArgs,\n    context: TContext,\n    info: GraphQLResolveInfo,\n) => Promise | TResult;\n\nexport type SubscriptionSubscribeFn = (\n    parent: TParent,\n    args: TArgs,\n    context: TContext,\n    info: GraphQLResolveInfo,\n) => AsyncIterable | Promise>;\n\nexport type SubscriptionResolveFn = (\n    parent: TParent,\n    args: TArgs,\n    context: TContext,\n    info: GraphQLResolveInfo,\n) => TResult | Promise;\n\nexport interface SubscriptionSubscriberObject {\n    subscribe: SubscriptionSubscribeFn;\n    resolve?: SubscriptionResolveFn;\n}\n\nexport interface SubscriptionResolverObject {\n    subscribe: SubscriptionSubscribeFn;\n    resolve: SubscriptionResolveFn;\n}\n\nexport type SubscriptionObject =\n    | SubscriptionSubscriberObject\n    | SubscriptionResolverObject;\n\nexport type SubscriptionResolver =\n    | ((\n          ...args: any[]\n      ) => SubscriptionObject)\n    | SubscriptionObject;\n\nexport type TypeResolveFn = (\n    parent: TParent,\n    context: TContext,\n    info: GraphQLResolveInfo,\n) => Maybe | Promise>;\n\nexport type IsTypeOfResolverFn = (\n    obj: T,\n    context: TContext,\n    info: GraphQLResolveInfo,\n) => boolean | Promise;\n\nexport type NextResolverFn = () => Promise;\n\nexport type DirectiveResolverFn = (\n    next: NextResolverFn,\n    parent: TParent,\n    args: TArgs,\n    context: TContext,\n    info: GraphQLResolveInfo,\n) => TResult | Promise;\n\n/** Mapping between all available schema types and the resolvers types */\nexport type ResolversTypes = {\n    BoardAddressInput: BoardAddressInput;\n    BoardAddressOutput: ResolverTypeWrapper;\n    BoardCommentResponseDTO: ResolverTypeWrapper;\n    BoardPaginationResponse: ResolverTypeWrapper;\n    BoardReactionSchema: ResolverTypeWrapper;\n    BoardSchema: ResolverTypeWrapper;\n    Boolean: ResolverTypeWrapper;\n    CreateBoardCommentInput: CreateBoardCommentInput;\n    CreateBoardInput: CreateBoardInput;\n    DateTime: ResolverTypeWrapper;\n    ID: ResolverTypeWrapper;\n    Int: ResolverTypeWrapper;\n    Mutation: ResolverTypeWrapper;\n    Query: ResolverTypeWrapper;\n    String: ResolverTypeWrapper;\n    UpdateBoardCommentInput: UpdateBoardCommentInput;\n    UpdateBoardInput: UpdateBoardInput;\n};\n\n/** Mapping between all available schema types and the resolvers parents */\nexport type ResolversParentTypes = {\n    BoardAddressInput: BoardAddressInput;\n    BoardAddressOutput: BoardAddressOutput;\n    BoardCommentResponseDTO: BoardCommentResponseDto;\n    BoardPaginationResponse: BoardPaginationResponse;\n    BoardReactionSchema: BoardReactionSchema;\n    BoardSchema: BoardSchema;\n    Boolean: Scalars['Boolean']['output'];\n    CreateBoardCommentInput: CreateBoardCommentInput;\n    CreateBoardInput: CreateBoardInput;\n    DateTime: Scalars['DateTime']['output'];\n    ID: Scalars['ID']['output'];\n    Int: Scalars['Int']['output'];\n    Mutation: {};\n    Query: {};\n    String: Scalars['String']['output'];\n    UpdateBoardCommentInput: UpdateBoardCommentInput;\n    UpdateBoardInput: UpdateBoardInput;\n};\n\nexport type BoardAddressOutputResolvers = {\n    address?: Resolver;\n    detailAddress?: Resolver;\n    zoneCode?: Resolver;\n    __isTypeOf?: IsTypeOfResolverFn;\n};\n\nexport type BoardCommentResponseDtoResolvers = {\n    _id?: Resolver;\n    author?: Resolver;\n    boardId?: Resolver;\n    content?: Resolver;\n    createdAt?: Resolver;\n    parentId?: Resolver,\n        ParentType,\n        ContextType\n    >;\n    rating?: Resolver, ParentType, ContextType>;\n    replies?: Resolver>,\n        ParentType,\n        ContextType\n    >;\n    updatedAt?: Resolver;\n    __isTypeOf?: IsTypeOfResolverFn;\n};\n\nexport type BoardPaginationResponseResolvers = {\n    result?: Resolver,\n        ParentType,\n        ContextType\n    >;\n    totalCount?: Resolver;\n    __isTypeOf?: IsTypeOfResolverFn;\n};\n\nexport type BoardReactionSchemaResolvers = {\n    _id?: Resolver;\n    boardId?: Resolver;\n    createdAt?: Resolver;\n    hate?: Resolver;\n    like?: Resolver;\n    updatedAt?: Resolver;\n    __isTypeOf?: IsTypeOfResolverFn;\n};\n\nexport type BoardSchemaResolvers = {\n    _id?: Resolver;\n    author?: Resolver;\n    boardAddressOutput?: Resolver,\n        ParentType,\n        ContextType\n    >;\n    boardId?: Resolver;\n    content?: Resolver;\n    createdAt?: Resolver;\n    imageUrl?: Resolver>,\n        ParentType,\n        ContextType\n    >;\n    title?: Resolver;\n    updatedAt?: Resolver;\n    youtubeUrl?: Resolver,\n        ParentType,\n        ContextType\n    >;\n    __isTypeOf?: IsTypeOfResolverFn;\n};\n\nexport interface DateTimeScalarConfig\n    extends GraphQLScalarTypeConfig {\n    name: 'DateTime';\n}\n\nexport type MutationResolvers = {\n    clearBoard?: Resolver;\n    createBoard?: Resolver\n    >;\n    createBoardComment?: Resolver\n    >;\n    deleteBoard?: Resolver\n    >;\n    deleteBoardComment?: Resolver\n    >;\n    isPasswordCorrect?: Resolver\n    >;\n    updateBoard?: Resolver\n    >;\n    updateBoardComment?: Resolver\n    >;\n};\n\nexport type QueryResolvers = {\n    getBoard?: Resolver\n    >;\n    getBoardComment?: Resolver,\n        ParentType,\n        ContextType,\n        RequireFields\n    >;\n    getBoardReaction?: Resolver\n    >;\n    getBoards?: Resolver\n    >;\n};\n\nexport type Resolvers = {\n    BoardAddressOutput?: BoardAddressOutputResolvers;\n    BoardCommentResponseDTO?: BoardCommentResponseDtoResolvers;\n    BoardPaginationResponse?: BoardPaginationResponseResolvers;\n    BoardReactionSchema?: BoardReactionSchemaResolvers;\n    BoardSchema?: BoardSchemaResolvers;\n    DateTime?: GraphQLScalarType;\n    Mutation?: MutationResolvers;\n    Query?: QueryResolvers;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/http-exception.filter.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ArgumentsHost,\n    BadRequestException,\n    Catch,\n    ExceptionFilter,\n    HttpException,\n} from '@nestjs/common';\nimport { GqlArgumentsHost, GqlContextType } from '@nestjs/graphql';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n    catch(exception: HttpException, host: ArgumentsHost) {\n        if (host.getType() === 'http') {\n            const ctx = host.switchToHttp();\n            const response = ctx.getResponse();\n            const request = ctx.getRequest();\n            const status = exception.getStatus();\n\n            // validation Error\n            if (exception instanceof BadRequestException) {\n                const responseMessage = exception.getResponse();\n                return response.status(status).json({\n                    statusCode: status,\n                    timestamp: new Date().toISOString(),\n                    path: request.url,\n                    validationErrors: responseMessage['message'],\n                });\n            }\n\n            response.status(status).json({\n                statusCode: status,\n                timestamp: new Date().toISOString(),\n                path: request.url,\n                message: exception.message,\n            });\n        } else if (host.getType() === 'graphql') {\n            const gqlHost = GqlArgumentsHost.create(host);\n\n            const statusCode = exception.getStatus();\n            const message = exception.getResponse();\n\n            throw new HttpException(\n                {\n                    statusCode,\n                    message,\n                    timestamp: new Date().toISOString(),\n                    path: gqlHost.getInfo().fieldName,\n                },\n                statusCode,\n            );\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDeleteResponse.html":{"url":"interfaces/IDeleteResponse.html","title":"interface - IDeleteResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDeleteResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/types/interceptor.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IDeleteResponse {\n    message?: string;\n    statusCode?: number;\n}\n\nexport interface IResponseInterceptor extends IDeleteResponse {\n    data: T;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IResolverClearResponse.html":{"url":"interfaces/IResolverClearResponse.html","title":"interface - IResolverClearResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IResolverClearResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/types/resolver.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sucess\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sucess\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sucess:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IResolverClearResponse {\n    sucess: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IResponseInterceptor.html":{"url":"interfaces/IResponseInterceptor.html","title":"interface - IResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/types/interceptor.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IDeleteResponse\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IDeleteResponse {\n    message?: string;\n    statusCode?: number;\n}\n\nexport interface IResponseInterceptor extends IDeleteResponse {\n    data: T;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/logging.interceptor.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from '@nestjs/common';\nimport { GqlContextType, GqlExecutionContext } from '@nestjs/graphql';\n\nimport { Observable } from 'rxjs';\nimport { Request } from 'express';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const isHttp: boolean = context.getType() === 'http';\n        const isGraphQL: boolean =\n            context.getType() === 'graphql';\n\n        let method = '';\n        let url = '';\n\n        if (isHttp) {\n            const request: Request = context.switchToHttp().getRequest();\n            method = request.method;\n            url = request.url;\n            console.log(`Incoming ${method} request to ${url}`);\n        }\n\n        if (isGraphQL) {\n            const ctx = GqlExecutionContext.create(context);\n            const info = ctx.getInfo();\n\n            const fieldName = info.path.key;\n            const fieldMethod = info.path.typename;\n            method = fieldMethod;\n            url = fieldName;\n\n            console.log(`Incoming GraphQL ${method} : ${url}`);\n        }\n\n        console.log('Before...');\n\n        const now = Date.now();\n\n        // next.handle()는 Observable을 반환하며, 그 응답에 접근할 수 있음\n        return next.handle().pipe(\n            tap(() => {\n                console.log(`Outgoing response for ${method} ${url}`);\n                console.log(`After... ${Date.now() - now}ms`);\n            }),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDTO.html":{"url":"classes/PaginationDTO.html","title":"class - PaginationDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/dto/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsPositive()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/dto/pagination.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 5\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsPositive()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/dto/pagination.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional, IsPositive } from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nexport class PaginationDTO {\n    @IsOptional()\n    @Type(() => Number)\n    @IsPositive()\n    @IsInt()\n    page: number = 1;\n\n    @IsOptional()\n    @Type(() => Number)\n    @IsPositive()\n    @IsInt()\n    take: number = 5;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationResponseDTO.html":{"url":"classes/PaginationResponseDTO.html","title":"class - PaginationResponseDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationResponseDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/dto/pagination-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                result\n                            \n                            \n                                totalCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        result\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BoardEntity[]\n\n                    \n                \n                    \n                        \n                                Defined in src/board/dto/pagination-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/board/dto/pagination-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BoardEntity } from '../entity/board.entity';\n\nexport class PaginationResponseDTO {\n    result: BoardEntity[];\n    totalCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SubscriptionResolverObject.html":{"url":"interfaces/SubscriptionResolverObject.html","title":"interface - SubscriptionResolverObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SubscriptionResolverObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/generated/graphql.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            resolve\n                                        \n                                \n                                \n                                        \n                                            subscribe\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        resolve\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        resolve:         SubscriptionResolveFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SubscriptionResolveFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subscribe\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subscribe:         SubscriptionSubscribeFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SubscriptionSubscribeFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    GraphQLResolveInfo,\n    GraphQLScalarType,\n    GraphQLScalarTypeConfig,\n} from 'graphql';\nexport type Maybe = T | null;\nexport type InputMaybe = Maybe;\nexport type Exact = {\n    [K in keyof T]: T[K];\n};\nexport type MakeOptional = Omit & {\n    [SubKey in K]?: Maybe;\n};\nexport type MakeMaybe = Omit & {\n    [SubKey in K]: Maybe;\n};\nexport type MakeEmpty = { [_ in K]?: never };\nexport type Incremental =\n    | T\n    | {\n          [P in keyof T]?: P extends ' $fragmentName' | '__typename'\n              ? T[P]\n              : never;\n      };\nexport type RequireFields = Omit & {\n    [P in K]-?: NonNullable;\n};\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n    ID: { input: string; output: string };\n    String: { input: string; output: string };\n    Boolean: { input: boolean; output: boolean };\n    Int: { input: number; output: number };\n    Float: { input: number; output: number };\n    /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */\n    DateTime: { input: any; output: any };\n};\n\nexport type BoardAddressInput = {\n    address: Scalars['String']['input'];\n    detailAddress: Scalars['String']['input'];\n    zoneCode: Scalars['Int']['input'];\n};\n\nexport type BoardAddressOutput = {\n    __typename?: 'BoardAddressOutput';\n    address: Scalars['String']['output'];\n    detailAddress: Scalars['String']['output'];\n    zoneCode: Scalars['Int']['output'];\n};\n\nexport type BoardCommentResponseDto = {\n    __typename?: 'BoardCommentResponseDTO';\n    _id: Scalars['ID']['output'];\n    author: Scalars['String']['output'];\n    boardId: Scalars['Int']['output'];\n    content: Scalars['String']['output'];\n    createdAt: Scalars['DateTime']['output'];\n    parentId?: Maybe;\n    rating?: Maybe;\n    replies?: Maybe>;\n    updatedAt: Scalars['DateTime']['output'];\n};\n\nexport type BoardPaginationResponse = {\n    __typename?: 'BoardPaginationResponse';\n    result: Array;\n    totalCount: Scalars['Int']['output'];\n};\n\nexport type BoardReactionSchema = {\n    __typename?: 'BoardReactionSchema';\n    _id: Scalars['ID']['output'];\n    boardId: Scalars['Int']['output'];\n    createdAt: Scalars['DateTime']['output'];\n    hate: Scalars['Int']['output'];\n    like: Scalars['Int']['output'];\n    updatedAt: Scalars['DateTime']['output'];\n};\n\nexport type BoardSchema = {\n    __typename?: 'BoardSchema';\n    _id: Scalars['ID']['output'];\n    author: Scalars['String']['output'];\n    boardAddressOutput?: Maybe;\n    boardId: Scalars['Int']['output'];\n    content: Scalars['String']['output'];\n    createdAt: Scalars['DateTime']['output'];\n    imageUrl?: Maybe>;\n    title: Scalars['String']['output'];\n    updatedAt: Scalars['DateTime']['output'];\n    youtubeUrl?: Maybe;\n};\n\nexport type CreateBoardCommentInput = {\n    author: Scalars['String']['input'];\n    content: Scalars['String']['input'];\n    parentId?: InputMaybe;\n    password: Scalars['String']['input'];\n    rating?: InputMaybe;\n};\n\nexport type CreateBoardInput = {\n    author: Scalars['String']['input'];\n    boardAddressInput?: InputMaybe>;\n    content: Scalars['String']['input'];\n    imageUrl?: InputMaybe>;\n    password: Scalars['String']['input'];\n    title: Scalars['String']['input'];\n    youtubeUrl?: InputMaybe;\n};\n\nexport type Mutation = {\n    __typename?: 'Mutation';\n    clearBoard: Scalars['Boolean']['output'];\n    createBoard: BoardSchema;\n    createBoardComment: BoardCommentResponseDto;\n    deleteBoard: Scalars['Boolean']['output'];\n    deleteBoardComment: Scalars['Boolean']['output'];\n    isPasswordCorrect: Scalars['Boolean']['output'];\n    updateBoard: BoardSchema;\n    updateBoardComment: BoardCommentResponseDto;\n};\n\nexport type MutationCreateBoardArgs = {\n    createBoardInput: CreateBoardInput;\n};\n\nexport type MutationCreateBoardCommentArgs = {\n    boardId: Scalars['Int']['input'];\n    createBoardComment: CreateBoardCommentInput;\n};\n\nexport type MutationDeleteBoardArgs = {\n    boardId: Scalars['Int']['input'];\n};\n\nexport type MutationDeleteBoardCommentArgs = {\n    boardId: Scalars['Int']['input'];\n    commentId: Scalars['String']['input'];\n};\n\nexport type MutationIsPasswordCorrectArgs = {\n    boardId: Scalars['Int']['input'];\n    password: Scalars['String']['input'];\n};\n\nexport type MutationUpdateBoardArgs = {\n    boardId: Scalars['Int']['input'];\n    updateBoardInput: UpdateBoardInput;\n};\n\nexport type MutationUpdateBoardCommentArgs = {\n    boardId: Scalars['Int']['input'];\n    commentId: Scalars['String']['input'];\n    updateBoardComment: UpdateBoardCommentInput;\n};\n\nexport type Query = {\n    __typename?: 'Query';\n    getBoard: BoardSchema;\n    getBoardComment: Array;\n    getBoardReaction: BoardReactionSchema;\n    getBoards: BoardPaginationResponse;\n};\n\nexport type QueryGetBoardArgs = {\n    boardId: Scalars['Int']['input'];\n};\n\nexport type QueryGetBoardCommentArgs = {\n    boardId: Scalars['Int']['input'];\n    page?: InputMaybe;\n};\n\nexport type QueryGetBoardReactionArgs = {\n    boardId: Scalars['Int']['input'];\n};\n\nexport type QueryGetBoardsArgs = {\n    page?: InputMaybe;\n    take?: InputMaybe;\n};\n\nexport type UpdateBoardCommentInput = {\n    content: Scalars['String']['input'];\n    parentId?: InputMaybe;\n    password: Scalars['String']['input'];\n    rating?: InputMaybe;\n};\n\nexport type UpdateBoardInput = {\n    boardAddressInput?: InputMaybe>;\n    content: Scalars['String']['input'];\n    imageUrl?: InputMaybe>;\n    title: Scalars['String']['input'];\n    youtubeUrl?: InputMaybe;\n};\n\nexport type CreateBoardCommentMutationVariables = Exact;\n\nexport type CreateBoardCommentMutation = {\n    __typename?: 'Mutation';\n    createBoardComment: {\n        __typename?: 'BoardCommentResponseDTO';\n        author: string;\n        content: string;\n        rating?: number | null;\n        parentId?: string | null;\n        _id: string;\n        createdAt: any;\n        replies?: Array | null;\n    };\n};\n\nexport type UpdateBoardCommentMutationVariables = Exact;\n\nexport type UpdateBoardCommentMutation = {\n    __typename?: 'Mutation';\n    updateBoardComment: {\n        __typename?: 'BoardCommentResponseDTO';\n        author: string;\n        content: string;\n        rating?: number | null;\n        parentId?: string | null;\n        _id: string;\n        createdAt: any;\n        replies?: Array | null;\n    };\n};\n\nexport type DeleteBoardCommentMutationVariables = Exact;\n\nexport type DeleteBoardCommentMutation = {\n    __typename?: 'Mutation';\n    deleteBoardComment: boolean;\n};\n\nexport type IsPasswordCorrectMutationVariables = Exact;\n\nexport type IsPasswordCorrectMutation = {\n    __typename?: 'Mutation';\n    isPasswordCorrect: boolean;\n};\n\nexport type CreateBoardMutationVariables = Exact;\n\nexport type CreateBoardMutation = {\n    __typename?: 'Mutation';\n    createBoard: {\n        __typename?: 'BoardSchema';\n        author: string;\n        title: string;\n        content: string;\n        imageUrl?: Array | null;\n        youtubeUrl?: string | null;\n        createdAt: any;\n        boardAddressOutput?: {\n            __typename?: 'BoardAddressOutput';\n            zoneCode: number;\n            address: string;\n            detailAddress: string;\n        } | null;\n    };\n};\n\nexport type UpdateBoardMutationVariables = Exact;\n\nexport type UpdateBoardMutation = {\n    __typename?: 'Mutation';\n    updateBoard: {\n        __typename?: 'BoardSchema';\n        author: string;\n        title: string;\n        content: string;\n        imageUrl?: Array | null;\n        youtubeUrl?: string | null;\n        createdAt: any;\n        boardAddressOutput?: {\n            __typename?: 'BoardAddressOutput';\n            zoneCode: number;\n            address: string;\n            detailAddress: string;\n        } | null;\n    };\n};\n\nexport type DeleteBoardMutationVariables = Exact;\n\nexport type DeleteBoardMutation = {\n    __typename?: 'Mutation';\n    deleteBoard: boolean;\n};\n\nexport type ClearBoardMutationVariables = Exact;\n\nexport type ClearBoardMutation = {\n    __typename?: 'Mutation';\n    clearBoard: boolean;\n};\n\nexport type GetBoardCommentQueryVariables = Exact;\n}>;\n\nexport type GetBoardCommentQuery = {\n    __typename?: 'Query';\n    getBoardComment: Array | null;\n    }>;\n};\n\nexport type GetBoardReactionQueryVariables = Exact;\n\nexport type GetBoardReactionQuery = {\n    __typename?: 'Query';\n    getBoardReaction: {\n        __typename?: 'BoardReactionSchema';\n        like: number;\n        hate: number;\n    };\n};\n\nexport type GetBoardsQueryVariables = Exact;\n    take?: InputMaybe;\n}>;\n\nexport type GetBoardsQuery = {\n    __typename?: 'Query';\n    getBoards: {\n        __typename?: 'BoardPaginationResponse';\n        totalCount: number;\n        result: Array;\n    };\n};\n\nexport type GetBoardQueryVariables = Exact;\n\nexport type GetBoardQuery = {\n    __typename?: 'Query';\n    getBoard: {\n        __typename?: 'BoardSchema';\n        author: string;\n        title: string;\n        content: string;\n        imageUrl?: Array | null;\n        youtubeUrl?: string | null;\n        createdAt: any;\n        boardAddressOutput?: {\n            __typename?: 'BoardAddressOutput';\n            zoneCode: number;\n            address: string;\n            detailAddress: string;\n        } | null;\n    };\n};\n\nexport type ResolverTypeWrapper = Promise | T;\n\nexport type ResolverWithResolve = {\n    resolve: ResolverFn;\n};\nexport type Resolver =\n    | ResolverFn\n    | ResolverWithResolve;\n\nexport type ResolverFn = (\n    parent: TParent,\n    args: TArgs,\n    context: TContext,\n    info: GraphQLResolveInfo,\n) => Promise | TResult;\n\nexport type SubscriptionSubscribeFn = (\n    parent: TParent,\n    args: TArgs,\n    context: TContext,\n    info: GraphQLResolveInfo,\n) => AsyncIterable | Promise>;\n\nexport type SubscriptionResolveFn = (\n    parent: TParent,\n    args: TArgs,\n    context: TContext,\n    info: GraphQLResolveInfo,\n) => TResult | Promise;\n\nexport interface SubscriptionSubscriberObject {\n    subscribe: SubscriptionSubscribeFn;\n    resolve?: SubscriptionResolveFn;\n}\n\nexport interface SubscriptionResolverObject {\n    subscribe: SubscriptionSubscribeFn;\n    resolve: SubscriptionResolveFn;\n}\n\nexport type SubscriptionObject =\n    | SubscriptionSubscriberObject\n    | SubscriptionResolverObject;\n\nexport type SubscriptionResolver =\n    | ((\n          ...args: any[]\n      ) => SubscriptionObject)\n    | SubscriptionObject;\n\nexport type TypeResolveFn = (\n    parent: TParent,\n    context: TContext,\n    info: GraphQLResolveInfo,\n) => Maybe | Promise>;\n\nexport type IsTypeOfResolverFn = (\n    obj: T,\n    context: TContext,\n    info: GraphQLResolveInfo,\n) => boolean | Promise;\n\nexport type NextResolverFn = () => Promise;\n\nexport type DirectiveResolverFn = (\n    next: NextResolverFn,\n    parent: TParent,\n    args: TArgs,\n    context: TContext,\n    info: GraphQLResolveInfo,\n) => TResult | Promise;\n\n/** Mapping between all available schema types and the resolvers types */\nexport type ResolversTypes = {\n    BoardAddressInput: BoardAddressInput;\n    BoardAddressOutput: ResolverTypeWrapper;\n    BoardCommentResponseDTO: ResolverTypeWrapper;\n    BoardPaginationResponse: ResolverTypeWrapper;\n    BoardReactionSchema: ResolverTypeWrapper;\n    BoardSchema: ResolverTypeWrapper;\n    Boolean: ResolverTypeWrapper;\n    CreateBoardCommentInput: CreateBoardCommentInput;\n    CreateBoardInput: CreateBoardInput;\n    DateTime: ResolverTypeWrapper;\n    ID: ResolverTypeWrapper;\n    Int: ResolverTypeWrapper;\n    Mutation: ResolverTypeWrapper;\n    Query: ResolverTypeWrapper;\n    String: ResolverTypeWrapper;\n    UpdateBoardCommentInput: UpdateBoardCommentInput;\n    UpdateBoardInput: UpdateBoardInput;\n};\n\n/** Mapping between all available schema types and the resolvers parents */\nexport type ResolversParentTypes = {\n    BoardAddressInput: BoardAddressInput;\n    BoardAddressOutput: BoardAddressOutput;\n    BoardCommentResponseDTO: BoardCommentResponseDto;\n    BoardPaginationResponse: BoardPaginationResponse;\n    BoardReactionSchema: BoardReactionSchema;\n    BoardSchema: BoardSchema;\n    Boolean: Scalars['Boolean']['output'];\n    CreateBoardCommentInput: CreateBoardCommentInput;\n    CreateBoardInput: CreateBoardInput;\n    DateTime: Scalars['DateTime']['output'];\n    ID: Scalars['ID']['output'];\n    Int: Scalars['Int']['output'];\n    Mutation: {};\n    Query: {};\n    String: Scalars['String']['output'];\n    UpdateBoardCommentInput: UpdateBoardCommentInput;\n    UpdateBoardInput: UpdateBoardInput;\n};\n\nexport type BoardAddressOutputResolvers = {\n    address?: Resolver;\n    detailAddress?: Resolver;\n    zoneCode?: Resolver;\n    __isTypeOf?: IsTypeOfResolverFn;\n};\n\nexport type BoardCommentResponseDtoResolvers = {\n    _id?: Resolver;\n    author?: Resolver;\n    boardId?: Resolver;\n    content?: Resolver;\n    createdAt?: Resolver;\n    parentId?: Resolver,\n        ParentType,\n        ContextType\n    >;\n    rating?: Resolver, ParentType, ContextType>;\n    replies?: Resolver>,\n        ParentType,\n        ContextType\n    >;\n    updatedAt?: Resolver;\n    __isTypeOf?: IsTypeOfResolverFn;\n};\n\nexport type BoardPaginationResponseResolvers = {\n    result?: Resolver,\n        ParentType,\n        ContextType\n    >;\n    totalCount?: Resolver;\n    __isTypeOf?: IsTypeOfResolverFn;\n};\n\nexport type BoardReactionSchemaResolvers = {\n    _id?: Resolver;\n    boardId?: Resolver;\n    createdAt?: Resolver;\n    hate?: Resolver;\n    like?: Resolver;\n    updatedAt?: Resolver;\n    __isTypeOf?: IsTypeOfResolverFn;\n};\n\nexport type BoardSchemaResolvers = {\n    _id?: Resolver;\n    author?: Resolver;\n    boardAddressOutput?: Resolver,\n        ParentType,\n        ContextType\n    >;\n    boardId?: Resolver;\n    content?: Resolver;\n    createdAt?: Resolver;\n    imageUrl?: Resolver>,\n        ParentType,\n        ContextType\n    >;\n    title?: Resolver;\n    updatedAt?: Resolver;\n    youtubeUrl?: Resolver,\n        ParentType,\n        ContextType\n    >;\n    __isTypeOf?: IsTypeOfResolverFn;\n};\n\nexport interface DateTimeScalarConfig\n    extends GraphQLScalarTypeConfig {\n    name: 'DateTime';\n}\n\nexport type MutationResolvers = {\n    clearBoard?: Resolver;\n    createBoard?: Resolver\n    >;\n    createBoardComment?: Resolver\n    >;\n    deleteBoard?: Resolver\n    >;\n    deleteBoardComment?: Resolver\n    >;\n    isPasswordCorrect?: Resolver\n    >;\n    updateBoard?: Resolver\n    >;\n    updateBoardComment?: Resolver\n    >;\n};\n\nexport type QueryResolvers = {\n    getBoard?: Resolver\n    >;\n    getBoardComment?: Resolver,\n        ParentType,\n        ContextType,\n        RequireFields\n    >;\n    getBoardReaction?: Resolver\n    >;\n    getBoards?: Resolver\n    >;\n};\n\nexport type Resolvers = {\n    BoardAddressOutput?: BoardAddressOutputResolvers;\n    BoardCommentResponseDTO?: BoardCommentResponseDtoResolvers;\n    BoardPaginationResponse?: BoardPaginationResponseResolvers;\n    BoardReactionSchema?: BoardReactionSchemaResolvers;\n    BoardSchema?: BoardSchemaResolvers;\n    DateTime?: GraphQLScalarType;\n    Mutation?: MutationResolvers;\n    Query?: QueryResolvers;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SubscriptionSubscriberObject.html":{"url":"interfaces/SubscriptionSubscriberObject.html","title":"interface - SubscriptionSubscriberObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SubscriptionSubscriberObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/generated/graphql.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            resolve\n                                        \n                                \n                                \n                                        \n                                            subscribe\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        resolve\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        resolve:         SubscriptionResolveFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SubscriptionResolveFn\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subscribe\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subscribe:         SubscriptionSubscribeFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SubscriptionSubscribeFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    GraphQLResolveInfo,\n    GraphQLScalarType,\n    GraphQLScalarTypeConfig,\n} from 'graphql';\nexport type Maybe = T | null;\nexport type InputMaybe = Maybe;\nexport type Exact = {\n    [K in keyof T]: T[K];\n};\nexport type MakeOptional = Omit & {\n    [SubKey in K]?: Maybe;\n};\nexport type MakeMaybe = Omit & {\n    [SubKey in K]: Maybe;\n};\nexport type MakeEmpty = { [_ in K]?: never };\nexport type Incremental =\n    | T\n    | {\n          [P in keyof T]?: P extends ' $fragmentName' | '__typename'\n              ? T[P]\n              : never;\n      };\nexport type RequireFields = Omit & {\n    [P in K]-?: NonNullable;\n};\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n    ID: { input: string; output: string };\n    String: { input: string; output: string };\n    Boolean: { input: boolean; output: boolean };\n    Int: { input: number; output: number };\n    Float: { input: number; output: number };\n    /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */\n    DateTime: { input: any; output: any };\n};\n\nexport type BoardAddressInput = {\n    address: Scalars['String']['input'];\n    detailAddress: Scalars['String']['input'];\n    zoneCode: Scalars['Int']['input'];\n};\n\nexport type BoardAddressOutput = {\n    __typename?: 'BoardAddressOutput';\n    address: Scalars['String']['output'];\n    detailAddress: Scalars['String']['output'];\n    zoneCode: Scalars['Int']['output'];\n};\n\nexport type BoardCommentResponseDto = {\n    __typename?: 'BoardCommentResponseDTO';\n    _id: Scalars['ID']['output'];\n    author: Scalars['String']['output'];\n    boardId: Scalars['Int']['output'];\n    content: Scalars['String']['output'];\n    createdAt: Scalars['DateTime']['output'];\n    parentId?: Maybe;\n    rating?: Maybe;\n    replies?: Maybe>;\n    updatedAt: Scalars['DateTime']['output'];\n};\n\nexport type BoardPaginationResponse = {\n    __typename?: 'BoardPaginationResponse';\n    result: Array;\n    totalCount: Scalars['Int']['output'];\n};\n\nexport type BoardReactionSchema = {\n    __typename?: 'BoardReactionSchema';\n    _id: Scalars['ID']['output'];\n    boardId: Scalars['Int']['output'];\n    createdAt: Scalars['DateTime']['output'];\n    hate: Scalars['Int']['output'];\n    like: Scalars['Int']['output'];\n    updatedAt: Scalars['DateTime']['output'];\n};\n\nexport type BoardSchema = {\n    __typename?: 'BoardSchema';\n    _id: Scalars['ID']['output'];\n    author: Scalars['String']['output'];\n    boardAddressOutput?: Maybe;\n    boardId: Scalars['Int']['output'];\n    content: Scalars['String']['output'];\n    createdAt: Scalars['DateTime']['output'];\n    imageUrl?: Maybe>;\n    title: Scalars['String']['output'];\n    updatedAt: Scalars['DateTime']['output'];\n    youtubeUrl?: Maybe;\n};\n\nexport type CreateBoardCommentInput = {\n    author: Scalars['String']['input'];\n    content: Scalars['String']['input'];\n    parentId?: InputMaybe;\n    password: Scalars['String']['input'];\n    rating?: InputMaybe;\n};\n\nexport type CreateBoardInput = {\n    author: Scalars['String']['input'];\n    boardAddressInput?: InputMaybe>;\n    content: Scalars['String']['input'];\n    imageUrl?: InputMaybe>;\n    password: Scalars['String']['input'];\n    title: Scalars['String']['input'];\n    youtubeUrl?: InputMaybe;\n};\n\nexport type Mutation = {\n    __typename?: 'Mutation';\n    clearBoard: Scalars['Boolean']['output'];\n    createBoard: BoardSchema;\n    createBoardComment: BoardCommentResponseDto;\n    deleteBoard: Scalars['Boolean']['output'];\n    deleteBoardComment: Scalars['Boolean']['output'];\n    isPasswordCorrect: Scalars['Boolean']['output'];\n    updateBoard: BoardSchema;\n    updateBoardComment: BoardCommentResponseDto;\n};\n\nexport type MutationCreateBoardArgs = {\n    createBoardInput: CreateBoardInput;\n};\n\nexport type MutationCreateBoardCommentArgs = {\n    boardId: Scalars['Int']['input'];\n    createBoardComment: CreateBoardCommentInput;\n};\n\nexport type MutationDeleteBoardArgs = {\n    boardId: Scalars['Int']['input'];\n};\n\nexport type MutationDeleteBoardCommentArgs = {\n    boardId: Scalars['Int']['input'];\n    commentId: Scalars['String']['input'];\n};\n\nexport type MutationIsPasswordCorrectArgs = {\n    boardId: Scalars['Int']['input'];\n    password: Scalars['String']['input'];\n};\n\nexport type MutationUpdateBoardArgs = {\n    boardId: Scalars['Int']['input'];\n    updateBoardInput: UpdateBoardInput;\n};\n\nexport type MutationUpdateBoardCommentArgs = {\n    boardId: Scalars['Int']['input'];\n    commentId: Scalars['String']['input'];\n    updateBoardComment: UpdateBoardCommentInput;\n};\n\nexport type Query = {\n    __typename?: 'Query';\n    getBoard: BoardSchema;\n    getBoardComment: Array;\n    getBoardReaction: BoardReactionSchema;\n    getBoards: BoardPaginationResponse;\n};\n\nexport type QueryGetBoardArgs = {\n    boardId: Scalars['Int']['input'];\n};\n\nexport type QueryGetBoardCommentArgs = {\n    boardId: Scalars['Int']['input'];\n    page?: InputMaybe;\n};\n\nexport type QueryGetBoardReactionArgs = {\n    boardId: Scalars['Int']['input'];\n};\n\nexport type QueryGetBoardsArgs = {\n    page?: InputMaybe;\n    take?: InputMaybe;\n};\n\nexport type UpdateBoardCommentInput = {\n    content: Scalars['String']['input'];\n    parentId?: InputMaybe;\n    password: Scalars['String']['input'];\n    rating?: InputMaybe;\n};\n\nexport type UpdateBoardInput = {\n    boardAddressInput?: InputMaybe>;\n    content: Scalars['String']['input'];\n    imageUrl?: InputMaybe>;\n    title: Scalars['String']['input'];\n    youtubeUrl?: InputMaybe;\n};\n\nexport type CreateBoardCommentMutationVariables = Exact;\n\nexport type CreateBoardCommentMutation = {\n    __typename?: 'Mutation';\n    createBoardComment: {\n        __typename?: 'BoardCommentResponseDTO';\n        author: string;\n        content: string;\n        rating?: number | null;\n        parentId?: string | null;\n        _id: string;\n        createdAt: any;\n        replies?: Array | null;\n    };\n};\n\nexport type UpdateBoardCommentMutationVariables = Exact;\n\nexport type UpdateBoardCommentMutation = {\n    __typename?: 'Mutation';\n    updateBoardComment: {\n        __typename?: 'BoardCommentResponseDTO';\n        author: string;\n        content: string;\n        rating?: number | null;\n        parentId?: string | null;\n        _id: string;\n        createdAt: any;\n        replies?: Array | null;\n    };\n};\n\nexport type DeleteBoardCommentMutationVariables = Exact;\n\nexport type DeleteBoardCommentMutation = {\n    __typename?: 'Mutation';\n    deleteBoardComment: boolean;\n};\n\nexport type IsPasswordCorrectMutationVariables = Exact;\n\nexport type IsPasswordCorrectMutation = {\n    __typename?: 'Mutation';\n    isPasswordCorrect: boolean;\n};\n\nexport type CreateBoardMutationVariables = Exact;\n\nexport type CreateBoardMutation = {\n    __typename?: 'Mutation';\n    createBoard: {\n        __typename?: 'BoardSchema';\n        author: string;\n        title: string;\n        content: string;\n        imageUrl?: Array | null;\n        youtubeUrl?: string | null;\n        createdAt: any;\n        boardAddressOutput?: {\n            __typename?: 'BoardAddressOutput';\n            zoneCode: number;\n            address: string;\n            detailAddress: string;\n        } | null;\n    };\n};\n\nexport type UpdateBoardMutationVariables = Exact;\n\nexport type UpdateBoardMutation = {\n    __typename?: 'Mutation';\n    updateBoard: {\n        __typename?: 'BoardSchema';\n        author: string;\n        title: string;\n        content: string;\n        imageUrl?: Array | null;\n        youtubeUrl?: string | null;\n        createdAt: any;\n        boardAddressOutput?: {\n            __typename?: 'BoardAddressOutput';\n            zoneCode: number;\n            address: string;\n            detailAddress: string;\n        } | null;\n    };\n};\n\nexport type DeleteBoardMutationVariables = Exact;\n\nexport type DeleteBoardMutation = {\n    __typename?: 'Mutation';\n    deleteBoard: boolean;\n};\n\nexport type ClearBoardMutationVariables = Exact;\n\nexport type ClearBoardMutation = {\n    __typename?: 'Mutation';\n    clearBoard: boolean;\n};\n\nexport type GetBoardCommentQueryVariables = Exact;\n}>;\n\nexport type GetBoardCommentQuery = {\n    __typename?: 'Query';\n    getBoardComment: Array | null;\n    }>;\n};\n\nexport type GetBoardReactionQueryVariables = Exact;\n\nexport type GetBoardReactionQuery = {\n    __typename?: 'Query';\n    getBoardReaction: {\n        __typename?: 'BoardReactionSchema';\n        like: number;\n        hate: number;\n    };\n};\n\nexport type GetBoardsQueryVariables = Exact;\n    take?: InputMaybe;\n}>;\n\nexport type GetBoardsQuery = {\n    __typename?: 'Query';\n    getBoards: {\n        __typename?: 'BoardPaginationResponse';\n        totalCount: number;\n        result: Array;\n    };\n};\n\nexport type GetBoardQueryVariables = Exact;\n\nexport type GetBoardQuery = {\n    __typename?: 'Query';\n    getBoard: {\n        __typename?: 'BoardSchema';\n        author: string;\n        title: string;\n        content: string;\n        imageUrl?: Array | null;\n        youtubeUrl?: string | null;\n        createdAt: any;\n        boardAddressOutput?: {\n            __typename?: 'BoardAddressOutput';\n            zoneCode: number;\n            address: string;\n            detailAddress: string;\n        } | null;\n    };\n};\n\nexport type ResolverTypeWrapper = Promise | T;\n\nexport type ResolverWithResolve = {\n    resolve: ResolverFn;\n};\nexport type Resolver =\n    | ResolverFn\n    | ResolverWithResolve;\n\nexport type ResolverFn = (\n    parent: TParent,\n    args: TArgs,\n    context: TContext,\n    info: GraphQLResolveInfo,\n) => Promise | TResult;\n\nexport type SubscriptionSubscribeFn = (\n    parent: TParent,\n    args: TArgs,\n    context: TContext,\n    info: GraphQLResolveInfo,\n) => AsyncIterable | Promise>;\n\nexport type SubscriptionResolveFn = (\n    parent: TParent,\n    args: TArgs,\n    context: TContext,\n    info: GraphQLResolveInfo,\n) => TResult | Promise;\n\nexport interface SubscriptionSubscriberObject {\n    subscribe: SubscriptionSubscribeFn;\n    resolve?: SubscriptionResolveFn;\n}\n\nexport interface SubscriptionResolverObject {\n    subscribe: SubscriptionSubscribeFn;\n    resolve: SubscriptionResolveFn;\n}\n\nexport type SubscriptionObject =\n    | SubscriptionSubscriberObject\n    | SubscriptionResolverObject;\n\nexport type SubscriptionResolver =\n    | ((\n          ...args: any[]\n      ) => SubscriptionObject)\n    | SubscriptionObject;\n\nexport type TypeResolveFn = (\n    parent: TParent,\n    context: TContext,\n    info: GraphQLResolveInfo,\n) => Maybe | Promise>;\n\nexport type IsTypeOfResolverFn = (\n    obj: T,\n    context: TContext,\n    info: GraphQLResolveInfo,\n) => boolean | Promise;\n\nexport type NextResolverFn = () => Promise;\n\nexport type DirectiveResolverFn = (\n    next: NextResolverFn,\n    parent: TParent,\n    args: TArgs,\n    context: TContext,\n    info: GraphQLResolveInfo,\n) => TResult | Promise;\n\n/** Mapping between all available schema types and the resolvers types */\nexport type ResolversTypes = {\n    BoardAddressInput: BoardAddressInput;\n    BoardAddressOutput: ResolverTypeWrapper;\n    BoardCommentResponseDTO: ResolverTypeWrapper;\n    BoardPaginationResponse: ResolverTypeWrapper;\n    BoardReactionSchema: ResolverTypeWrapper;\n    BoardSchema: ResolverTypeWrapper;\n    Boolean: ResolverTypeWrapper;\n    CreateBoardCommentInput: CreateBoardCommentInput;\n    CreateBoardInput: CreateBoardInput;\n    DateTime: ResolverTypeWrapper;\n    ID: ResolverTypeWrapper;\n    Int: ResolverTypeWrapper;\n    Mutation: ResolverTypeWrapper;\n    Query: ResolverTypeWrapper;\n    String: ResolverTypeWrapper;\n    UpdateBoardCommentInput: UpdateBoardCommentInput;\n    UpdateBoardInput: UpdateBoardInput;\n};\n\n/** Mapping between all available schema types and the resolvers parents */\nexport type ResolversParentTypes = {\n    BoardAddressInput: BoardAddressInput;\n    BoardAddressOutput: BoardAddressOutput;\n    BoardCommentResponseDTO: BoardCommentResponseDto;\n    BoardPaginationResponse: BoardPaginationResponse;\n    BoardReactionSchema: BoardReactionSchema;\n    BoardSchema: BoardSchema;\n    Boolean: Scalars['Boolean']['output'];\n    CreateBoardCommentInput: CreateBoardCommentInput;\n    CreateBoardInput: CreateBoardInput;\n    DateTime: Scalars['DateTime']['output'];\n    ID: Scalars['ID']['output'];\n    Int: Scalars['Int']['output'];\n    Mutation: {};\n    Query: {};\n    String: Scalars['String']['output'];\n    UpdateBoardCommentInput: UpdateBoardCommentInput;\n    UpdateBoardInput: UpdateBoardInput;\n};\n\nexport type BoardAddressOutputResolvers = {\n    address?: Resolver;\n    detailAddress?: Resolver;\n    zoneCode?: Resolver;\n    __isTypeOf?: IsTypeOfResolverFn;\n};\n\nexport type BoardCommentResponseDtoResolvers = {\n    _id?: Resolver;\n    author?: Resolver;\n    boardId?: Resolver;\n    content?: Resolver;\n    createdAt?: Resolver;\n    parentId?: Resolver,\n        ParentType,\n        ContextType\n    >;\n    rating?: Resolver, ParentType, ContextType>;\n    replies?: Resolver>,\n        ParentType,\n        ContextType\n    >;\n    updatedAt?: Resolver;\n    __isTypeOf?: IsTypeOfResolverFn;\n};\n\nexport type BoardPaginationResponseResolvers = {\n    result?: Resolver,\n        ParentType,\n        ContextType\n    >;\n    totalCount?: Resolver;\n    __isTypeOf?: IsTypeOfResolverFn;\n};\n\nexport type BoardReactionSchemaResolvers = {\n    _id?: Resolver;\n    boardId?: Resolver;\n    createdAt?: Resolver;\n    hate?: Resolver;\n    like?: Resolver;\n    updatedAt?: Resolver;\n    __isTypeOf?: IsTypeOfResolverFn;\n};\n\nexport type BoardSchemaResolvers = {\n    _id?: Resolver;\n    author?: Resolver;\n    boardAddressOutput?: Resolver,\n        ParentType,\n        ContextType\n    >;\n    boardId?: Resolver;\n    content?: Resolver;\n    createdAt?: Resolver;\n    imageUrl?: Resolver>,\n        ParentType,\n        ContextType\n    >;\n    title?: Resolver;\n    updatedAt?: Resolver;\n    youtubeUrl?: Resolver,\n        ParentType,\n        ContextType\n    >;\n    __isTypeOf?: IsTypeOfResolverFn;\n};\n\nexport interface DateTimeScalarConfig\n    extends GraphQLScalarTypeConfig {\n    name: 'DateTime';\n}\n\nexport type MutationResolvers = {\n    clearBoard?: Resolver;\n    createBoard?: Resolver\n    >;\n    createBoardComment?: Resolver\n    >;\n    deleteBoard?: Resolver\n    >;\n    deleteBoardComment?: Resolver\n    >;\n    isPasswordCorrect?: Resolver\n    >;\n    updateBoard?: Resolver\n    >;\n    updateBoardComment?: Resolver\n    >;\n};\n\nexport type QueryResolvers = {\n    getBoard?: Resolver\n    >;\n    getBoardComment?: Resolver,\n        ParentType,\n        ContextType,\n        RequireFields\n    >;\n    getBoardReaction?: Resolver\n    >;\n    getBoards?: Resolver\n    >;\n};\n\nexport type Resolvers = {\n    BoardAddressOutput?: BoardAddressOutputResolvers;\n    BoardCommentResponseDTO?: BoardCommentResponseDtoResolvers;\n    BoardPaginationResponse?: BoardPaginationResponseResolvers;\n    BoardReactionSchema?: BoardReactionSchemaResolvers;\n    BoardSchema?: BoardSchemaResolvers;\n    DateTime?: GraphQLScalarType;\n    Mutation?: MutationResolvers;\n    Query?: QueryResolvers;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformBoardInterceptor.html":{"url":"injectables/TransformBoardInterceptor.html","title":"injectable - TransformBoardInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformBoardInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/transform-board.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                removeSensitiveData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/transform-board.interceptor.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        removeSensitiveData\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeSensitiveData(item: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/transform-board.interceptor.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from '@nestjs/common';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class TransformBoardInterceptor implements NestInterceptor {\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler,\n    ): Observable {\n        return next.handle().pipe(\n            map((data) => {\n                if (Array.isArray(data.result)) {\n                    const sanitizedResult = data.result.map((item) =>\n                        this.removeSensitiveData(item),\n                    );\n                    return {\n                        ...data,\n                        result: sanitizedResult,\n                    };\n                }\n\n                if (typeof data === 'object' && data !== null) {\n                    return this.removeSensitiveData(data);\n                }\n\n                return data;\n            }),\n        );\n    }\n\n    private removeSensitiveData(item: any): any {\n        if (item && typeof item === 'object') {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const { _id, ...rest } = item;\n            return rest;\n        }\n        return item;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateBoardCommentDTO.html":{"url":"classes/UpdateBoardCommentDTO.html","title":"class - UpdateBoardCommentDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateBoardCommentDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-comment/dto/update-board-comment.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateBoardCommentDTO)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/dto/update-board-comment.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nimport { CreateBoardCommentDTO } from './create-board-comment.dto';\nimport { PartialType } from '@nestjs/mapped-types';\n\nexport class UpdateBoardCommentDTO extends PartialType(CreateBoardCommentDTO) {\n    @IsString()\n    @IsNotEmpty()\n    password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateBoardCommentExceptPasswordDTO.html":{"url":"classes/UpdateBoardCommentExceptPasswordDTO.html","title":"class - UpdateBoardCommentExceptPasswordDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateBoardCommentExceptPasswordDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-comment/dto/update-board-except-password-comment.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(\n    CreateBoardCommentDTO,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateBoardCommentDTO } from './create-board-comment.dto';\nimport { PartialType } from '@nestjs/mapped-types';\n\nexport class UpdateBoardCommentExceptPasswordDTO extends PartialType(\n    CreateBoardCommentDTO,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateBoardCommentInput.html":{"url":"classes/UpdateBoardCommentInput.html","title":"class - UpdateBoardCommentInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateBoardCommentInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/board-comment/schema/update-board-comment-input.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                parentId\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                rating\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/schema/update-board-comment-input.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        parentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/schema/update-board-comment-input.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/schema/update-board-comment-input.schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/board-comment/schema/update-board-comment-input.schema.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, Int } from '@nestjs/graphql';\nimport { IsNotEmpty, IsNumber, IsOptional, IsString } from 'class-validator';\n\n@InputType()\nexport class UpdateBoardCommentInput {\n    @Field()\n    @IsString()\n    @IsNotEmpty()\n    content: string;\n\n    @Field(() => Int, { nullable: true })\n    @IsNumber()\n    @IsOptional()\n    rating?: number;\n\n    @Field()\n    @IsString()\n    @IsOptional()\n    password: string;\n\n    @Field({ nullable: true })\n    @IsString()\n    @IsOptional()\n    parentId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateBoardDTO.html":{"url":"classes/UpdateBoardDTO.html","title":"class - UpdateBoardDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateBoardDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/dto/update-board.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateBoardDTO)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateBoardDTO } from './create-board.dto';\nimport { PartialType } from '@nestjs/mapped-types';\n\nexport class UpdateBoardDTO extends PartialType(CreateBoardDTO) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateBoardInput.html":{"url":"classes/UpdateBoardInput.html","title":"class - UpdateBoardInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateBoardInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/schema/update-board-input.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                boardAddressInput\n                            \n                            \n                                    \n                                    \n                                    \n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                youtubeUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        boardAddressInput\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BoardAddressInput\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/update-board-input.schema.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/update-board-input.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})@IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/update-board-input.schema.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/update-board-input.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        youtubeUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/board/schema/update-board-input.schema.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\nimport {\n    IsArray,\n    IsNotEmpty,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from 'class-validator';\n\nimport { BoardAddressInput } from './board-address-input.schema';\nimport { Type } from 'class-transformer';\n\n@InputType()\nexport class UpdateBoardInput {\n    @Field()\n    @IsString()\n    @IsNotEmpty()\n    title: string;\n\n    @Field()\n    @IsString()\n    @IsNotEmpty()\n    content: string;\n\n    @Field(() => [String], { nullable: true })\n    @IsOptional()\n    @IsArray()\n    imageUrl?: string[];\n\n    @Field({ nullable: true })\n    @IsOptional()\n    @IsString()\n    youtubeUrl?: string;\n\n    @Field(() => [BoardAddressInput], { nullable: true })\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => BoardAddressInput)\n    boardAddressInput?: BoardAddressInput;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entity/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entity/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n    BaseEntity,\n    Column,\n    Entity,\n    PrimaryGeneratedColumn,\n    Unique,\n} from 'typeorm';\n\nimport { Exclude } from 'class-transformer';\n\n@Entity()\n@Unique(['email'])\nexport class User extends BaseEntity {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    name: string;\n\n    @Column()\n    email: string;\n\n    @Column()\n    @Exclude()\n    password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                logout\n                            \n                            \n                                    \n                                    \n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDTO: loginDTO, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDTO\n                                            \n                                                            loginDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/logout')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        signUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUp(signUpDTO: signUpDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')@HttpCode(HttpStatus.CREATED)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signUpDTO\n                                            \n                                                            signUpDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    HttpCode,\n    HttpStatus,\n    Post,\n    Res,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { signUpDTO } from './dto/signUp.dto';\nimport { User } from './entity/user.entity';\nimport { loginDTO } from './dto/login.dto';\nimport { Response } from 'express';\n\n@Controller('/api/user')\nexport class UserController {\n    constructor(private readonly userService: UserService) {}\n\n    @Post('/signup')\n    @HttpCode(HttpStatus.CREATED)\n    signUp(@Body() signUpDTO: signUpDTO): Promise {\n        return this.userService.createUser(signUpDTO);\n    }\n\n    @Post('/login')\n    @HttpCode(HttpStatus.OK)\n    async login(\n        @Body() loginDTO: loginDTO,\n        @Res() res: Response,\n    ): Promise {\n        const result = await this.userService.login(loginDTO);\n        res.setHeader('Authorization', `Bearer ${result.accessToken}`);\n\n        res.cookie('refreshToken', result.refreshToken, {\n            httpOnly: true,\n            secure: true,\n            sameSite: 'none',\n            maxAge: 7 * 24 * 60 * 60 * 1000,\n        });\n\n        res.status(HttpStatus.OK).json({ id: result.user.id });\n    }\n\n    @Post('/logout')\n    @HttpCode(HttpStatus.OK)\n    logout(@Res() res: Response): void {\n        res.clearCookie('refreshToken');\n\n        res.send(true);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserIdSchema.html":{"url":"classes/UserIdSchema.html","title":"class - UserIdSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserIdSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/schema/user-id.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schema/user-id.schema.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\nexport class UserIdSchema {\n    @Field(() => ID)\n    id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAuthModule->UserModule\n\n\n\n\n\nBcryptModule\n\nBcryptModule\n\nUserModule -->\n\nBcryptModule->UserModule\n\n\n\n\n\nUserRepository\n\nUserRepository\n\nUserModule -->\n\nUserRepository->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserRepository\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            BcryptModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AuthModule } from 'src/auth/auth.module';\nimport { BcryptModule } from 'src/bcrypt/bcrypt.module';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entity/user.entity';\nimport { UserController } from './user.controller';\nimport { UserRepository } from './repository/user.repository';\nimport { UserResolver } from './user.resolver';\nimport { UserService } from './user.service';\n\n@Module({\n    imports: [\n        TypeOrmModule.forFeature([User], 'PostgreSQL'),\n        BcryptModule,\n        AuthModule,\n    ],\n    controllers: [UserController],\n    providers: [UserService, UserRepository, UserResolver],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserRepository.html":{"url":"injectables/UserRepository.html","title":"injectable - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/repository/user.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/repository/user.repository.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(signUpDTO: signUpDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/repository/user.repository.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signUpDTO\n                                            \n                                                            signUpDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUser(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/repository/user.repository.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../entity/user.entity';\nimport {\n    ConflictException,\n    Injectable,\n    InternalServerErrorException,\n    NotFoundException,\n} from '@nestjs/common';\nimport { signUpDTO } from '../dto/signUp.dto';\n\n@Injectable()\nexport class UserRepository {\n    constructor(\n        @InjectRepository(User, 'PostgreSQL')\n        private readonly userRepository: Repository,\n    ) {}\n\n    async createUser(signUpDTO: signUpDTO): Promise {\n        const user = this.userRepository.create(signUpDTO);\n        try {\n            return await this.userRepository.save(user);\n        } catch (error) {\n            if (error.code === '23505') {\n                throw new ConflictException('Existing email');\n            } else {\n                throw new InternalServerErrorException();\n            }\n        }\n    }\n\n    async findUser(email: string): Promise {\n        const user = await this.userRepository.findOneBy({\n            email,\n        });\n        if (!user) {\n            throw new NotFoundException('is not exist email');\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResolver.html":{"url":"classes/UserResolver.html","title":"class - UserResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                logout\n                            \n                            \n                                    \n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.resolver.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginUser: loginUser, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.resolver.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginUser\n                                            \n                                                            loginUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.resolver.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        signUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUp(signUpUser: signUpUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.resolver.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signUpUser\n                                            \n                                                            signUpUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Args, Context, Mutation, Resolver } from '@nestjs/graphql';\n\nimport { UserSchema } from './schema/user.schema';\nimport { UserService } from './user.service';\nimport { signUpUser } from './schema/signUp.schema';\nimport { loginUser } from './schema/login.schema';\nimport { Response } from 'express';\nimport { UserIdSchema } from './schema/user-id.schema';\n\n@Resolver(() => UserSchema)\nexport class UserResolver {\n    constructor(private readonly userService: UserService) {}\n\n    @Mutation(() => UserSchema)\n    signUp(@Args('signUpUser') signUpUser: signUpUser) {\n        return this.userService.createUser(signUpUser);\n    }\n\n    @Mutation(() => UserIdSchema)\n    async login(\n        @Args('loginUser') loginUser: loginUser,\n        @Context('res') res: Response,\n    ) {\n        const result = await this.userService.login(loginUser);\n\n        res.setHeader('Authorization', `Bearer ${result.accessToken}`);\n\n        res.cookie('refreshToken', result.refreshToken, {\n            httpOnly: true,\n            secure: true,\n            sameSite: 'none',\n            maxAge: 7 * 24 * 60 * 60 * 1000,\n        });\n\n        return { id: result.user.id };\n    }\n\n    @Mutation(() => Boolean)\n    logout(@Context('res') res: Response) {\n        res.clearCookie('refreshToken');\n        res.send(true);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSchema.html":{"url":"classes/UserSchema.html","title":"class - UserSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/schema/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schema/user.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schema/user.schema.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schema/user.schema.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\nexport class UserSchema {\n    @Field(() => Int)\n    id: number;\n\n    @Field()\n    name: string;\n\n    @Field()\n    email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, bcryptService: BcryptService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        bcryptService\n                                                  \n                                                        \n                                                                        BcryptService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(signUpDTO: signUpDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signUpDTO\n                                            \n                                                            signUpDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDTO: loginDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDTO\n                                            \n                                                            loginDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AuthService } from 'src/auth/auth.service';\nimport { BcryptService } from 'src/bcrypt/bcrypt.service';\nimport { Injectable } from '@nestjs/common';\nimport { User } from './entity/user.entity';\nimport { UserRepository } from './repository/user.repository';\nimport { loginDTO } from './dto/login.dto';\nimport { signUpDTO } from './dto/signUp.dto';\n\n@Injectable()\nexport class UserService {\n    constructor(\n        private readonly userRepository: UserRepository,\n        private readonly bcryptService: BcryptService,\n        private readonly authService: AuthService,\n    ) {}\n\n    async createUser(signUpDTO: signUpDTO): Promise {\n        const password: string = await this.bcryptService.transformPassword(\n            signUpDTO.password,\n        );\n        return await this.userRepository.createUser({\n            ...signUpDTO,\n            password,\n        });\n    }\n\n    async login(loginDTO: loginDTO) {\n        const user = await this.userRepository.findUser(loginDTO.email);\n        await this.bcryptService.validatePassword(\n            loginDTO.password,\n            user.password,\n        );\n        const token = await this.authService.issueLoginToken(loginDTO.email);\n\n        return { user, ...token };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bcrypt/bcrypt.service.ts\n            \n            injectable\n            BcryptService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/board/board-comment/board-comment.controller.ts\n            \n            controller\n            BoardCommentController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/board/board-comment/board-comment.resolver.ts\n            \n            class\n            BoardCommentResolver\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/board/board-comment/board-comment.service.ts\n            \n            injectable\n            BoardCommentService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/board/board-comment/dto/board-comment-response.dto.ts\n            \n            class\n            BoardCommentResponseDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/board/board-comment/dto/create-board-comment.dto.ts\n            \n            class\n            CreateBoardCommentDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/board/board-comment/dto/update-board-comment.dto.ts\n            \n            class\n            UpdateBoardCommentDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/board/board-comment/dto/update-board-except-password-comment.dto.ts\n            \n            class\n            UpdateBoardCommentExceptPasswordDTO\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/board/board-comment/entity/board-comment.entity.ts\n            \n            entity\n            BoardCommentEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/board/board-comment/repository/board-comment.repository.ts\n            \n            injectable\n            BoardCommentRepository\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/board/board-comment/schema/board-comment.schema.ts\n            \n            class\n            BoardCommentSchema\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/board/board-comment/schema/create-board-comment-input.schema.ts\n            \n            class\n            CreateBoardCommentInput\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/board/board-comment/schema/update-board-comment-input.schema.ts\n            \n            class\n            UpdateBoardCommentInput\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/board/board-password/board-password.controller.ts\n            \n            controller\n            BoardPasswordController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/board/board-password/board-password.resolver.ts\n            \n            class\n            BoardPasswordResolver\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/board/board-password/board-password.service.ts\n            \n            injectable\n            BoardPasswordService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/board/board-password/dto/board-password.dto.ts\n            \n            class\n            BoardPasswordDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/board/board-reaction/board-reaction.controller.ts\n            \n            controller\n            BoardReactionController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/board/board-reaction/board-reaction.resolver.ts\n            \n            class\n            BoardReactionResolver\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/board/board-reaction/board-reaction.service.ts\n            \n            injectable\n            BoardReactionService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/board/board-reaction/entity/board-reaction.entity.ts\n            \n            entity\n            BoardReactionEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/board/board-reaction/repository/boardReactionRepository.ts\n            \n            injectable\n            BoardReactionRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/board/board-reaction/schema/board-reaction.schema.ts\n            \n            class\n            BoardReactionSchema\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/board/board.controller.ts\n            \n            controller\n            BoardController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/board/board.resolver.ts\n            \n            class\n            BoardResolver\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/board/board.service.ts\n            \n            injectable\n            BoardService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/board/dto/board-addresss.dto.ts\n            \n            class\n            BoardAddressDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/board/dto/create-board.dto.ts\n            \n            class\n            CreateBoardDTO\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/board/dto/pagination-response.dto.ts\n            \n            class\n            PaginationResponseDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/board/dto/pagination.dto.ts\n            \n            class\n            PaginationDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/board/dto/update-board.dto.ts\n            \n            class\n            UpdateBoardDTO\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/board/entity/board-boardId.entity.ts\n            \n            entity\n            BoardIdCounterEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/board/entity/board.entity.ts\n            \n            entity\n            BoardEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/board/repository/board-id-counter.repository.ts\n            \n            injectable\n            BoardIdCounterRepository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/board/repository/board.repository.ts\n            \n            injectable\n            BoardRepository\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/board/schema/board-address-input.schema.ts\n            \n            class\n            BoardAddressInput\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/board/schema/board-address-input.schema.ts\n            \n            class\n            BoardAddressOutput\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/board/schema/board-pagination-response.schema.ts\n            \n            class\n            BoardPaginationResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/board/schema/board.schema.ts\n            \n            class\n            BoardSchema\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/board/schema/create-board-input.schema.ts\n            \n            class\n            CreateBoardInput\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/board/schema/update-board-input.schema.ts\n            \n            class\n            UpdateBoardInput\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/common/decorators/response-message.decorator.ts\n            \n            variable\n            ResponseMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/transform-board.interceptor.ts\n            \n            injectable\n            TransformBoardInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/types/interceptor.interface.ts\n            \n            interface\n            IDeleteResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/types/interceptor.interface.ts\n            \n            interface\n            IResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/types/resolver.interface.ts\n            \n            interface\n            IResolverClearResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/generated/graphql.ts\n            \n            interface\n            DateTimeScalarConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/generated/graphql.ts\n            \n            interface\n            SubscriptionResolverObject\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/generated/graphql.ts\n            \n            interface\n            SubscriptionSubscriberObject\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            BoardAddressInput\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            BoardAddressOutput\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            BoardAddressOutputResolvers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            BoardCommentResponseDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            BoardCommentResponseDtoResolvers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            BoardPaginationResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            BoardPaginationResponseResolvers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            BoardReactionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            BoardReactionSchemaResolvers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            BoardSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            BoardSchemaResolvers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            ClearBoardMutation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            ClearBoardMutationVariables\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            CreateBoardCommentInput\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            CreateBoardCommentMutation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            CreateBoardCommentMutationVariables\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            CreateBoardInput\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            CreateBoardMutation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            CreateBoardMutationVariables\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            DeleteBoardCommentMutation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            DeleteBoardCommentMutationVariables\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            DeleteBoardMutation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            DeleteBoardMutationVariables\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            DirectiveResolverFn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            Exact\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            GetBoardCommentQuery\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            GetBoardCommentQueryVariables\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            GetBoardQuery\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            GetBoardQueryVariables\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            GetBoardReactionQuery\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            GetBoardReactionQueryVariables\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            GetBoardsQuery\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            GetBoardsQueryVariables\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            Incremental\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            InputMaybe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            IsPasswordCorrectMutation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            IsPasswordCorrectMutationVariables\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            IsTypeOfResolverFn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            MakeEmpty\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            MakeMaybe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            MakeOptional\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            Maybe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            Mutation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            MutationCreateBoardArgs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            MutationCreateBoardCommentArgs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            MutationDeleteBoardArgs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            MutationDeleteBoardCommentArgs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            MutationIsPasswordCorrectArgs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            MutationResolvers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            MutationUpdateBoardArgs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            MutationUpdateBoardCommentArgs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            NextResolverFn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            Query\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            QueryGetBoardArgs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            QueryGetBoardCommentArgs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            QueryGetBoardReactionArgs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            QueryGetBoardsArgs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            QueryResolvers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            RequireFields\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            Resolver\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            ResolverFn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            Resolvers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            ResolversParentTypes\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            ResolversTypes\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            ResolverTypeWrapper\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            ResolverWithResolve\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            Scalars\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            SubscriptionObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            SubscriptionResolveFn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            SubscriptionResolver\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            SubscriptionSubscribeFn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            TypeResolveFn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            UpdateBoardCommentInput\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            UpdateBoardCommentMutation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            UpdateBoardCommentMutationVariables\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            UpdateBoardInput\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            UpdateBoardMutation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/graphql.ts\n            \n            type alias\n            UpdateBoardMutationVariables\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            variable\n            HOST\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            variable\n            PORT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/login.dto.ts\n            \n            class\n            loginDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dto/signUp.dto.ts\n            \n            class\n            signUpDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/entity/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entity/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/repository/user.repository.ts\n            \n            injectable\n            UserRepository\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/schema/login.schema.ts\n            \n            class\n            loginUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/schema/signUp.schema.ts\n            \n            class\n            signUpUser\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/schema/user-id.schema.ts\n            \n            class\n            UserIdSchema\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/schema/user.schema.ts\n            \n            class\n            UserSchema\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user.resolver.ts\n            \n            class\n            UserResolver\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @apollo/server : ^4.11.0\n        \n            @aws-sdk/client-s3 : ^3.674.0\n        \n            @graphql-codegen/cli : ^5.0.3\n        \n            @graphql-codegen/typescript : ^4.1.0\n        \n            @graphql-codegen/typescript-resolvers : ^4.3.0\n        \n            @nestjs/apollo : ^12.2.0\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/graphql : ^12.2.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.2\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @types/aws-sdk : ^2.7.0\n        \n            @types/bcrypt : ^5.0.2\n        \n            @types/passport-jwt : ^4.0.1\n        \n            apollo-server-express : ^3.13.0\n        \n            aws-sdk : ^2.1691.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            connect-redis : ^7.1.1\n        \n            express-session : ^1.18.1\n        \n            graphql : ^16.9.0\n        \n            ioredis : ^5.4.1\n        \n            mongodb : ^5.9.2\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.13.0\n        \n            redis : ^4.7.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/loginDTO.html":{"url":"classes/loginDTO.html","title":"class - loginDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  loginDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail({}, {message: 'Invalid email format'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/login.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8, {message: 'Password must be at least 8 characters long'})@MaxLength(20, {message: 'Password must not exceed 20 characters'})@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()])[A-Za-z\\d!@#$%^&*()]{8,}$/, {message: 'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character from !@#$%^&*()'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/login.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsEmail,\n    IsNotEmpty,\n    IsString,\n    Matches,\n    MaxLength,\n    MinLength,\n} from 'class-validator';\n\nexport class loginDTO {\n    @IsString()\n    @IsNotEmpty()\n    @IsEmail({}, { message: 'Invalid email format' })\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8, { message: 'Password must be at least 8 characters long' })\n    @MaxLength(20, { message: 'Password must not exceed 20 characters' })\n    @Matches(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()])[A-Za-z\\d!@#$%^&*()]{8,}$/,\n        {\n            message:\n                'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character from !@#$%^&*()',\n        },\n    )\n    password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/loginUser.html":{"url":"classes/loginUser.html","title":"class - loginUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  loginUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/schema/login.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail({}, {message: 'Invalid email format'})@Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schema/login.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8, {message: 'password must be at least 8 characters long'})@MaxLength(20, {message: 'password must not exceed 20 characters'})@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()])[A-Za-z\\d!@#$%^&*()]{8,}$/, {message: 'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character from !@#$%^&*()'})@Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schema/login.schema.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\nimport {\n    IsEmail,\n    IsNotEmpty,\n    IsString,\n    Matches,\n    MaxLength,\n    MinLength,\n} from 'class-validator';\n\n@InputType()\nexport class loginUser {\n    @IsString()\n    @IsNotEmpty()\n    @IsEmail({}, { message: 'Invalid email format' })\n    @Field()\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8, { message: 'password must be at least 8 characters long' })\n    @MaxLength(20, { message: 'password must not exceed 20 characters' })\n    @Matches(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()])[A-Za-z\\d!@#$%^&*()]{8,}$/,\n        {\n            message:\n                'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character from !@#$%^&*()',\n        },\n    )\n    @Field()\n    password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BcryptModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BoardCommentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BoardModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BoardPasswordModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BoardReactionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BcryptModule\n\n\n\ncluster_BcryptModule_exports\n\n\n\ncluster_BcryptModule_providers\n\n\n\ncluster_BoardCommentModule\n\n\n\ncluster_BoardCommentModule_exports\n\n\n\ncluster_BoardCommentModule_providers\n\n\n\ncluster_BoardModule\n\n\n\ncluster_BoardModule_imports\n\n\n\ncluster_BoardModule_exports\n\n\n\ncluster_BoardModule_providers\n\n\n\ncluster_BoardPasswordModule\n\n\n\ncluster_BoardPasswordModule_providers\n\n\n\ncluster_BoardReactionModule\n\n\n\ncluster_BoardReactionModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAuthModule->UserModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nBcryptModule\n\nBcryptModule\n\n\n\nBoardCommentModule\n\nBoardCommentModule\n\nBoardCommentModule -->\n\nBcryptModule->BoardCommentModule\n\n\n\n\n\nBoardModule\n\nBoardModule\n\nBoardModule -->\n\nBcryptModule->BoardModule\n\n\n\n\n\nBoardPasswordModule\n\nBoardPasswordModule\n\nBoardPasswordModule -->\n\nBcryptModule->BoardPasswordModule\n\n\n\nUserModule -->\n\nBcryptModule->UserModule\n\n\n\nAppModule -->\n\nBcryptModule->AppModule\n\n\n\n\n\nBcryptService \n\nBcryptService \n\nBcryptService  -->\n\nBcryptModule->BcryptService \n\n\n\nAppModule -->\n\nBoardCommentModule->AppModule\n\n\n\n\n\nBoardCommentRepository \n\nBoardCommentRepository \n\nBoardCommentRepository  -->\n\nBoardCommentModule->BoardCommentRepository \n\n\n\nAppModule -->\n\nBoardModule->AppModule\n\n\n\n\n\nBoardRepository \n\nBoardRepository \n\nBoardRepository  -->\n\nBoardModule->BoardRepository \n\n\n\n\n\nBoardService \n\nBoardService \n\nBoardService  -->\n\nBoardModule->BoardService \n\n\n\nAppModule -->\n\nBoardPasswordModule->AppModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nBcryptService\n\nBcryptService\n\nBcryptModule -->\n\nBcryptService->BcryptModule\n\n\n\n\n\nBoardCommentRepository\n\nBoardCommentRepository\n\nBoardCommentModule -->\n\nBoardCommentRepository->BoardCommentModule\n\n\n\nBoardModule -->\n\nBoardCommentRepository->BoardModule\n\n\n\n\n\nBoardCommentService\n\nBoardCommentService\n\nBoardCommentModule -->\n\nBoardCommentService->BoardCommentModule\n\n\n\n\n\nBoardRepository\n\nBoardRepository\n\nBoardCommentModule -->\n\nBoardRepository->BoardCommentModule\n\n\n\nBoardModule -->\n\nBoardRepository->BoardModule\n\n\n\nBoardPasswordModule -->\n\nBoardRepository->BoardPasswordModule\n\n\n\n\n\nBoardReactionModule\n\nBoardReactionModule\n\nBoardModule -->\n\nBoardReactionModule->BoardModule\n\n\n\n\n\nBoardIdCounterRepository\n\nBoardIdCounterRepository\n\nBoardModule -->\n\nBoardIdCounterRepository->BoardModule\n\n\n\n\n\nBoardReactionRepository\n\nBoardReactionRepository\n\nBoardModule -->\n\nBoardReactionRepository->BoardModule\n\n\n\nBoardReactionModule -->\n\nBoardReactionRepository->BoardReactionModule\n\n\n\n\n\nBoardService\n\nBoardService\n\nBoardModule -->\n\nBoardService->BoardModule\n\n\n\n\n\nBoardPasswordService\n\nBoardPasswordService\n\nBoardPasswordModule -->\n\nBoardPasswordService->BoardPasswordModule\n\n\n\n\n\nBoardReactionService\n\nBoardReactionService\n\nBoardReactionModule -->\n\nBoardReactionService->BoardReactionModule\n\n\n\n\n\nUserRepository\n\nUserRepository\n\nUserModule -->\n\nUserRepository->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    33 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/signUpDTO.html":{"url":"classes/signUpDTO.html","title":"class - signUpDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  signUpDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/signUp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail({}, {message: 'Invalid email format'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/signUp.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/signUp.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8, {message: 'password must be at least 8 characters long'})@MaxLength(20, {message: 'password must not exceed 20 characters'})@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()])[A-Za-z\\d!@#$%^&*()]{8,}$/, {message: 'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character from !@#$%^&*()'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/signUp.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsEmail,\n    IsNotEmpty,\n    IsString,\n    Matches,\n    MaxLength,\n    MinLength,\n} from 'class-validator';\n\nexport class signUpDTO {\n    @IsString()\n    @IsNotEmpty()\n    name: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @IsEmail({}, { message: 'Invalid email format' })\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8, { message: 'password must be at least 8 characters long' })\n    @MaxLength(20, { message: 'password must not exceed 20 characters' })\n    @Matches(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()])[A-Za-z\\d!@#$%^&*()]{8,}$/,\n        {\n            message:\n                'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character from !@#$%^&*()',\n        },\n    )\n    password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/signUpUser.html":{"url":"classes/signUpUser.html","title":"class - signUpUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  signUpUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/schema/signUp.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail({}, {message: 'Invalid email format'})@Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schema/signUp.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schema/signUp.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8, {message: 'password must be at least 8 characters long'})@MaxLength(20, {message: 'password must not exceed 20 characters'})@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()])[A-Za-z\\d!@#$%^&*()]{8,}$/, {message: 'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character from !@#$%^&*()'})@Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schema/signUp.schema.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\nimport {\n    IsEmail,\n    IsNotEmpty,\n    IsString,\n    Matches,\n    MaxLength,\n    MinLength,\n} from 'class-validator';\n\n@InputType()\nexport class signUpUser {\n    @IsString()\n    @IsNotEmpty()\n    @Field()\n    name: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @IsEmail({}, { message: 'Invalid email format' })\n    @Field()\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8, { message: 'password must be at least 8 characters long' })\n    @MaxLength(20, { message: 'password must not exceed 20 characters' })\n    @Matches(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()])[A-Za-z\\d!@#$%^&*()]{8,}$/,\n        {\n            message:\n                'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character from !@#$%^&*()',\n        },\n    )\n    @Field()\n    password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BoardAddressInput   (src/.../graphql.ts)\n                        \n                        \n                            BoardAddressOutput   (src/.../graphql.ts)\n                        \n                        \n                            BoardAddressOutputResolvers   (src/.../graphql.ts)\n                        \n                        \n                            BoardCommentResponseDto   (src/.../graphql.ts)\n                        \n                        \n                            BoardCommentResponseDtoResolvers   (src/.../graphql.ts)\n                        \n                        \n                            BoardPaginationResponse   (src/.../graphql.ts)\n                        \n                        \n                            BoardPaginationResponseResolvers   (src/.../graphql.ts)\n                        \n                        \n                            BoardReactionSchema   (src/.../graphql.ts)\n                        \n                        \n                            BoardReactionSchemaResolvers   (src/.../graphql.ts)\n                        \n                        \n                            BoardSchema   (src/.../graphql.ts)\n                        \n                        \n                            BoardSchemaResolvers   (src/.../graphql.ts)\n                        \n                        \n                            ClearBoardMutation   (src/.../graphql.ts)\n                        \n                        \n                            ClearBoardMutationVariables   (src/.../graphql.ts)\n                        \n                        \n                            CreateBoardCommentInput   (src/.../graphql.ts)\n                        \n                        \n                            CreateBoardCommentMutation   (src/.../graphql.ts)\n                        \n                        \n                            CreateBoardCommentMutationVariables   (src/.../graphql.ts)\n                        \n                        \n                            CreateBoardInput   (src/.../graphql.ts)\n                        \n                        \n                            CreateBoardMutation   (src/.../graphql.ts)\n                        \n                        \n                            CreateBoardMutationVariables   (src/.../graphql.ts)\n                        \n                        \n                            DeleteBoardCommentMutation   (src/.../graphql.ts)\n                        \n                        \n                            DeleteBoardCommentMutationVariables   (src/.../graphql.ts)\n                        \n                        \n                            DeleteBoardMutation   (src/.../graphql.ts)\n                        \n                        \n                            DeleteBoardMutationVariables   (src/.../graphql.ts)\n                        \n                        \n                            DirectiveResolverFn   (src/.../graphql.ts)\n                        \n                        \n                            Exact   (src/.../graphql.ts)\n                        \n                        \n                            GetBoardCommentQuery   (src/.../graphql.ts)\n                        \n                        \n                            GetBoardCommentQueryVariables   (src/.../graphql.ts)\n                        \n                        \n                            GetBoardQuery   (src/.../graphql.ts)\n                        \n                        \n                            GetBoardQueryVariables   (src/.../graphql.ts)\n                        \n                        \n                            GetBoardReactionQuery   (src/.../graphql.ts)\n                        \n                        \n                            GetBoardReactionQueryVariables   (src/.../graphql.ts)\n                        \n                        \n                            GetBoardsQuery   (src/.../graphql.ts)\n                        \n                        \n                            GetBoardsQueryVariables   (src/.../graphql.ts)\n                        \n                        \n                            Incremental   (src/.../graphql.ts)\n                        \n                        \n                            InputMaybe   (src/.../graphql.ts)\n                        \n                        \n                            IsPasswordCorrectMutation   (src/.../graphql.ts)\n                        \n                        \n                            IsPasswordCorrectMutationVariables   (src/.../graphql.ts)\n                        \n                        \n                            IsTypeOfResolverFn   (src/.../graphql.ts)\n                        \n                        \n                            MakeEmpty   (src/.../graphql.ts)\n                        \n                        \n                            MakeMaybe   (src/.../graphql.ts)\n                        \n                        \n                            MakeOptional   (src/.../graphql.ts)\n                        \n                        \n                            Maybe   (src/.../graphql.ts)\n                        \n                        \n                            Mutation   (src/.../graphql.ts)\n                        \n                        \n                            MutationCreateBoardArgs   (src/.../graphql.ts)\n                        \n                        \n                            MutationCreateBoardCommentArgs   (src/.../graphql.ts)\n                        \n                        \n                            MutationDeleteBoardArgs   (src/.../graphql.ts)\n                        \n                        \n                            MutationDeleteBoardCommentArgs   (src/.../graphql.ts)\n                        \n                        \n                            MutationIsPasswordCorrectArgs   (src/.../graphql.ts)\n                        \n                        \n                            MutationResolvers   (src/.../graphql.ts)\n                        \n                        \n                            MutationUpdateBoardArgs   (src/.../graphql.ts)\n                        \n                        \n                            MutationUpdateBoardCommentArgs   (src/.../graphql.ts)\n                        \n                        \n                            NextResolverFn   (src/.../graphql.ts)\n                        \n                        \n                            Query   (src/.../graphql.ts)\n                        \n                        \n                            QueryGetBoardArgs   (src/.../graphql.ts)\n                        \n                        \n                            QueryGetBoardCommentArgs   (src/.../graphql.ts)\n                        \n                        \n                            QueryGetBoardReactionArgs   (src/.../graphql.ts)\n                        \n                        \n                            QueryGetBoardsArgs   (src/.../graphql.ts)\n                        \n                        \n                            QueryResolvers   (src/.../graphql.ts)\n                        \n                        \n                            RequireFields   (src/.../graphql.ts)\n                        \n                        \n                            Resolver   (src/.../graphql.ts)\n                        \n                        \n                            ResolverFn   (src/.../graphql.ts)\n                        \n                        \n                            Resolvers   (src/.../graphql.ts)\n                        \n                        \n                            ResolversParentTypes   (src/.../graphql.ts)\n                        \n                        \n                            ResolversTypes   (src/.../graphql.ts)\n                        \n                        \n                            ResolverTypeWrapper   (src/.../graphql.ts)\n                        \n                        \n                            ResolverWithResolve   (src/.../graphql.ts)\n                        \n                        \n                            Scalars   (src/.../graphql.ts)\n                        \n                        \n                            SubscriptionObject   (src/.../graphql.ts)\n                        \n                        \n                            SubscriptionResolveFn   (src/.../graphql.ts)\n                        \n                        \n                            SubscriptionResolver   (src/.../graphql.ts)\n                        \n                        \n                            SubscriptionSubscribeFn   (src/.../graphql.ts)\n                        \n                        \n                            TypeResolveFn   (src/.../graphql.ts)\n                        \n                        \n                            UpdateBoardCommentInput   (src/.../graphql.ts)\n                        \n                        \n                            UpdateBoardCommentMutation   (src/.../graphql.ts)\n                        \n                        \n                            UpdateBoardCommentMutationVariables   (src/.../graphql.ts)\n                        \n                        \n                            UpdateBoardInput   (src/.../graphql.ts)\n                        \n                        \n                            UpdateBoardMutation   (src/.../graphql.ts)\n                        \n                        \n                            UpdateBoardMutationVariables   (src/.../graphql.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/generated/graphql.ts\n    \n    \n        \n            \n                \n                    \n                    BoardAddressInput\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BoardAddressOutput\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BoardAddressOutputResolvers\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BoardCommentResponseDto\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BoardCommentResponseDtoResolvers\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BoardPaginationResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BoardPaginationResponseResolvers\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BoardReactionSchema\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BoardReactionSchemaResolvers\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BoardSchema\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BoardSchemaResolvers\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ClearBoardMutation\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ClearBoardMutationVariables\n                \n            \n            \n                \n                            Exact\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CreateBoardCommentInput\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CreateBoardCommentMutation\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CreateBoardCommentMutationVariables\n                \n            \n            \n                \n                            Exact\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CreateBoardInput\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CreateBoardMutation\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CreateBoardMutationVariables\n                \n            \n            \n                \n                            Exact\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DeleteBoardCommentMutation\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DeleteBoardCommentMutationVariables\n                \n            \n            \n                \n                            Exact\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DeleteBoardMutation\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DeleteBoardMutationVariables\n                \n            \n            \n                \n                            Exact\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DirectiveResolverFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Exact\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetBoardCommentQuery\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetBoardCommentQueryVariables\n                \n            \n            \n                \n                            Exact\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetBoardQuery\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetBoardQueryVariables\n                \n            \n            \n                \n                            Exact\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetBoardReactionQuery\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetBoardReactionQueryVariables\n                \n            \n            \n                \n                            Exact\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetBoardsQuery\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetBoardsQueryVariables\n                \n            \n            \n                \n                            Exact\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Incremental\n                \n            \n            \n                \n                        T | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    InputMaybe\n                \n            \n            \n                \n                            Maybe\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IsPasswordCorrectMutation\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IsPasswordCorrectMutationVariables\n                \n            \n            \n                \n                            Exact\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IsTypeOfResolverFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MakeEmpty\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MakeMaybe\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MakeOptional\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Maybe\n                \n            \n            \n                \n                        T | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Mutation\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MutationCreateBoardArgs\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MutationCreateBoardCommentArgs\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MutationDeleteBoardArgs\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MutationDeleteBoardCommentArgs\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MutationIsPasswordCorrectArgs\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MutationResolvers\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MutationUpdateBoardArgs\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MutationUpdateBoardCommentArgs\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NextResolverFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Query\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryGetBoardArgs\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryGetBoardCommentArgs\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryGetBoardReactionArgs\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryGetBoardsArgs\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryResolvers\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequireFields\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Resolver\n                \n            \n            \n                \n                        ResolverFn | ResolverWithResolve\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResolverFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Resolvers\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResolversParentTypes\n                \n            \n            \n                \n                    Mapping between all available schema types and the resolvers parents\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResolversTypes\n                \n            \n            \n                \n                    Mapping between all available schema types and the resolvers types\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResolverTypeWrapper\n                \n            \n            \n                \n                        Promise | T\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResolverWithResolve\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Scalars\n                \n            \n            \n                \n                    All built-in and custom scalars, mapped to their actual values\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SubscriptionObject\n                \n            \n            \n                \n                        SubscriptionSubscriberObject | SubscriptionResolverObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SubscriptionResolveFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SubscriptionResolver\n                \n            \n            \n                \n                             | SubscriptionObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SubscriptionSubscribeFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TypeResolveFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateBoardCommentInput\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateBoardCommentMutation\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateBoardCommentMutationVariables\n                \n            \n            \n                \n                            Exact\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateBoardInput\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateBoardMutation\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateBoardMutationVariables\n                \n            \n            \n                \n                            Exact\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HOST   (src/.../main.ts)\n                        \n                        \n                            PORT   (src/.../main.ts)\n                        \n                        \n                            ResponseMessage   (src/.../response-message.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HOST\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.HOST\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PORT\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.PORT\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/response-message.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ResponseMessage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (message: string) =>\n    SetMetadata('response-message', message)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
