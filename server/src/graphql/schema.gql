# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BoardCommentResponseDTO {
  _id: ID!
  author: String!
  content: String!
  rating: Int
  parentId: String
  boardId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  replies: [BoardCommentResponseDTO!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type BoardReactionSchema {
  _id: ID!
  boardId: Int!
  like: Int!
  hate: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BoardAddressOutput {
  zoneCode: Int!
  address: String!
  detailAddress: String!
}

type BoardSchema {
  author: String!
  title: String!
  content: String!
  imageUrl: [String!]
  youtubeUrl: String
  boardAddressOutput: BoardAddressOutput
  boardId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BoardPaginationResponse {
  result: [BoardSchema!]!
  totalCount: Int!
}

type TokenSchema {
  accessToken: String!
}

type LoginSchema {
  accessToken: String!
  name: String!
  image: String!
}

type Query {
  getBoards(page: Int, take: Int): BoardPaginationResponse!
  getBoard(boardId: Int!): BoardSchema!
  getBoardReaction(boardId: Int!): BoardReactionSchema!
  getBoardComment(boardId: Int!, page: Int): [BoardCommentResponseDTO!]!
}

type Mutation {
  createBoard(createBoardInput: CreateBoardInput!): BoardSchema!
  updateBoard(boardId: Int!, updateBoardInput: UpdateBoardInput!): BoardSchema!
  deleteBoard(boardId: Int!): Boolean!
  clearBoard: Boolean!
  isPasswordCorrect(boardId: Int!, password: String!): Boolean!
  createBoardComment(boardId: Int!, createBoardComment: CreateBoardCommentInput!): BoardCommentResponseDTO!
  updateBoardComment(boardId: Int!, updateBoardComment: UpdateBoardCommentInput!, commentId: String!): BoardCommentResponseDTO!
  deleteBoardComment(boardId: Int!, commentId: String!): Boolean!
  signup(signUpUserInput: SignUpUserInput!, file: Upload): Boolean!
  login(loginUserInput: LoginUserInput!): LoginSchema!
  socialLogin(socialLoginInput: SocialLoginInput!): TokenSchema!
  logout: Boolean!
  validateNickname(nickname: String!): Boolean!
  deleteUser: Boolean!
}

input CreateBoardInput {
  author: String!
  password: String!
  title: String!
  content: String!
  imageUrl: [String!]
  youtubeUrl: String
  boardAddressInput: [BoardAddressInput!]
}

input BoardAddressInput {
  zoneCode: Int!
  address: String!
  detailAddress: String!
}

input UpdateBoardInput {
  title: String!
  content: String!
  imageUrl: [String!]
  youtubeUrl: String
  boardAddressInput: [BoardAddressInput!]
}

input CreateBoardCommentInput {
  author: String!
  content: String!
  rating: Int
  parentId: String
  password: String!
}

input UpdateBoardCommentInput {
  content: String!
  rating: Int
  password: String!
  parentId: String
}

input SignUpUserInput {
  name: String!
  nickname: String!
  email: String!
  password: String!
  role: Role
  address: AddressInput
}

"""사용자 역할 (USER 또는 MANAGER)"""
enum Role {
  USER
  MANAGER
}

input AddressInput {
  zoneCode: Int!
  address: String!
  detailAddress: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input LoginUserInput {
  email: String!
  password: String!
  dev: Boolean
}

input SocialLoginInput {
  name: String!
  email: String!
  provider: String!
}