import Button from "./button";

export const revalidate = 10; // 몇 초 동안 캐시를 유지할 것인지 설정 => 기본값 1년(60 * 60 * 24 * 365 = 31536000초)

export default async function RscWithCachePage() {
  return (
    <>
      <Button>요청하기</Button>
    </>
  );
}

// 모든 컴포넌트를 React Client Component 로 하면 안좋은 이유
// 성능 저하: 클라이언트 컴포넌트는 브라우저에서 실행되므로 초기 로딩 시간이 길어질 수 있습니다. 특히 데이터가 많은 애플리케이션에서는 더 느리게 작동할 수 있습니다.
// SEO 문제: 클라이언트 컴포넌트는 브라우저에서 렌더링되므로 검색 엔진이 페이지의 콘텐츠를 인덱싱하기 어려울 수 있습니다. 이는 SEO(검색 엔진 최적화)에 불리하게 작용합니다.
// 보안 취약점: 클라이언트 측에서 모든 로직을 처리하면 민감한 데이터가 노출될 위험이 있습니다. 서버 측에서 처리하는 것이 더 안전할 수 있습니다.
// 복잡한 상태 관리: 모든 것을 클라이언트에서 처리하면 상태 관리가 복잡해질 수 있습니다. 특히 대규모 애플리케이션에서는 상태 관리를 일관되게 유지하기 어려울 수 있습니다.
// 네트워크 비용 증가: 클라이언트 컴포넌트는 서버와의 통신이 빈번하게 발생할 수 있으며, 이는 네트워크 비용을 증가시킬 수 있습니다.
// 서버 자원 활용 불가: 서버 컴포넌트를 사용하면 서버 자원을 활용할 수 있으므로 복잡한 연산을 보다 효율적으로 처리할 수 있습니다. 클라이언트 컴포넌트만 사용하면 이러한 이점을 누리기 어렵습니다.
